package com.boe.idm.project.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.boe.idm.project.mapper.primaryOracle.dev.CfWipMoveMapper;
import com.boe.idm.project.model.mybatis.CfWipMoveBasicinfoVO;
import com.boe.idm.project.model.mybatis.CfWipMoveMoveVO;
import com.boe.idm.project.model.mybatis.CfWipMovePlanVO;
import com.boe.idm.project.model.mybatis.CfWipMoveVO;
import com.boe.idm.project.model.mybatis.CfWipMoveWipVO;
import com.boe.idm.project.service.CfWipMoveService;

@Service
public class CfWipMoveServiceImple implements CfWipMoveService {
	
	@Autowired
	private CfWipMoveMapper mapper;

	@Override
	public List<CfWipMoveVO> queryNumbers(String timedate,String timehour) {
		return mapper.queryNumbers(timedate,timehour);
	}

	@Override
	public List<CfWipMoveWipVO> queryWipNumbers(String timehour) {
		return mapper.queryWipNumbers(timehour);
	}

	@Override
	public List<CfWipMoveMoveVO> queryMoveNumbers(String timehour) {
		return mapper.queryMoveNumbers(timehour);
	}

	@Override
	public List<CfWipMoveBasicinfoVO> queryAllBasicinfo() {
		return mapper.queryAllBasicinfo();
	}

	@Override
	public int insertOne(CfWipMoveBasicinfoVO cfWipMoveBasicinfoVO) {
		return mapper.insertOne(cfWipMoveBasicinfoVO);
	}

	@Override
	public int updateOne(String factorynew, String productspecnew, String linenew, String factoryold,
			String productspecold, String lineold) {
		return mapper.updateOne(factorynew, productspecnew, linenew, factoryold, productspecold, lineold);
	}
	@Override
	public int deleteOne(CfWipMoveBasicinfoVO cfWipMoveBasicinfoVO) {
		return mapper.deleteOne(cfWipMoveBasicinfoVO);
	}

	
	/**
	 * 倒入excel表格中的数据方法
	 */
	@Override
	public List<CfWipMovePlanVO> readExcel(String filePath) throws Exception{
		List<CfWipMovePlanVO> lists = new ArrayList<CfWipMovePlanVO>();
		File excelfile = new File(filePath.replaceAll("\\\\", "/"));
		
		if (excelfile != null  && excelfile.exists()) {
			Workbook workbook = this.getWorkbok(excelfile);
			if (workbook != null) {
				Sheet sheet = workbook.getSheetAt(0);
				if (sheet != null) {
					//这里就是一行一行的读数据
					for(int i = sheet.getFirstRowNum()+1;i <= sheet.getLastRowNum();i++){
						Row row = sheet.getRow(i);
						if (row == null) {
							continue;
						}
						//当这一行不为空的时候，就可以 创建对象，放数据了
						CfWipMovePlanVO cfWipMovePlanVO = new CfWipMovePlanVO();
						int firstcellnum =  row.getFirstCellNum();
						cfWipMovePlanVO.setFactory((row.getCell(firstcellnum) != null && String.valueOf(row.getCell(firstcellnum)).trim() != "") ? String.valueOf(row.getCell(firstcellnum)) : "CF");
						
						String hourtimekeystr = String.valueOf(row.getCell(firstcellnum+1));
						if (hourtimekeystr.equals("") || hourtimekeystr.trim() == "") {
							cfWipMovePlanVO.setHourtimekey("");
						}else{
							Double aa = Double.parseDouble(hourtimekeystr);
							BigDecimal bb = new BigDecimal(aa);
							cfWipMovePlanVO.setHourtimekey(row.getCell(firstcellnum+1) != null ? bb.toString() : "");
						}
						
						cfWipMovePlanVO.setOpercode(row.getCell(firstcellnum+2) != null ? String.valueOf(row.getCell(firstcellnum+2)) : "");
						cfWipMovePlanVO.setLine(row.getCell(firstcellnum+3) != null ? String.valueOf(row.getCell(firstcellnum+3)) : "");
						cfWipMovePlanVO.setQty(row.getCell(firstcellnum+4) != null ? String.valueOf(row.getCell(firstcellnum+4)) : "");
						cfWipMovePlanVO.setOwner("CF-H");
						
						//如果当前对象不为null 并且 列表中没有当前对象的时候
						if (cfWipMovePlanVO.getHourtimekey() != null && cfWipMovePlanVO.getHourtimekey() != ""
							&& cfWipMovePlanVO.getLine() != null && cfWipMovePlanVO.getLine() != ""
							&& cfWipMovePlanVO.getOpercode() != null && cfWipMovePlanVO.getOpercode() != ""
							&& cfWipMovePlanVO.getQty() != null && cfWipMovePlanVO.getQty() != ""
							&& !lists.contains(cfWipMovePlanVO)) {
							lists.add(cfWipMovePlanVO);
						}
						
						
					}
					
				}
				
			}
		
		}
		
		return lists;
	}
	  /**
     * 判断Excel的版本,获取Workbook
     * @param File
     * @return Workbook
     * @throws IOException
     */
    public Workbook getWorkbok(File file) throws IOException{
    	String fileType = file.getName().substring(file.getName().lastIndexOf("."), file.getName().length());
        Workbook wb = null;
        FileInputStream in = new FileInputStream(file);
        if(fileType.toUpperCase().endsWith("XLS")){     //Excel&nbsp;2003
            wb = new HSSFWorkbook(in);
        }else if(fileType.toUpperCase().endsWith("XLSX")){    // Excel 2007/2010
            wb = new XSSFWorkbook(in);
        }
        return wb;
    }

	@Override
	public int insertPlanOne(List<CfWipMovePlanVO> list) {
		
		int flag = 0; // 这个完全没有用
		
		for(Object object : list){
			HashMap map = (HashMap) object;
			CfWipMovePlanVO cfWipMovePlanVO = new CfWipMovePlanVO();
			
			cfWipMovePlanVO.setFactory(map.get("factory").toString());
			cfWipMovePlanVO.setHourtimekey(map.get("hourtimekey").toString());
			cfWipMovePlanVO.setOpercode(map.get("opercode").toString());
			cfWipMovePlanVO.setLine(map.get("line").toString());
			cfWipMovePlanVO.setQty(map.get("qty").toString());
			cfWipMovePlanVO.setOwner(map.get("owner").toString());
			
			if (cfWipMovePlanVO != null) {
				flag = mapper.insertPlanOne(cfWipMovePlanVO);
			}
		}
		
		return flag;
	}

	@Override
	public List<CfWipMovePlanVO> queryPlanByHourtimekey(String hourtimekey) {
		return mapper.queryPlanByHourtimekey(hourtimekey);
	}

	


}
