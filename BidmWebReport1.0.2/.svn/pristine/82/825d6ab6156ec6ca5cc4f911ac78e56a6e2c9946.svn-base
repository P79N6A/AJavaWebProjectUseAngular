webpackJsonp(["toumingdisplan.module"],{

/***/ "./src/app/toumingdisplan/cstgls/cstgls.component.css":
/***/ (function(module, exports) {

module.exports = "th {\r\n    font-weight: inherit !important;\r\n    padding: .625em 0em !important;\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n}\r\n\r\ntd {\r\n    font-weight: inherit !important;\r\n    padding: 0.625em 0em !important;\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n    background-color: rgba(0,0,0,0.1)!important;\r\n    color: #F2F6FA !important;\r\n    text-align: center !important;\r\n}\r\n\r\n.touming {\r\n    background-color:rgba(0,0,0,0.1)!important;\r\n    color: #F2F6FA!important;\r\n}\r\n\r\ninput::-webkit-outer-spin-button,input::-webkit-inner-spin-button{\r\n    -webkit-appearance: none !important;\r\n}\r\n\r\n.header1 {\r\n    background-color: rgba(0,0,0,0.1)!important;\r\n    color: whitesmoke !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.header2 {\r\n    background-color: #20506F !important;\r\n    color: #F2F6FA !important;\r\n}\r\n\r\n.header3 {\r\n    background-color: #20506F !important;\r\n    color: #F2F6FA !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.clickable:hover {\r\n    background-color: #314879 !important;\r\n    cursor: pointer !important;\r\n}\r\n\r\n.alarm {\r\n    background-color: rgb(231, 130, 130) !important;\r\n}\r\n"

/***/ }),

/***/ "./src/app/toumingdisplan/cstgls/cstgls.component.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"firstView\">\n  <div style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat; \n    background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <div class=\"ui-g-12\">\n      <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n    </div>\n    <div class=\"ui-g-12\">\n      <div class=\"ui-g-7\" style=\"color:#F2F6FA; margin-left: 7%;font-size: 1.2em;font-weight: bold;margin-top: -15px\">CstGls 信息管理</div>\n      <div class=\"ui-float-label ui-g-1\" style=\"margin-top:20px;margin-left: -30px\">\n        <input id=\"float-input-start\" type=\"number\" [(ngModel)]=\"dateStart\" pInputText style=\"color:#F2F6FA;text-align: center;width: 80px\">\n        <label for=\"float-input-start\" style=\"color:#F2F6FA;\">&nbsp;&nbsp;开始天数</label>\n      </div>\n      <div class=\"ui-float-label ui-g-1\" style=\"margin-top:20px ;margin-left:-10px\">\n        <input id=\"float-input-end\" type=\"number\" [(ngModel)]=\"dateEnd\" pInputText style=\"color:#F2F6FA;text-align: center;width: 80px\">\n        <label for=\"float-input-end\" style=\"color:#F2F6FA;\">&nbsp;&nbsp;结束天数</label>\n      </div>\n      <p-button class=\"ui-g-1\" label=\"查询\" (click)=\"queryData()\" style=\"padding:20px 0px 0px 0px;\"></p-button>\n      <p-button  label=\"刷新\" (click)=\"refresh()\" style=\"padding-top:20px;margin-left: -40px\"></p-button>\n    </div>\n  </div>\n  <div class=\"ui-g\" style=\"padding:0 3%;height:100%;background-image: url('assets/bg3_02.png');\n    background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <!-- First Table -->\n    <div class=\"ui-g-6\">\n      <p-table>\n        <ng-template pTemplate=\"header\">\n          <!-- 第一行 -->\n          <tr>\n            <th class=\"header1\" rowspan=\"2\">卡夹类型</th>\n            <th class=\"header1\" rowspan=\"2\">位置</th>\n            <th class=\"header1\" rowspan=\"2\">基板属性</th>\n            <th class=\"header1\" rowspan=\"2\">总数</th>\n            <th class=\"header1\" rowspan=\"2\">Ratio</th>\n            <th class=\"header1\" rowspan=\"2\">Pro</th>\n            <th class=\"header1\" rowspan=\"2\">E/D</th>\n            <th class=\"header1\" rowspan=\"2\">Dum</th>\n            <th class=\"header1\" colspan=\"7\">Empty</th>\n          </tr>\n          <!-- 第二行 -->\n          <tr>\n            <th class=\"header1\">TTL</th>\n            <th class=\"header1\">Oneqp</th>\n            <th class=\"header1\">Move</th>\n            <th class=\"header1\">Istk</th>\n            <th class=\"header1\">Dirty</th>\n            <th class=\"header1\">Ostk</th>\n            <th class=\"header1\">Other</th>\n          </tr>\n          <!-- 第三行 -->\n          <tr>\n            <th class=\"touming\" rowspan=\"3\">ACN</th>\n            <th class=\"touming\">Array</th>\n            <th class=\"touming\">TFT</th>\n            <th class=\"touming\" rowspan=\"2\">1141</th>\n\n            <th class=\"touming\" [ngClass]=\"{clickable:i > 0,alarm:(i==2 && edACNArraySort && qty !== '-')}\" *ngFor=\"let qty of ACNArrayTFT;let i = index\"\n              (click)=\"toSecondTable($event,'ACN','Array','TFT',i)\">{{qty}}</th>\n\n            <th class=\"touming\" *ngFor=\"let qty of ACNEMPTY;let i = index\" [ngClass]=\"{clickable:((i>0)&&(i<6)), alarm:(i == 4 && qty !== '-')}\"\n              (click)=\"toSecondTableEmpty($event,'ACN',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第四行 -->\n          <tr>\n            <th class=\"touming\">Sort</th>\n            <th class=\"touming\">TFT</th>\n            <th class=\"touming\" *ngFor=\"let qty of ACNSortTFT;let i =index\" [ngClass]=\"{clickable:i > 0,alarm:(i == 1 && qty > 40 ) || (i==2 && edACNArraySort && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'ACN','Sort','TFT',i)\">{{qty}}</th>\n            <!-- <th class=\"touming\" rowspan=\"2\" colspan=\"7\">{{ACNRemark}}</th> -->\n            <!-- 下面是 可以嵌入内容的地方 -->\n            <th pEditableColumn rowspan=\"2\" colspan=\"7\" class=\"touming\">\n              <p-cellEditor>\n                <ng-template pTemplate=\"input\">\n                  <textarea pInputTextArea rows=\"4\" cols=\"50\" [(ngModel)]=\"ACNRemark\"  \n                            style=\"width:100%;color: #F2F6FA;background-color: rgba(0,0,0,0.1);border-style: none\" \n                            (change)=\"updateRemark('ACN',0)\">\n                  </textarea>\n                </ng-template>\n                <ng-template pTemplate=\"output\">\n                  {{ACNRemark}}\n                </ng-template>\n              </p-cellEditor>\n            </th>\n          </tr>\n          <!-- 第五行 -->\n          <tr>\n            <th class=\"touming\">Cell</th>\n            <th class=\"touming\">TFT</th>\n            <th class=\"touming\">3</th>\n            <th class=\"touming\" *ngFor=\"let qty of ACNCellTFT;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:(i == 3 && qty > 3) || ((i >= 1 && i <= 2) && pedACNCell && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'ACN','Cell','TFT',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第六行 -->\n          <tr>\n            <th class=\"touming\" colspan=\"15\">&nbsp;</th>\n          </tr>\n          <!-- 第七行 -->\n          <tr>\n            <th class=\"touming\" rowspan=\"5\">FCW</th>\n            <th class=\"touming\">CF</th>\n            <th class=\"touming\">CF</th>\n            <th class=\"touming\" rowspan=\"5\">908</th>\n\n            <th class=\"touming\" *ngFor=\"let qty of FCWCFCF;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:(i==2 && edFCWCFScfStft && qty !== '-') || (i == 3 && dumFCWCFScfStft && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'FCW','CF','CF',i)\">{{qty}}</th>\n\n            <th class=\"touming\" rowspan=\"2\" *ngFor=\"let qty of FCWEMPTY;let i = index\" [ngClass]=\"{clickable:((i>0)&&(i<6)), alarm:(i == 4 && qty !== '-')}\"\n              (click)=\"toSecondTableEmpty($event,'FCW',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第八行 -->\n          <tr>\n            <th class=\"touming\">Sort</th>\n            <th class=\"touming\">CF</th>\n            <th class=\"touming\" *ngFor=\"let qty of FCWSortCF;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:(i==2 && edFCWCFScfStft && qty !== '-') || (i == 3 && dumFCWCFScfStft && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'FCW','Sort','CF',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第九行 -->\n          <tr>\n            <th class=\"touming\">Sort</th>\n            <th class=\"touming\">TFT</th>\n            <th class=\"touming\" *ngFor=\"let qty of FCWSortTFT;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:(i == 1&& qty > 151) || (i==2 && edFCWCFScfStft && qty !== '-') || (i == 3 && dumFCWCFScfStft && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'FCW','Sort','TFT',i)\">{{qty}}</th>\n            <!-- <th class=\"touming\" rowspan=\"3\" colspan=\"7\">{{FCWRemark}}</th> -->\n             <!-- 下面是 可以嵌入内容的地方 -->\n             <th pEditableColumn rowspan=\"3\" colspan=\"7\" class=\"touming\">\n              <p-cellEditor>\n                <ng-template pTemplate=\"input\">\n                  <textarea pInputTextArea rows=\"4\" cols=\"50\" [(ngModel)]=\"FCWRemark\"  \n                            style=\"width:100%;color: #F2F6FA;background-color: rgba(0,0,0,0.1);border-style: none\" \n                            (change)=\"updateRemark('FCW',1)\">\n                  </textarea>\n                </ng-template>\n                <ng-template pTemplate=\"output\">\n                  {{FCWRemark}}\n                </ng-template>\n              </p-cellEditor>\n            </th>\n          </tr>\n          <!-- 第十行 -->\n          <tr>\n            <th class=\"touming\">Cell</th>\n            <th class=\"touming\">TFT</th>\n            <th class=\"touming\" *ngFor=\"let qty of FCWCellTFT;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:((i >= 1 && i <=3) && peddFCWCell && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'FCW','Cell','TFT',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第十一行 -->\n          <tr>\n            <th class=\"touming\">Cell</th>\n            <th class=\"touming\">CF</th>\n            <th class=\"touming\" *ngFor=\"let qty of FCWCellCF;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:((i >= 1 && i <=3) && peddFCWCell && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'FCW','Cell','CF',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第十二行 -->\n          <tr>\n            <th class=\"touming\" colspan=\"15\">&nbsp;</th>\n          </tr>\n          <!-- 第十三行 -->\n          <tr>\n            <th class=\"touming\" rowspan=\"4\">CCN</th>\n            <th class=\"touming\">Array</th>\n            <th class=\"touming\">-</th>\n            <th class=\"touming\" rowspan=\"4\">410</th>\n\n            <th class=\"touming\" *ngFor=\"let qty of CCNArray;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:((i >= 1 && i <=3) && peddCCNArraySort && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'CCN','Array','-',i)\">{{qty}}</th>\n\n            <th class=\"touming\" rowspan=\"2\" *ngFor=\"let qty of CCNEMPTY;let i = index\" [ngClass]=\"{clickable:((i>0)&&(i<6)), alarm:(i == 4 && qty !== '-')}\"\n              (click)=\"toSecondTableEmpty($event,'CCN',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第十四行 -->\n          <tr>\n            <th class=\"touming\">Sort</th>\n            <th class=\"touming\">-</th>\n            <th class=\"touming\" *ngFor=\"let qty of CCNSort;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:((i >= 1 && i <=3) && peddCCNArraySort && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'CCN','Sort','-',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第十五行 -->\n          <tr>\n            <th class=\"touming\">PI/RW</th>\n            <th class=\"touming\">-</th>\n            <th class=\"touming\" *ngFor=\"let qty of CCNPIRW;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:(i == 1 && qty > 19) || (i == 2 && edCCNPIOther && qty !== '-') || (i == 3 && dumCCNPIOther && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'CCN','PI/RW','-',i)\">{{qty}}</th>\n            <!-- <th class=\"touming\" rowspan=\"2\" colspan=\"7\">{{CCNRemark}}</th> -->\n            <!-- 下面是 可以嵌入内容的地方 -->\n            <th pEditableColumn rowspan=\"2\" colspan=\"7\" class=\"touming\">\n              <p-cellEditor>\n                <ng-template pTemplate=\"input\">\n                  <textarea pInputTextArea rows=\"4\" cols=\"50\" [(ngModel)]=\"CCNRemark\"  \n                            style=\"width:100%;color: #F2F6FA;background-color: rgba(0,0,0,0.1);border-style: none\" \n                            (change)=\"updateRemark('CCN',2)\">\n                  </textarea>\n                </ng-template>\n                <ng-template pTemplate=\"output\">\n                  {{CCNRemark}}\n                </ng-template>\n              </p-cellEditor>\n            </th>\n          </tr>\n          <!-- 第十六行 -->\n          <tr>\n            <th class=\"touming\">Other</th>\n            <th class=\"touming\">-</th>\n            <th class=\"touming\" *ngFor=\"let qty of CCNOther;let i = index\" [ngClass]=\"{clickable:i > 0,alarm:(i == 2 && edCCNPIOther && qty !== '-') || (i == 3 && dumCCNPIOther && qty !== '-')}\"\n              (click)=\"toSecondTable($event,'CCN','Other','-',i)\">{{qty}}</th>\n          </tr>\n          <!-- 第十七行 -->\n          <tr>\n            <th class=\"touming\" colspan=\"15\">&nbsp;</th>\n          </tr>\n          <!-- 第十八行 -->\n          <tr>\n            <th class=\"touming\">MCW</th>\n            <th class=\"touming\">Cell</th>\n            <th class=\"touming\">-</th>\n            <th class=\"touming\">225</th>\n\n            <th class=\"touming\" *ngFor=\"let qty of MCWCell;let i = index\" [ngClass]=\"{clickable:i > 0}\" (click)=\"toSecondTable($event,'MCW','Cell','-',i)\">{{qty}}</th>\n\n            <th class=\"touming\" rowspan=\"2\" *ngFor=\"let qty of MCWEMPTY;let i = index\" [ngClass]=\"{clickable:((i>0)&&(i<6)), alarm:(i == 4 && qty !== '-')}\"\n              (click)=\"toSecondTableEmpty($event,'MCW',i)\">{{qty}}</th>\n          </tr>\n        </ng-template>\n      </p-table>\n    </div>\n\n    <!-- Second Table -->\n    <div class=\"ui-g-2\">\n      <p-table>\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th class=\"header1\" colspan=\"4\">Stocker+EQP</th>\n          </tr>\n          <tr>\n            <th class=\"header1\">Stocker</th>\n            <th class=\"header1\">Max</th>\n            <th class=\"header1\">Current</th>\n            <th class=\"header1\">Ratio</th>\n          </tr>\n          <tr>\n            <th class=\"header3\">TFST01</th>\n            <th class=\"header2\" *ngFor=\"let name of TFST01;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst01)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST1\">\n            <th class=\"touming\">{{obj.cst_spec}}</th>\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n          <tr>\n            <th class=\"header3\">TFST02</th>\n            <th class=\"header2\" *ngFor=\"let name of TFST02;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst02)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST2\">\n            <th class=\"touming\">{{obj.cst_spec}}</th>\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n          <tr>\n            <th class=\"header3\">TFST03</th>\n            <th class=\"header2\" *ngFor=\"let name of TFST03;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst03)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST3\">\n            <th class=\"touming\">{{obj.cst_spec}}</th>\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n          <tr>\n            <th class=\"header3\">TFST04</th>\n            <th class=\"header2\" *ngFor=\"let name of TFST04;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst04)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST4\">\n            <th class=\"touming\">{{obj.cst_spec}}</th>\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n        </ng-template>\n      </p-table>\n    </div>\n\n    <!-- Third Table -->\n    <div class=\"ui-g-2\">\n      <p-table>\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th class=\"header1\" colspan=\"3\">Stocker</th>\n          </tr>\n          <tr>\n            <th class=\"header1\">Max</th>\n            <th class=\"header1\">Current</th>\n            <th class=\"header1\">Ratio</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of TFST01S;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst01s)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST1S\">\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of TFST02S;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst02s)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST2S\">\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of TFST03S;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst03s)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST3S\">\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of TFST04S;let i=index\" [ngClass]=\"{alarm:(i == 2 && tfst04s)}\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of TFST4S\">\n            <th class=\"touming\">{{obj.maxqty}}</th>\n            <th class=\"touming\">{{obj.currentqty}}</th>\n            <th class=\"touming\">{{obj.full_ratio}}</th>\n          </tr>\n        </ng-template>\n      </p-table>\n    </div>\n    <div class=\"ui-g-2\">\n      <p-table>\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th class=\"header1\" colspan=\"4\">Stocker+EQP CST分布</th>\n          </tr>\n          <tr>\n            <th class=\"header1\">Pro</th>\n            <th class=\"header1\">E/D</th>\n            <th class=\"header1\">Dum</th>\n            <th class=\"header1\">Empty</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of SUM1\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of lastT01\">\n            <th class=\"touming\">{{obj.production}}</th>\n            <th class=\"touming\">{{obj.engdev}}</th>\n            <th class=\"touming\">{{obj.dummy}}</th>\n            <th class=\"touming\">{{obj.empty}}</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of SUM2\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of lastT02\">\n            <th class=\"touming\">{{obj.production}}</th>\n            <th class=\"touming\">{{obj.engdev}}</th>\n            <th class=\"touming\">{{obj.dummy}}</th>\n            <th class=\"touming\">{{obj.empty}}</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of SUM3\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of lastT03\">\n            <th class=\"touming\">{{obj.production}}</th>\n            <th class=\"touming\">{{obj.engdev}}</th>\n            <th class=\"touming\">{{obj.dummy}}</th>\n            <th class=\"touming\">{{obj.empty}}</th>\n          </tr>\n          <tr>\n            <th class=\"header2\" *ngFor=\"let name of SUM4\">{{name}}</th>\n          </tr>\n          <tr *ngFor=\"let obj of lastT04\">\n            <th class=\"touming\">{{obj.production}}</th>\n            <th class=\"touming\">{{obj.engdev}}</th>\n            <th class=\"touming\">{{obj.dummy}}</th>\n            <th class=\"touming\">{{obj.empty}}</th>\n          </tr>\n        </ng-template>\n      </p-table>\n    </div>\n  </div>\n  <div style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\"></div>\n</div>\n<!-- 下钻的二级表 -->\n<div *ngIf=\"secondView\">\n  <div class=\"ui-g\" style=\"padding:20px;height:100%;background-image: url('assets/picture/6.png');background-repeat:no-repeat; \n  background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <div class=\"ui-g-12\">\n      <p-button label=\"return\" icon=\"fa fa-home\" style=\"float: right;\" (click)=\"showFirstTable()\"></p-button>\n    </div>\n    <div class=\"ui-g-12\">\n      <p-table [resizableColumns]=\"true\" columnResizeMode=\"expand\">\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th class=\"header1\" pResizableColumn width=\"6%\">CST_ID</th>\n            <th class=\"header1\" pResizableColumn width=\"3%\">Day</th>\n            <th class=\"header1\" pResizableColumn width=\"5%\">Oper</th>\n            <th class=\"header1\" pResizableColumn width=\"5%\">EQP ID</th>\n            <th class=\"header1\" pResizableColumn width=\"10%\">Lot ID</th>\n            <th class=\"header1\" pResizableColumn width=\"10%\">Lot ProSpec</th>\n            <th class=\"header1\" pResizableColumn width=\"5%\">Pro Qty</th>\n            <th class=\"header1\" pResizableColumn width=\"3%\">Lot Hold State</th>\n            <th class=\"header1\" pResizableColumn width=\"14%\">Lot Last Event Comment</th>\n            <th class=\"header1\" pResizableColumn width=\"11%\">Lot Last Event Time</th>\n            <th class=\"header1\" pResizableColumn>Last Comment</th>\n            <th class=\"header1\" pResizableColumn width=\"11%\">Last Event Time</th>\n          </tr>\n          <tr *ngFor=\"let obj of SecondTableArray\">\n            <td>{{obj.cst_id}}</td>\n            <td>{{obj.days}}</td>\n            <td>{{obj.operation}}</td>\n            <td>{{obj.eqp}}</td>\n            <td>{{obj.lot_id}}</td>\n            <td>{{obj.product}}</td>\n            <td>{{obj.qty}}</td>\n            <td>{{obj.holdstate}}</td>\n            <td>{{obj.lot_comment}}</td>\n            <td>{{obj.lot_time}}</td>\n            <td>{{obj.cst_comment}}</td>\n            <td>{{obj.cst_time}}</td>\n          </tr>\n        </ng-template>\n\n      </p-table>\n    </div>\n  </div>\n</div>\n<!-- 下钻的二级表区域结束 -->\n"

/***/ }),

/***/ "./src/app/toumingdisplan/cstgls/cstgls.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CstglsComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__ = __webpack_require__("./src/app/toumingdisplan/cstgls/model/cst_stocker_info.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var CstglsComponent = /** @class */ (function () {
    function CstglsComponent(apiService) {
        this.apiService = apiService;
        this.SecondTableArray = [];
        this.firstView = false;
        this.secondView = false;
        // 判断第二个表的ratio是否超过90%
        this.tfst01 = false;
        this.tfst02 = false;
        this.tfst03 = false;
        this.tfst04 = false;
        // 判断第三个表的ratio是否超过90%
        this.tfst01s = false;
        this.tfst02s = false;
        this.tfst03s = false;
        this.tfst04s = false;
        // 控制是否报警，判断几个单元格的数值和是否大于某一个值。
        this.edACNArraySort = false;
        this.pedACNCell = false;
        this.edFCWCFScfStft = false;
        this.dumFCWCFScfStft = false;
        this.peddFCWCell = false;
        this.peddCCNArraySort = false;
        this.edCCNPIOther = false;
        this.dumCCNPIOther = false;
        // 定义一个数组用来保存报警的阈值。
        this.alarmArray = [50, 0, 26, 9, 50, 0, 0, 38];
        // 声明两个变量用来存上一次执行queryData方法的开始时间和结束时间
        this.predateStart = -1;
        this.predateEnd = -1;
        this.ArrayFirst = []; // 用来存下面的十三个数组
        // 用来存左边第一个表Ratio、pro、E/D、Dum四列数据
        this.ACNArrayTFT = ['-', '-', '-', '-'];
        this.ACNSortTFT = ['-', '-', '-', '-'];
        this.ACNCellTFT = ['-', '-', '-', '-'];
        this.FCWCFCF = ['-', '-', '-', '-'];
        this.FCWSortCF = ['-', '-', '-', '-'];
        this.FCWSortTFT = ['-', '-', '-', '-'];
        this.FCWCellTFT = ['-', '-', '-', '-'];
        this.FCWCellCF = ['-', '-', '-', '-'];
        this.CCNArray = ['-', '-', '-', '-'];
        this.CCNSort = ['-', '-', '-', '-'];
        this.CCNPIRW = ['-', '-', '-', '-'];
        this.CCNOther = ['-', '-', '-', '-'];
        this.MCWCell = ['-', '-', '-', '-'];
        this.ArraySecond = []; // 用来存下面的四个数组
        // 用来左边第一个表empty七列的数据
        this.ACNEMPTY = ['-', '-', '-', '-', '-', '-', '-'];
        this.FCWEMPTY = ['-', '-', '-', '-', '-', '-', '-'];
        this.CCNEMPTY = ['-', '-', '-', '-', '-', '-', '-'];
        this.MCWEMPTY = ['-', '-', '-', '-', '-', '-', '-'];
        // 用来存第二个表stocker是TFST等几行的数据
        this.TFST01 = ['-', '-', '-'];
        this.TFST02 = ['-', '-', '-'];
        this.TFST03 = ['-', '-', '-'];
        this.TFST04 = ['-', '-', '-'];
        // 用来存第二个表ACN、FCW、CCN三行的数据
        this.TFST1 = [
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */]('-', '-', '-', '-'),
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */]('-', '-', '-', '-'),
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */]('-', '-', '-', '-')
        ];
        this.TFST2 = this.TFST1;
        this.TFST3 = this.TFST1;
        this.TFST4 = this.TFST1;
        // 用来存第三个表stocker是TFST等几行的数据
        this.TFST01S = ['-', '-', '-'];
        this.TFST02S = ['-', '-', '-'];
        this.TFST03S = ['-', '-', '-'];
        this.TFST04S = ['-', '-', '-'];
        // 用来存第三个表ACN、FCW、CCN三行的数据
        this.TFST1S = [
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */]('-', '-', '-', '-'),
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */]('-', '-', '-', '-'),
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */]('-', '-', '-', '-')
        ];
        this.TFST2S = this.TFST1;
        this.TFST3S = this.TFST1;
        this.TFST4S = this.TFST1;
        // 最后一个表的stocker是TFST等几行的数据
        this.SUM1 = ['-', '-', '-', '-'];
        this.SUM2 = ['-', '-', '-', '-'];
        this.SUM3 = ['-', '-', '-', '-'];
        this.SUM4 = ['-', '-', '-', '-'];
        // 最后一个表的ACN、FCW、CCN三行的数据
        this.lastT01 = [
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */]('-', '-', '-', '-'),
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */]('-', '-', '-', '-'),
            new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */]('-', '-', '-', '-')
        ];
        this.lastT02 = this.lastT01;
        this.lastT03 = this.lastT01;
        this.lastT04 = this.lastT01;
        this.finalArray = []; // 用来存处理去重后的数组元素，可以直接传进getCstInfoArray方法中
        this.finalEmptyArray = [];
        //下面 是用来  保存  Empty key In 信息的变量
        this.ACNRemark = '';
        this.FCWRemark = '';
        this.CCNRemark = '';
        this.remarks = [this.ACNRemark, this.FCWRemark, this.CCNRemark];
    }
    CstglsComponent.prototype.ngOnInit = function () {
        var _this = this;
        //建立websocket 连接
        this.socket = new WebSocket("ws://localhost:8080/api/cstinfo");
        this.socket.onmessage = function (event) {
            //1.获取到 传递过来的数据
            var datas = event.data;
            //2.将数据 转成JSON的格式，方便获取值来使用
            var datasJson = JSON.parse(datas);
            console.log(datasJson);
            //3.下面的就是赋值的操作了，直接调用 原来的方法即可
            _this.getCstInfoArray(datasJson.cstinfo);
            _this.getAlarm();
            _this.getCstInfoEmptyArray(datasJson.cstinfoempty);
            _this.getCstStockerEInfoArray(datasJson.cststockereqpinfo);
            _this.getCstStockerInfoArray(datasJson.cststockerinfo);
            _this.getCstInfo4VOArray(datasJson.cstinfo4vo);
        };
        this.apiService.getAll('/sc/cstinfo').subscribe(function (res) {
            _this.getCstInfoArray(res);
            _this.getAlarm();
        });
        this.apiService.getAll('/sc/cstinfoempty').subscribe(function (res) {
            _this.getCstInfoEmptyArray(res);
        });
        this.apiService.getAll('/sc/cststockereqpinfo').subscribe(function (res) {
            _this.getCstStockerEInfoArray(res);
        });
        this.apiService.getAll('/sc/cststockerinfo').subscribe(function (res) {
            _this.getCstStockerInfoArray(res);
        });
        this.apiService.getAll('/sc/cstinfo4vo').subscribe(function (res) {
            _this.getCstInfo4VOArray(res);
        });
        // 查询 remark 的内容
        this.queryRemark();
        this.firstView = true;
    };
    // 判断单元格值的和是否超过域值。
    CstglsComponent.prototype.getAlarm = function () {
        this.edACNArraySort = false;
        this.pedACNCell = false;
        this.edFCWCFScfStft = false;
        this.dumFCWCFScfStft = false;
        this.peddFCWCell = false;
        this.peddCCNArraySort = false;
        this.edCCNPIOther = false;
        this.dumCCNPIOther = false;
        if ((this.getReverseChange(this.ACNArrayTFT[2]) + this.getReverseChange(this.ACNSortTFT[2])) > this.alarmArray[0]) {
            this.edACNArraySort = true;
        }
        if ((this.getReverseChange(this.ACNCellTFT[1]) + this.getReverseChange(this.ACNCellTFT[2])) > this.alarmArray[1]) {
            this.pedACNCell = true;
        }
        if ((this.getReverseChange(this.FCWCFCF[2]) + this.getReverseChange(this.FCWSortCF[2]) +
            this.getReverseChange(this.FCWSortTFT[2])) > this.alarmArray[2]) {
            this.edFCWCFScfStft = true;
        }
        if ((this.getReverseChange(this.FCWCFCF[3]) + this.getReverseChange(this.FCWSortCF[3]) +
            this.getReverseChange(this.FCWSortTFT[3])) > this.alarmArray[3]) {
            this.dumFCWCFScfStft = true;
        }
        if ((this.getReverseChange(this.FCWCellTFT[1]) + this.getReverseChange(this.FCWCellTFT[2]) +
            this.getReverseChange(this.FCWCellTFT[3]) + this.getReverseChange(this.FCWCellCF[1]) +
            this.getReverseChange(this.FCWCellCF[2]) + this.getReverseChange(this.FCWCellCF[3])) > this.alarmArray[4]) {
            this.peddFCWCell = true;
        }
        if ((this.getReverseChange(this.CCNArray[1]) + this.getReverseChange(this.CCNArray[2]) +
            this.getReverseChange(this.CCNArray[3]) + this.getReverseChange(this.CCNSort[1]) +
            this.getReverseChange(this.CCNSort[2]) + this.getReverseChange(this.CCNSort[3])) > this.alarmArray[5]) {
            this.peddCCNArraySort = true;
        }
        if ((this.getReverseChange(this.CCNPIRW[2]) + this.getReverseChange(this.CCNOther[2])) > this.alarmArray[6]) {
            this.edCCNPIOther = true;
        }
        if ((this.getReverseChange(this.CCNPIRW[3]) + this.getReverseChange(this.CCNOther[3])) > this.alarmArray[7]) {
            this.dumCCNPIOther = true;
        }
    };
    // 数组赋值
    CstglsComponent.prototype.getCstInfoArray = function (data) {
        this.ArrayFirst = [];
        this.ACNArrayTFT = [];
        this.ACNSortTFT = [];
        this.ACNCellTFT = [];
        this.FCWCFCF = [];
        this.FCWSortCF = [];
        this.FCWSortTFT = [];
        this.FCWCellTFT = [];
        this.FCWCellCF = [];
        this.CCNArray = [];
        this.CCNSort = [];
        this.CCNPIRW = [];
        this.CCNOther = [];
        this.MCWCell = [];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (obj.cst_spec === 'ACN') {
                if (obj.factory === 'Array') {
                    this.ACNArrayTFT.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
                if (obj.factory === 'Sort') {
                    this.ACNSortTFT.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
                if (obj.factory === 'Cell') {
                    this.ACNCellTFT.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
            }
            if (obj.cst_spec === 'FCW') {
                if (obj.factory === 'CF') {
                    this.FCWCFCF.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
                if (obj.factory === 'Sort') {
                    if (obj.type === 'CF') {
                        this.FCWSortCF.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                    }
                    if (obj.type === 'TFT') {
                        this.FCWSortTFT.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                    }
                }
                if (obj.factory === 'Cell') {
                    if (obj.type === 'CF') {
                        this.FCWCellCF.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                    }
                    if (obj.type === 'TFT') {
                        this.FCWCellTFT.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                    }
                }
            }
            if (obj.cst_spec === 'CCN') {
                if (obj.factory === 'Array') {
                    this.CCNArray.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
                if (obj.factory === 'Sort') {
                    this.CCNSort.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
                if (obj.factory === 'PI/RW') {
                    this.CCNPIRW.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
                if (obj.factory === 'Other') {
                    this.CCNOther.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
                }
            }
            if (obj.cst_spec === 'MCW') {
                this.MCWCell.push(obj.full_ratio, obj.pro, obj.eng + obj.dev, obj.dum);
            }
        }
        this.ArrayFirst.push(this.ACNArrayTFT, this.ACNSortTFT, this.ACNCellTFT, this.FCWCFCF, this.FCWSortCF, this.FCWSortTFT, this.FCWCellTFT, this.FCWCellCF, this.CCNArray, this.CCNSort, this.CCNPIRW, this.CCNOther, this.MCWCell);
        // 遍历数组，如果ArrayFirst中的数组元素有为空的就赋默认值“-”
        for (var _a = 0, _b = this.ArrayFirst; _a < _b.length; _a++) {
            var array = _b[_a];
            if (array.length === 0) {
                array.push('-', '-', '-', '-');
            }
        }
        this.getChange(this.ACNArrayTFT);
        this.getChange(this.ACNSortTFT);
        this.getChange(this.ACNCellTFT);
        this.getChange(this.FCWCFCF);
        this.getChange(this.FCWSortCF);
        this.getChange(this.FCWSortTFT);
        this.getChange(this.FCWCellTFT);
        this.getChange(this.FCWCellCF);
        this.getChange(this.CCNArray);
        this.getChange(this.CCNSort);
        this.getChange(this.CCNPIRW);
        this.getChange(this.CCNOther);
        this.getChange(this.MCWCell);
    };
    // 遍历数组，如果数组中有元素为'0'，则替换为'-'
    CstglsComponent.prototype.getChange = function (array) {
        for (var i in array) {
            if (array[i] == '0') {
                array[i] = '-';
            }
        }
    };
    CstglsComponent.prototype.getReverseChange = function (item) {
        if (item == '-') {
            return 0;
        }
        else {
            return parseInt(item, 10);
        }
    };
    // 遍历对象数组，如果数组中有对象的属性为'0'，则替换为'-'
    CstglsComponent.prototype.getChangeObj = function (array) {
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var obj = array_1[_i];
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (obj[key] == '0') {
                        obj[key] = '-';
                    }
                }
            }
        }
    };
    // Empty部分数组赋值
    CstglsComponent.prototype.getCstInfoEmptyArray = function (data) {
        this.ArraySecond = [];
        this.ACNEMPTY = [];
        this.FCWEMPTY = [];
        this.CCNEMPTY = [];
        this.MCWEMPTY = [];
        for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
            var obj = data_2[_i];
            if (obj.cst_spec === 'ACN') {
                this.ACNEMPTY.push(obj.ttl, obj.oneqp, obj.move, obj.instk, obj.dirty, obj.outstk, obj.others);
            }
            if (obj.cst_spec === 'FCW') {
                this.FCWEMPTY.push(obj.ttl, obj.oneqp, obj.move, obj.instk, obj.dirty, obj.outstk, obj.others);
            }
            if (obj.cst_spec === 'CCN') {
                this.CCNEMPTY.push(obj.ttl, obj.oneqp, obj.move, obj.instk, obj.dirty, obj.outstk, obj.others);
            }
            if (obj.cst_spec === 'MCW') {
                this.MCWEMPTY.push(obj.ttl, obj.oneqp, obj.move, obj.instk, obj.dirty, obj.outstk, obj.others);
            }
        }
        this.ArraySecond.push(this.ACNEMPTY, this.FCWEMPTY, this.CCNEMPTY, this.MCWEMPTY);
        for (var _a = 0, _b = this.ArraySecond; _a < _b.length; _a++) {
            var array = _b[_a];
            if (array.length === 0) {
                array.push('-', '-', '-', '-', '-', '-', '-');
            }
        }
        this.getChange(this.ACNEMPTY);
        this.getChange(this.FCWEMPTY);
        this.getChange(this.CCNEMPTY);
        this.getChange(this.MCWEMPTY);
    };
    // 获取第二个表的数组数据
    CstglsComponent.prototype.getCstStockerEInfoArray = function (data) {
        this.TFST01 = [];
        this.TFST02 = [];
        this.TFST03 = [];
        this.TFST04 = [];
        this.TFST1 = [];
        this.TFST2 = [];
        this.TFST3 = [];
        this.TFST4 = [];
        for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
            var obj = data_3[_i];
            if (obj.stocker === 'TFST01') {
                if (obj.cst_spec === 'TFST01') {
                    this.TFST01.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST1.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST1.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST1.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
            if (obj.stocker === 'TFST02') {
                if (obj.cst_spec === 'TFST02') {
                    this.TFST02.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST2.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST2.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST2.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
            if (obj.stocker === 'TFST03') {
                if (obj.cst_spec === 'TFST03') {
                    this.TFST03.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST3.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST3.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST3.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
            if (obj.stocker === 'TFST04') {
                if (obj.cst_spec === 'TFST04') {
                    this.TFST04.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST4.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST4.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST4.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
        }
        if (parseInt(this.TFST01[2], 10) >= 90) {
            this.tfst01 = true;
        }
        if (parseInt(this.TFST02[2], 10) >= 90) {
            this.tfst02 = true;
        }
        if (parseInt(this.TFST03[2], 10) >= 90) {
            this.tfst03 = true;
        }
        if (parseInt(this.TFST04[2], 10) >= 90) {
            this.tfst04 = true;
        }
        this.getChange(this.TFST01);
        this.getChange(this.TFST02);
        this.getChange(this.TFST03);
        this.getChange(this.TFST04);
        this.getChangeObj(this.TFST1);
        this.getChangeObj(this.TFST2);
        this.getChangeObj(this.TFST3);
        this.getChangeObj(this.TFST4);
    };
    // 获取第三个表的数组数据
    CstglsComponent.prototype.getCstStockerInfoArray = function (data) {
        this.TFST01S = [];
        this.TFST02S = [];
        this.TFST03S = [];
        this.TFST04S = [];
        this.TFST1S = [];
        this.TFST2S = [];
        this.TFST3S = [];
        this.TFST4S = [];
        for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
            var obj = data_4[_i];
            if (obj.stocker === 'TFST01') {
                if (obj.cst_spec === 'TFST01') {
                    this.TFST01S.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST1S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST1S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST1S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
            if (obj.stocker === 'TFST02') {
                if (obj.cst_spec === 'TFST02') {
                    this.TFST02S.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST2S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST2S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST2S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
            if (obj.stocker === 'TFST03') {
                if (obj.cst_spec === 'TFST03') {
                    this.TFST03S.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST3S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST3S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST3S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
            if (obj.stocker === 'TFST04') {
                if (obj.cst_spec === 'TFST04') {
                    this.TFST04S.push(obj.maxqty, obj.currentqty, obj.full_ratio);
                }
                if (obj.cst_spec === 'ACN') {
                    this.TFST4S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'FCW') {
                    this.TFST4S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
                if (obj.cst_spec === 'CCN') {
                    this.TFST4S.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["d" /* CstStockerInfo */](obj.cst_spec, obj.maxqty, obj.currentqty, obj.full_ratio));
                }
            }
        }
        if (parseInt(this.TFST01S[2], 10) >= 90) {
            this.tfst01s = true;
        }
        if (parseInt(this.TFST02S[2], 10) >= 90) {
            this.tfst02s = true;
        }
        if (parseInt(this.TFST03S[2], 10) >= 90) {
            this.tfst03s = true;
        }
        if (parseInt(this.TFST04S[2], 10) >= 90) {
            this.tfst04s = true;
        }
        this.getChange(this.TFST01S);
        this.getChange(this.TFST02S);
        this.getChange(this.TFST03S);
        this.getChange(this.TFST04S);
        this.getChangeObj(this.TFST1S);
        this.getChangeObj(this.TFST2S);
        this.getChangeObj(this.TFST3S);
        this.getChangeObj(this.TFST4S);
    };
    // 获取第四个表的数组数据
    CstglsComponent.prototype.getCstInfo4VOArray = function (data) {
        this.SUM1 = [];
        this.SUM2 = [];
        this.SUM3 = [];
        this.SUM4 = [];
        this.lastT01 = [];
        this.lastT02 = [];
        this.lastT03 = [];
        this.lastT04 = [];
        for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
            var obj = data_5[_i];
            if (obj.stocker === 'TFST01') {
                if (obj.cst_spec === 'TFST01') {
                    this.SUM1.push(obj.production, obj.engdev, obj.dummy, obj.empty);
                }
                if (obj.cst_spec === 'ACN') {
                    this.lastT01.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'FCW') {
                    this.lastT01.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'CCN') {
                    this.lastT01.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
            }
            if (obj.stocker === 'TFST02') {
                if (obj.cst_spec === 'TFST02') {
                    this.SUM2.push(obj.production, obj.engdev, obj.dummy, obj.empty);
                }
                if (obj.cst_spec === 'ACN') {
                    this.lastT02.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'FCW') {
                    this.lastT02.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'CCN') {
                    this.lastT02.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
            }
            if (obj.stocker === 'TFST03') {
                if (obj.cst_spec === 'TFST03') {
                    this.SUM3.push(obj.production, obj.engdev, obj.dummy, obj.empty);
                }
                if (obj.cst_spec === 'ACN') {
                    this.lastT03.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'FCW') {
                    this.lastT03.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'CCN') {
                    this.lastT03.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
            }
            if (obj.stocker === 'TFST04') {
                if (obj.cst_spec === 'TFST04') {
                    this.SUM4.push(obj.production, obj.engdev, obj.dummy, obj.empty);
                }
                if (obj.cst_spec === 'ACN') {
                    this.lastT04.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'FCW') {
                    this.lastT04.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
                if (obj.cst_spec === 'CCN') {
                    this.lastT04.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["a" /* CstInfo4VO */](obj.production, obj.engdev, obj.dummy, obj.empty));
                }
            }
        }
        this.getChange(this.SUM1);
        this.getChange(this.SUM2);
        this.getChange(this.SUM3);
        this.getChange(this.SUM4);
        this.getChangeObj(this.lastT01);
        this.getChangeObj(this.lastT02);
        this.getChangeObj(this.lastT03);
        this.getChangeObj(this.lastT04);
    };
    // 点击查询按钮调用的方法
    CstglsComponent.prototype.queryData = function () {
        var _this = this;
        if (this.dateStart != null && this.dateEnd != null) {
            this.predateStart = -1;
            this.predateEnd = -1;
            var option = {
                params: {
                    start: this.dateStart,
                    end: this.dateEnd
                }
            };
            this.apiService.get('/sc/querycstinfo', option).subscribe(function (res) {
                _this.getReduce(res); // 把数组处理成元素cst_spec、factory、type属性没有重复的数组，如果有重复求和，ratio求平均
                _this.getCstInfoArray(_this.finalArray);
                _this.getAlarm();
            });
            this.apiService.get('/sc/queryempty', option).subscribe(function (res) {
                _this.getReduceEmpty(res);
                _this.getCstInfoEmptyArray(_this.finalEmptyArray);
            });
            // 查询 remark 的内容
            this.queryRemark();
            // 方法执行结束后，记录查询时间，以便下钻时调用
            this.predateStart = this.dateStart;
            this.predateEnd = this.dateEnd;
        }
    };
    // 把数组处理成元素cst_spec、factory、type属性没有重复的数组，如果有重复求和，ratio求平均
    CstglsComponent.prototype.getReduce = function (data) {
        this.finalArray = [];
        var tempArray = [];
        // 去掉数组中cst_spec、factory、type属性一样的元素
        for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
            var obj = data_6[_i];
            var flag = true;
            if (tempArray.length !== 0) {
                for (var _a = 0, tempArray_1 = tempArray; _a < tempArray_1.length; _a++) {
                    var obj1 = tempArray_1[_a];
                    if (obj.cst_spec === obj1.cst_spec && obj.factory === obj1.factory && obj.type === obj1.type) {
                        flag = false;
                    }
                }
                if (flag) {
                    tempArray.push(obj);
                }
            }
            else {
                tempArray.push(obj);
            }
        }
        for (var _b = 0, tempArray_2 = tempArray; _b < tempArray_2.length; _b++) {
            var obj = tempArray_2[_b];
            var full_ratioArray = [];
            var proArray = [];
            var engArray = [];
            var devArray = [];
            var dumArray = [];
            for (var _c = 0, data_7 = data; _c < data_7.length; _c++) {
                var obj1 = data_7[_c];
                if (obj1.cst_spec === obj.cst_spec && obj1.factory === obj.factory && obj1.type === obj.type) {
                    full_ratioArray.push(obj1.full_ratio);
                    proArray.push(obj1.pro);
                    engArray.push(obj1.eng);
                    devArray.push(obj1.dev);
                    dumArray.push(obj1.dum);
                }
            }
            var sumFullRatio = 0;
            var avgFullRatio = 0;
            var avgFullRatioStr = '';
            var sumPro = 0;
            var sumEng = 0;
            var sumDev = 0;
            var sumDum = 0;
            // 数组求平均、数组求和
            sumFullRatio = this.getArraySum(full_ratioArray);
            avgFullRatio = parseFloat((sumFullRatio / full_ratioArray.length).toFixed(1));
            avgFullRatioStr = avgFullRatio + '%';
            sumPro = this.getArraySum(proArray);
            sumEng = this.getArraySum(engArray);
            sumDev = this.getArraySum(devArray);
            sumDum = this.getArraySum(dumArray);
            this.finalArray.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["b" /* CstInfoRes */](obj.cst_spec, obj.factory, obj.type, avgFullRatioStr, sumPro, sumEng, sumDev, sumDum));
        }
    };
    CstglsComponent.prototype.getReduceEmpty = function (data) {
        this.finalEmptyArray = [];
        var tempArray = [];
        for (var _i = 0, data_8 = data; _i < data_8.length; _i++) {
            var obj = data_8[_i];
            if (tempArray.length === 0) {
                tempArray.push(obj.cst_spec);
            }
            else {
                if (tempArray.indexOf(obj.cst_spec) < 0) {
                    tempArray.push(obj.cst_spec);
                }
            }
        }
        for (var _a = 0, tempArray_3 = tempArray; _a < tempArray_3.length; _a++) {
            var cstSpec = tempArray_3[_a];
            var ttlArray = [];
            var oneqpArray = [];
            var moveArray = [];
            var instkArray = [];
            var dirtyArray = [];
            var outstkArray = [];
            var othersArray = [];
            for (var _b = 0, data_9 = data; _b < data_9.length; _b++) {
                var obj = data_9[_b];
                if (obj.cst_spec === cstSpec) {
                    ttlArray.push(obj.ttl);
                    oneqpArray.push(obj.oneqp);
                    moveArray.push(obj.move);
                    instkArray.push(obj.instk);
                    dirtyArray.push(obj.dirty);
                    outstkArray.push(obj.outstk);
                    othersArray.push(obj.others);
                }
            }
            var sumTtl = this.getArraySum(ttlArray);
            var sumOneqp = this.getArraySum(oneqpArray);
            var sumMove = this.getArraySum(moveArray);
            var sumInstk = this.getArraySum(instkArray);
            var sumDirty = this.getArraySum(dirtyArray);
            var sumOutstk = this.getArraySum(outstkArray);
            var sumOthers = this.getArraySum(othersArray);
            this.finalEmptyArray.push(new __WEBPACK_IMPORTED_MODULE_1__model_cst_stocker_info__["c" /* CstInfoResEmpty */](cstSpec, sumTtl, sumOneqp, sumMove, sumInstk, sumDirty, sumOutstk, sumOthers));
        }
    };
    // number类型数组所有元素求和
    CstglsComponent.prototype.getArraySum = function (array) {
        var sum = 0;
        for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {
            var item = array_2[_i];
            sum += item;
        }
        return sum;
    };
    // 下钻左边三列的点击方法
    CstglsComponent.prototype.toSecondTable = function (event, cst_specS, factoryS, typeS, indexS) {
        var _this = this;
        if (event.target.innerHTML !== '-' && indexS !== 0) {
            this.SecondTableArray = [];
            var productiontypeArray = [];
            if (indexS === 1) {
                productiontypeArray = ['Production'];
            }
            else if (indexS === 2) {
                productiontypeArray = ['Engineer', 'Develop'];
            }
            else if (indexS === 3) {
                productiontypeArray = ['Dummy'];
            }
            if (this.predateStart === -1 && this.predateEnd === -1) {
                var option = {
                    params: {
                        cst_spec: cst_specS,
                        factory: factoryS,
                        type: typeS,
                        productiontypes: productiontypeArray
                    }
                };
                this.apiService.get('/sc/cstinfosecond', option).subscribe(function (res) {
                    _this.SecondTableArray = res;
                });
            }
            else {
                var option = {
                    params: {
                        cst_spec: cst_specS,
                        factory: factoryS,
                        type: typeS,
                        productiontypes: productiontypeArray,
                        start: this.predateStart,
                        end: this.predateEnd
                    }
                };
                this.apiService.get('/sc/cstinfosecondQ', option).subscribe(function (res) {
                    _this.SecondTableArray = res;
                });
            }
            this.firstView = false;
            this.secondView = true;
        }
    };
    // 下钻右边五列的方法，根据*ngFor的索引判断点击的是否是Dirty，并根据实际点击的列传不同的参数
    CstglsComponent.prototype.toSecondTableEmpty = function (event, cst_specE, indexE) {
        var _this = this;
        if (event.target.innerHTML !== '-' && indexE !== 0 && indexE !== 6) {
            this.SecondTableArray = [];
            if (this.predateStart === -1 && this.predateEnd === -1) {
                if (indexE === 4) {
                    var option = {
                        params: {
                            cst_spec: cst_specE
                        }
                    };
                    this.apiService.get('/sc/cstemptydirty', option).subscribe(function (res) {
                        _this.SecondTableArray = res;
                    });
                }
                else {
                    var transferstateE = '';
                    if (indexE === 1) {
                        transferstateE = 'ONEQP';
                    }
                    else if (indexE === 2) {
                        transferstateE = 'MOVING';
                    }
                    else if (indexE === 3) {
                        transferstateE = 'INSTK';
                    }
                    else if (indexE === 5) {
                        transferstateE = 'OUTSTK';
                    }
                    var option = {
                        params: {
                            cst_spec: cst_specE,
                            transferstate: transferstateE
                        }
                    };
                    this.apiService.get('/sc/cstemptyclean', option).subscribe(function (res) {
                        _this.SecondTableArray = res;
                    });
                }
            }
            else {
                if (indexE === 4) {
                    var option = {
                        params: {
                            cst_spec: cst_specE,
                            start: this.predateStart,
                            end: this.predateEnd
                        }
                    };
                    this.apiService.get('/sc/cstemptydirtyQ', option).subscribe(function (res) {
                        _this.SecondTableArray = res;
                    });
                }
                else {
                    var transferstateE = '';
                    if (indexE === 1) {
                        transferstateE = 'ONEQP';
                    }
                    else if (indexE === 2) {
                        transferstateE = 'MOVING';
                    }
                    else if (indexE === 3) {
                        transferstateE = 'INSTK';
                    }
                    else if (indexE === 5) {
                        transferstateE = 'OUTSTK';
                    }
                    var option = {
                        params: {
                            cst_spec: cst_specE,
                            transferstate: transferstateE,
                            start: this.predateStart,
                            end: this.predateEnd
                        }
                    };
                    this.apiService.get('/sc/cstemptycleanQ', option).subscribe(function (res) {
                        _this.SecondTableArray = res;
                    });
                }
            }
            this.firstView = false;
            this.secondView = true;
        }
    };
    CstglsComponent.prototype.showFirstTable = function () {
        this.firstView = true;
        this.secondView = false;
    };
    CstglsComponent.prototype.refresh = function () {
        this.predateStart = -1;
        this.predateEnd = -1;
        this.dateStart = null;
        this.dateEnd = null;
        this.ngOnInit();
    };
    //1.下面是 写remark 的地方
    CstglsComponent.prototype.updateRemark = function (item, id) {
        var datenamestr = this.getTimeStr(new Date());
        this.remarks = [this.ACNRemark, this.FCWRemark, this.CCNRemark];
        var remarkstr = this.remarks[id];
        var option = {
            params: {
                datename: datenamestr,
                report: 'CST info',
                item: item,
                remark: remarkstr
            }
        };
        var url = '/keyinremartk';
        this.apiService.get(url, option).subscribe(function (res) {
            //这里面其实什么都不用写
        }, function (error) { console.log(error); });
    };
    //2.下面是一个处理日期类型的字符串的操作
    CstglsComponent.prototype.getTimeStr = function (date) {
        var datenamestr = '';
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        datenamestr = year + '/' + month + '/' + day;
        return datenamestr;
    };
    //3. 下面是一个从数据库中读取值得操作
    CstglsComponent.prototype.queryRemark = function () {
        var _this = this;
        var datenamestr = this.getTimeStr(new Date());
        var option = {
            params: {
                datename: datenamestr,
                report: 'CST info',
            }
        };
        var url = '/queryRemark';
        this.apiService.get(url, option).subscribe(function (res) {
            if (Array.isArray(res)) {
                for (var _i = 0, res_1 = res; _i < res_1.length; _i++) {
                    var object = res_1[_i];
                    var item = object['item'];
                    var remark = object['remark'];
                    switch (item) {
                        case 'ACN': {
                            _this.ACNRemark = remark;
                            break;
                        }
                        case 'FCW': {
                            _this.FCWRemark = remark;
                            break;
                        }
                        case 'CCN': {
                            _this.CCNRemark = remark;
                            break;
                        }
                    }
                }
            }
        }, function (error) { console.log(error); });
    };
    CstglsComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-cstgls',
            template: __webpack_require__("./src/app/toumingdisplan/cstgls/cstgls.component.html"),
            styles: [__webpack_require__("./src/app/toumingdisplan/cstgls/cstgls.component.css")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_service_api_api_service__["a" /* ApiService */]])
    ], CstglsComponent);
    return CstglsComponent;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/cstgls/model/cst_stocker_info.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return CstStockerInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CstInfo4VO; });
/* unused harmony export CstInfo */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CstInfoRes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CstInfoResEmpty; });
/* unused harmony export CstInfoSecond */
var CstStockerInfo = /** @class */ (function () {
    function CstStockerInfo(cst_spec, maxqty, currentqty, full_ratio) {
        this.cst_spec = cst_spec;
        this.maxqty = maxqty;
        this.currentqty = currentqty;
        this.full_ratio = full_ratio;
    }
    return CstStockerInfo;
}());

var CstInfo4VO = /** @class */ (function () {
    function CstInfo4VO(production, engdev, dummy, empty) {
        this.production = production;
        this.engdev = engdev;
        this.dummy = dummy;
        this.empty = empty;
    }
    return CstInfo4VO;
}());

var CstInfo = /** @class */ (function () {
    function CstInfo(cst_spec, factory, type, full_ratio, pro, eng, dev, dum) {
        this.cst_spec = cst_spec;
        this.factory = factory;
        this.type = type;
        this.full_ratio = full_ratio;
        this.pro = pro;
        this.eng = eng;
        this.dev = dev;
        this.dum = dum;
    }
    return CstInfo;
}());

var CstInfoRes = /** @class */ (function () {
    function CstInfoRes(cst_spec, factory, type, full_ratio, pro, eng, dev, dum) {
        this.cst_spec = cst_spec;
        this.factory = factory;
        this.type = type;
        this.full_ratio = full_ratio;
        this.pro = pro;
        this.eng = eng;
        this.dev = dev;
        this.dum = dum;
    }
    return CstInfoRes;
}());

var CstInfoResEmpty = /** @class */ (function () {
    function CstInfoResEmpty(cst_spec, ttl, oneqp, move, instk, dirty, outstk, others) {
        this.cst_spec = cst_spec;
        this.ttl = ttl;
        this.oneqp = oneqp;
        this.move = move;
        this.instk = instk;
        this.dirty = dirty;
        this.outstk = outstk;
        this.others = others;
    }
    return CstInfoResEmpty;
}());

var CstInfoSecond = /** @class */ (function () {
    function CstInfoSecond(cst_id, days, operation, eqp, lot_id, product, qty, holdstate, lot_comment, lot_time, cst_comment, cst_time) {
        this.cst_id = cst_id;
        this.days = days;
        this.operation = operation;
        this.eqp = eqp;
        this.lot_id = lot_id;
        this.product = product;
        this.qty = qty;
        this.holdstate = holdstate;
        this.lot_comment = lot_comment;
        this.lot_time = lot_time;
        this.cst_comment = cst_comment;
        this.cst_time = cst_time;
    }
    return CstInfoSecond;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/cstpnl/cstpnl.component.css":
/***/ (function(module, exports) {

module.exports = "input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {\r\n    -webkit-appearance: none !important;\r\n}\r\n\r\nth {\r\n    font-weight: inherit !important;\r\n    padding: 0.2em 0em !important;\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n    background-color: rgba(0, 0, 0, 0.1) !important;\r\n    color: #F2F6FA !important;\r\n}\r\n\r\n.header1 {\r\n    color: whitesmoke !important;\r\n    font-weight: bold !important;\r\n}\r\n\r\n.header2 {\r\n    background-color: #20506F !important;\r\n}\r\n\r\n.header {\r\n  font-weight: bold !important;\r\n  padding: 0.625em 0.2em !important;\r\n}\r\n\r\n.clickable:hover {\r\n    background-color: #314879 !important;\r\n    cursor: pointer !important;\r\n}\r\n\r\ntd {\r\n  font-weight: inherit !important;\r\n  padding: 0.625em 0.2em !important;\r\n  font-size: 12px !important;\r\n  border: 1px solid #455e9c !important;\r\n  background-color: rgba(0,0,0,0.1)!important;\r\n  color: #F2F6FA !important;\r\n  text-align: center !important;\r\n}"

/***/ }),

/***/ "./src/app/toumingdisplan/cstpnl/cstpnl.component.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"firstView\">\n  <div style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat;\n    background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <div class=\"ui-g-12\">\n      <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n    </div>\n    <div class=\"ui-g-12\">\n      <div class=\"ui-g-7\" style=\"color:#F2F6FA; margin-left: 7%;font-size: 1.2em;font-weight: bold;margin-top: -15px\">CstPnl 信息管理\n      </div>\n      <div class=\"ui-float-label ui-g-1\" style=\"margin-top:20px;margin-left: -30px\">\n        <input id=\"float-input-start\" type=\"number\" [(ngModel)]=\"dateStart\" pInputText style=\"color:#F2F6FA;text-align: center;width: 80px\">\n        <label for=\"float-input-start\" style=\"color:#F2F6FA;\">&nbsp;&nbsp;开始天数</label>\n      </div>\n      <div class=\"ui-float-label ui-g-1\" style=\"margin-top:20px ;margin-left:-10px\">\n        <input id=\"float-input-end\" type=\"number\" [(ngModel)]=\"dateEnd\" pInputText style=\"color:#F2F6FA;text-align: center;width: 80px\">\n        <label for=\"float-input-end\" style=\"color:#F2F6FA;\">&nbsp;&nbsp;结束天数</label>\n      </div>\n      <p-button class=\"ui-g-1\" label=\"查询\" (click)=\"queryData()\" style=\"padding:20px 0px 0px 0px;\"></p-button>\n      <p-button label=\"刷新\" (click)=\"refresh()\" style=\"padding-top:20px;margin-left: -40px\"></p-button>\n    </div>\n  </div>\n  <div class=\"ui-g\" style=\"padding:0 3%;height:100%;background-image: url('assets/bg3_02.png');\n    background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <!-- First Table -->\n    <div class=\"ui-g-12\">\n      <p-table>\n        <ng-template pTemplate=\"header\">\n          <!-- 第一行 -->\n          <tr>\n            <th rowspan=\"4\" class=\"header1\">卡夹类型</th>\n            <th rowspan=\"4\" class=\"header1\">卡夹属性</th>\n            <th rowspan=\"4\" class=\"header1\">总数</th>\n            <th colspan=\"7\" class=\"header1\">Production</th>\n            <th rowspan=\"4\" class=\"header1\" width=\"15px\"></th>\n            <th rowspan=\"4\" class=\"header1\">Engineer</th>\n            <th rowspan=\"4\" class=\"header1\">Develop</th>\n            <th colspan=\"7\" class=\"header1\">Empty</th>\n            <th rowspan=\"4\" class=\"header1\">Others</th>\n          </tr>\n          <!-- 第二行 -->\n          <tr>\n            <th colspan=\"5\" class=\"header1\">CST Qty</th>\n            <th colspan=\"2\" class=\"header1\">Full Ratio</th>\n            <th rowspan=\"3\" class=\"header1\">TTL</th>\n            <th rowspan=\"3\" class=\"header1\">ONEQP</th>\n            <th rowspan=\"3\" class=\"header1\">MOVING</th>\n            <th rowspan=\"3\" class=\"header1\">INSTK</th>\n            <th rowspan=\"3\" class=\"header1\">Dirty</th>\n            <th rowspan=\"3\" class=\"header1\">Empty</th>\n            <th rowspan=\"3\" class=\"header1\">OutStk</th>\n          </tr>\n          <!-- 第三行 -->\n          <tr>\n            <th colspan=\"3\" class=\"header1\">CT</th>\n            <th colspan=\"2\" class=\"header1\">Bank MDLRcv</th>\n            <th rowspan=\"2\" class=\"header1\">CT</th>\n            <th rowspan=\"2\" class=\"header1\">Bank</th>\n          </tr>\n          <!-- 第四行 -->\n          <tr>\n            <th class=\"header1\">Inline</th>\n            <th class=\"header1\">Scrap</th>\n            <th class=\"header1\">Packing</th>\n            <th class=\"header1\">N</th>\n            <th class=\"header1\">Y</th>\n          </tr>\n          <!-- 第五行 -->\n          <tr>\n            <th rowspan=\"7\" class=\"header2\">PCL</th>\n            <th>A-3</th>\n            <th *ngFor=\"let qty of PclA3Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','A-3',i)\">{{qty\n              | zeroConvert: i}}\n            </th>\n            <th rowspan=\"7\" class=\"header2\"></th>\n            <th *ngFor=\"let qty of PclA3Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','A-3',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第六行 -->\n          <tr>\n            <th>A-4</th>\n            <th *ngFor=\"let qty of PclA4Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','A-4',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PclA4Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','A-4',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第七行 -->\n          <tr>\n            <th>A-5</th>\n            <th *ngFor=\"let qty of PclA5Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','A-5',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PclA5Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','A-5',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第八行 -->\n          <tr>\n            <th>A-6</th>\n            <th *ngFor=\"let qty of PclA6Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','A-6',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PclA6Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','A-6',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第九行 -->\n          <tr>\n            <th>空</th>\n            <th *ngFor=\"let qty of PclEmptyLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','空',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PclEmptyRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','空',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十行 -->\n          <tr>\n            <th>虚拟</th>\n            <th *ngFor=\"let qty of PclVirtualLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','虚拟',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PclVirtualRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','虚拟',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十一行 -->\n          <tr>\n            <th>TTL</th>\n            <th *ngFor=\"let qty of PclTtlLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCL','TTL',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PclTtlRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCL','TTL',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十二行 空 -->\n          <tr>\n            <th colspan=\"21\">&nbsp;</th>\n          </tr>\n          <!-- 第十三行 -->\n          <tr>\n            <th rowspan=\"7\" class=\"header2\">PCS</th>\n            <th>B-1</th>\n            <th *ngFor=\"let qty of PcsB1Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','B-1',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th rowspan=\"7\" class=\"header2\"></th>\n            <th *ngFor=\"let qty of PcsB1Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','B-1',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十四行 -->\n          <tr>\n            <th>B-2</th>\n            <th *ngFor=\"let qty of PcsB2Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','B-2',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PcsB2Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','B-2',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十五行 -->\n          <tr>\n            <th>B-3</th>\n            <th *ngFor=\"let qty of PcsB3Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','B-3',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PcsB3Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','B-3',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十六行 -->\n          <tr>\n            <th>B-4</th>\n            <th *ngFor=\"let qty of PcsB4Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','B-4',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PcsB4Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','B-4',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十七行 -->\n          <tr>\n            <th>B-5</th>\n            <th *ngFor=\"let qty of PcsB5Left;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','B-5',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PcsB5Right;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','B-5',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十八行 -->\n          <tr>\n            <th>虚拟</th>\n            <th *ngFor=\"let qty of PcsVirtualLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','虚拟',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PcsVirtualRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','虚拟',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第十九行 -->\n          <tr>\n            <th>TTL</th>\n            <th *ngFor=\"let qty of PcsTtlLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCS','TTL',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PcsTtlRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCS','TTL',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第二十行 空 -->\n          <tr>\n            <th colspan=\"21\">&nbsp;</th>\n          </tr>\n          <!-- 第二十一行 -->\n          <tr>\n            <th rowspan=\"3\" class=\"header2\">PCC</th>\n            <th>实卡</th>\n            <th *ngFor=\"let qty of PccRealLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCC','实卡',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th rowspan=\"3\" class=\"header2\"></th>\n            <th *ngFor=\"let qty of PccRealRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCC','实卡',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第二十二行 -->\n          <tr>\n            <th>虚拟</th>\n            <th *ngFor=\"let qty of PccVirtualLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCC','虚拟',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PccVirtualRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCC','虚拟',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第二十三行 -->\n          <tr>\n            <th>TTL</th>\n            <th *ngFor=\"let qty of PccTtlLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCC','TTL',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PccTtlRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCC','TTL',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第二十四行 空 -->\n          <tr>\n            <th colspan=\"21\">&nbsp;</th>\n          </tr>\n          <!-- 第二十五行 -->\n          <tr>\n            <th rowspan=\"3\" class=\"header2\">PCE</th>\n            <th>实卡</th>\n            <th *ngFor=\"let qty of PceRealLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCE','实卡',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th rowspan=\"3\" class=\"header2\"></th>\n            <th *ngFor=\"let qty of PceRealRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCE','实卡',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第二十六行 -->\n          <tr>\n            <th>虚拟</th>\n            <th *ngFor=\"let qty of PceVirtualLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCE','虚拟',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PceVirtualRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCE','虚拟',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n          <!-- 第二十七行 -->\n          <tr>\n            <th>TTL</th>\n            <th *ngFor=\"let qty of PceTtlLeft;let i = index;\" [ngClass]=\"{clickable:(i > 0 && i &lt; 6)}\" (click)=\"toSecondTable($event,'PCE','TTL',i)\">{{qty\n              | zeroConvert:i}}\n            </th>\n            <th *ngFor=\"let qty of PceTtlRight;let i = index\" [ngClass]=\"{clickable:(i !== 2 && i !== 9)}\" (click)=\"toSecondTableRight($event,'PCE','TTL',i)\">{{qty\n              | zeroConvert}}\n            </th>\n          </tr>\n        </ng-template>\n      </p-table>\n    </div>\n  </div>\n  <div style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\"></div>\n</div>\n<!-- 下钻的二级表 -->\n<div *ngIf=\"secondView\">\n  <div class=\"ui-g\" style=\"padding:20px;height:100%;background-image: url('assets/picture/6.png');background-repeat:no-repeat;\n  background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <div class=\"ui-g-12\">\n      <p-button label=\"return\" icon=\"fa fa-home\" style=\"float: right;\" (click)=\"showFirstTable()\"></p-button>\n    </div>\n    <div class=\"ui-g-12\">\n      <p-table [resizableColumns]=\"true\" columnResizeMode=\"expand\">\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th class=\"header\" pResizableColumn width=\"6%\">CST_ID</th>\n            <th class=\"header\" pResizableColumn width=\"3%\">Day</th>\n            <th class=\"header\" pResizableColumn width=\"5%\">Oper</th>\n            <th class=\"header\" pResizableColumn width=\"5%\">EQP ID</th>\n            <th class=\"header\" pResizableColumn width=\"10%\">LOT ID</th>\n            <th class=\"header\" pResizableColumn width=\"10%\">Lot ProSpec</th>\n            <th class=\"header\" pResizableColumn width=\"5%\">Pro Qty</th>\n            <th class=\"header\" pResizableColumn width=\"3%\">Lot Hold State</th>\n            <th class=\"header\" pResizableColumn width=\"14%\">Lot Last Event Comment</th>\n            <th class=\"header\" pResizableColumn width=\"11%\">Lot Last Event Time</th>\n            <th class=\"header\" pResizableColumn>Last Comment</th>\n            <th class=\"header\" pResizableColumn width=\"11%\">Last Event Time</th>\n          </tr>\n          <tr *ngFor=\"let obj of SecondTableArray\">\n            <td>{{obj.cst_id}}</td>\n            <td>{{obj.days}}</td>\n            <td>{{obj.oper}}</td>\n            <td>{{obj.machinename}}</td>\n            <td>{{obj.lotid}}</td>\n            <td>{{obj.productspec}}</td>\n            <td>{{obj.producquantity}}</td>\n            <td>{{obj.lotholdstate}}</td>\n            <td>{{obj.lotlasteventcomment}}</td>\n            <td>{{obj.lotlasteventtime}}</td>\n            <td>{{obj.lastcomment}}</td>\n            <td>{{obj.lasteventtime}}</td>\n          </tr>\n        </ng-template>\n\n      </p-table>\n    </div>\n  </div>\n</div>\n<!-- 下钻的二级表区域结束 -->"

/***/ }),

/***/ "./src/app/toumingdisplan/cstpnl/cstpnl.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CstpnlComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var CstpnlComponent = /** @class */ (function () {
    function CstpnlComponent(apiService) {
        this.apiService = apiService;
        // 声明两个变量用来存上一次执行queryData方法的开始时间和结束时间
        this.predateStart = -1;
        this.predateEnd = -1;
        this.SecondTableArray = [];
    }
    CstpnlComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.firstView = true;
        this.PclA3Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA3Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA4Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA4Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA5Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA5Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA6Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA6Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclEmptyLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclEmptyRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB1Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB1Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB2Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB2Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB3Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB3Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB4Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB4Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB5Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB5Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccRealLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccRealRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceRealLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceRealRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.apiService.getAll('/sc/cstinfopanel').subscribe(function (res) {
            _this.setArray(res);
        });
    };
    // 数组赋值
    CstpnlComponent.prototype.setArray = function (data) {
        this.PclA3Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA3Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA4Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA4Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA5Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA5Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA6Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclA6Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclEmptyLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclEmptyRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PclTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB1Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB1Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB2Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB2Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB3Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB3Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB4Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB4Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB5Left = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsB5Right = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PcsTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccRealLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccRealRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PccTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceRealLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceRealRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceVirtualLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceVirtualRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceTtlLeft = ['-', '-', '-', '-', '-', '-', '-', '-'];
        this.PceTtlRight = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (obj.durablespecname === '8PCL') {
                if (obj.cstspec === 'A-3') {
                    this.PclA3Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PclA3Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'A-4') {
                    this.PclA4Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PclA4Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'A-5') {
                    this.PclA5Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PclA5Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'A-6') {
                    this.PclA6Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PclA6Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === '空') {
                    this.PclEmptyLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing,
                        obj.bank_n, obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PclEmptyRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === '虚拟') {
                    this.PclVirtualLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PclVirtualRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty, obj.empty,
                        obj.outstk, obj.others];
                }
            }
            else if (obj.durablespecname === '8PCS') {
                if (obj.cstspec === 'B-1') {
                    this.PcsB1Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PcsB1Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'B-2') {
                    this.PcsB2Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PcsB2Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'B-3') {
                    this.PcsB3Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PcsB3Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'B-4') {
                    this.PcsB4Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PcsB4Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === 'B-5') {
                    this.PcsB5Left = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PcsB5Right = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === '虚拟') {
                    this.PcsVirtualLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PcsVirtualRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
            }
            else if (obj.durablespecname === '8PCC') {
                if (obj.cstspec === '实卡') {
                    this.PccRealLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PccRealRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === '虚拟') {
                    this.PccVirtualLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PccVirtualRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
            }
            else if (obj.durablespecname === '8PCE') {
                if (obj.cstspec === '实卡') {
                    this.PceRealLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PceRealRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk, obj.dirty,
                        obj.empty, obj.outstk, obj.others];
                }
                else if (obj.cstspec === '虚拟') {
                    this.PceVirtualLeft = [obj.cstqty, obj.ct_inline, obj.ct_scrap, obj.ct_packing, obj.bank_n,
                        obj.bank_y, obj.ct_ratio, obj.bank_ratio];
                    this.PceVirtualRight = [obj.engi, obj.dev, obj.ttl, obj.oneqp, obj.moving, obj.instk,
                        obj.dirty, obj.empty, obj.outstk, obj.others];
                }
            }
        }
        this.getTtl(data);
    };
    // 求ttl
    CstpnlComponent.prototype.getTtl = function (data) {
        var sumPclcstqty = 0;
        var sumPclinline = 0;
        var sumPclscrap = 0;
        var sumPclpacking = 0;
        var sumPcln = 0;
        var sumPcly = 0;
        var sumPclct = 0;
        var sumPclbank = 0;
        var countPclct = 0;
        var countPclbank = 0;
        var sumPcleng = 0;
        var sumPcldev = 0;
        var sumPclttl = 0;
        var sumPcloneqp = 0;
        var sumPclmoving = 0;
        var sumPclinstk = 0;
        var sumPcldirty = 0;
        var sumPclempty = 0;
        var sumPcloutstk = 0;
        var sumPclothers = 0;
        var sumPcscstqty = 0;
        var sumPcsinline = 0;
        var sumPcsscrap = 0;
        var sumPcspacking = 0;
        var sumPcsn = 0;
        var sumPcsy = 0;
        var sumPcsct = 0;
        var sumPcsbank = 0;
        var countPcsct = 0;
        var countPcsbank = 0;
        var sumPcseng = 0;
        var sumPcsdev = 0;
        var sumPcsttl = 0;
        var sumPcsoneqp = 0;
        var sumPcsmoving = 0;
        var sumPcsinstk = 0;
        var sumPcsdirty = 0;
        var sumPcsempty = 0;
        var sumPcsoutstk = 0;
        var sumPcsothers = 0;
        var sumPcccstqty = 0;
        var sumPccinline = 0;
        var sumPccscrap = 0;
        var sumPccpacking = 0;
        var sumPccn = 0;
        var sumPccy = 0;
        var sumPccct = 0;
        var sumPccbank = 0;
        var countPccct = 0;
        var countPccbank = 0;
        var sumPcceng = 0;
        var sumPccdev = 0;
        var sumPccttl = 0;
        var sumPcconeqp = 0;
        var sumPccmoving = 0;
        var sumPccinstk = 0;
        var sumPccdirty = 0;
        var sumPccempty = 0;
        var sumPccoutstk = 0;
        var sumPccothers = 0;
        var sumPcecstqty = 0;
        var sumPceinline = 0;
        var sumPcescrap = 0;
        var sumPcepacking = 0;
        var sumPcen = 0;
        var sumPcey = 0;
        var sumPcect = 0;
        var sumPcebank = 0;
        var countPcect = 0;
        var countPcebank = 0;
        var sumPceeng = 0;
        var sumPcedev = 0;
        var sumPcettl = 0;
        var sumPceoneqp = 0;
        var sumPcemoving = 0;
        var sumPceinstk = 0;
        var sumPcedirty = 0;
        var sumPceempty = 0;
        var sumPceoutstk = 0;
        var sumPceothers = 0;
        for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
            var obj = data_2[_i];
            if (obj.durablespecname === '8PCL') {
                sumPclcstqty += obj.cstqty;
                sumPclinline += obj.ct_inline;
                sumPclscrap += obj.ct_scrap;
                sumPclpacking += obj.ct_packing;
                sumPcln += obj.bank_n;
                sumPcly += obj.bank_y;
                sumPcleng += obj.engi;
                sumPcldev += obj.dev;
                sumPclttl += obj.ttl;
                sumPcloneqp += obj.oneqp;
                sumPclmoving += obj.moving;
                sumPclinstk += obj.instk;
                sumPcldirty += obj.dirty;
                sumPclempty += obj.empty;
                sumPcloutstk += obj.outstk;
                sumPclothers += obj.others;
                if (obj.ct_ratio !== -1) {
                    sumPclct += obj.ct_ratio;
                    countPclct++;
                }
                if (obj.bank_ratio !== -1) {
                    sumPclbank += obj.bank_ratio;
                    countPclbank++;
                }
            }
            else if (obj.durablespecname === '8PCS') {
                sumPcscstqty += obj.cstqty;
                sumPcsinline += obj.ct_inline;
                sumPcsscrap += obj.ct_scrap;
                sumPcspacking += obj.ct_packing;
                sumPcsn += obj.bank_n;
                sumPcsy += obj.bank_y;
                sumPcseng += obj.engi;
                sumPcsdev += obj.dev;
                sumPcsttl += obj.ttl;
                sumPcsoneqp += obj.oneqp;
                sumPcsmoving += obj.moving;
                sumPcsinstk += obj.instk;
                sumPcsdirty += obj.dirty;
                sumPcsempty += obj.empty;
                sumPcsoutstk += obj.outstk;
                sumPcsothers += obj.others;
                if (obj.ct_ratio !== -1) {
                    sumPcsct += obj.ct_ratio;
                    countPcsct++;
                }
                if (obj.bank_ratio !== -1) {
                    sumPcsbank += obj.bank_ratio;
                    countPcsbank++;
                }
            }
            else if (obj.durablespecname === '8PCC') {
                sumPcccstqty += obj.cstqty;
                sumPccinline += obj.ct_inline;
                sumPccscrap += obj.ct_scrap;
                sumPccpacking += obj.ct_packing;
                sumPccn += obj.bank_n;
                sumPccy += obj.bank_y;
                sumPcceng += obj.engi;
                sumPccdev += obj.dev;
                sumPccttl += obj.ttl;
                sumPcconeqp += obj.oneqp;
                sumPccmoving += obj.moving;
                sumPccinstk += obj.instk;
                sumPccdirty += obj.dirty;
                sumPccempty += obj.empty;
                sumPccoutstk += obj.outstk;
                sumPccothers += obj.others;
                if (obj.ct_ratio !== -1) {
                    sumPccct += obj.ct_ratio;
                    countPccct++;
                }
                if (obj.bank_ratio !== -1) {
                    sumPccbank += obj.bank_ratio;
                    countPccbank++;
                }
            }
            else if (obj.durablespecname === '8PCE') {
                sumPcecstqty += obj.cstqty;
                sumPceinline += obj.ct_inline;
                sumPcescrap += obj.ct_scrap;
                sumPcepacking += obj.ct_packing;
                sumPcen += obj.bank_n;
                sumPcey += obj.bank_y;
                sumPceeng += obj.engi;
                sumPcedev += obj.dev;
                sumPcettl += obj.ttl;
                sumPceoneqp += obj.oneqp;
                sumPcemoving += obj.moving;
                sumPceinstk += obj.instk;
                sumPcedirty += obj.dirty;
                sumPceempty += obj.empty;
                sumPceoutstk += obj.outstk;
                sumPceothers += obj.others;
                if (obj.ct_ratio !== -1) {
                    sumPcect += obj.ct_ratio;
                    countPcect++;
                }
                if (obj.bank_ratio !== -1) {
                    sumPcebank += obj.bank_ratio;
                    countPcebank++;
                }
            }
        }
        this.PclTtlLeft = [sumPclcstqty, sumPclinline, sumPclscrap, sumPclpacking, sumPcln, sumPcly,
            sumPclct / countPclct, sumPclbank / countPclbank];
        this.PclTtlRight = [sumPcleng, sumPcldev, sumPclttl, sumPcloneqp, sumPclmoving,
            sumPclinstk, sumPcldirty, sumPclempty, sumPcloutstk, sumPclothers];
        this.PcsTtlLeft = [sumPcscstqty, sumPcsinline, sumPcsscrap, sumPcspacking, sumPcsn, sumPcsy,
            sumPcsct / countPcsct, sumPcsbank / countPcsbank];
        this.PcsTtlRight = [sumPcseng, sumPcsdev, sumPcsttl, sumPcsoneqp, sumPcsmoving,
            sumPcsinstk, sumPcsdirty, sumPcsempty, sumPcsoutstk, sumPcsothers];
        this.PccTtlLeft = [sumPcccstqty, sumPccinline, sumPccscrap, sumPccpacking, sumPccn, sumPccy,
            sumPccct / countPccct, sumPccbank / countPccbank];
        this.PccTtlRight = [sumPcceng, sumPccdev, sumPccttl, sumPcconeqp, sumPccmoving,
            sumPccinstk, sumPccdirty, sumPccempty, sumPccoutstk, sumPccothers];
        this.PceTtlLeft = [sumPcecstqty, sumPceinline, sumPcescrap, sumPcepacking, sumPcen, sumPcey,
            sumPcect / countPcect, sumPcebank / countPcebank];
        this.PceTtlRight = [sumPceeng, sumPcedev, sumPcettl, sumPceoneqp, sumPcemoving,
            sumPceinstk, sumPcedirty, sumPceempty, sumPceoutstk, sumPceothers];
    };
    // 点击查询时调用方法
    CstpnlComponent.prototype.queryData = function () {
        var _this = this;
        if (this.dateStart != null && this.dateEnd != null) {
            this.predateStart = -1;
            this.predateEnd = -1;
            var option = {
                params: {
                    start: this.dateStart,
                    end: this.dateEnd
                }
            };
            this.apiService.get('/sc/cstinfopanelQ', option).subscribe(function (res) {
                var redcuceRes = _this.getReduce(res);
                _this.setArray(redcuceRes);
            });
            // 方法执行结束后，记录查询时间，以便下钻时调用
            this.predateStart = this.dateStart;
            this.predateEnd = this.dateEnd;
        }
    };
    // 去重，把durablespecname， cstspec两个属性都相同的对象，其余属性求和，比率求平均
    CstpnlComponent.prototype.getReduce = function (data) {
        var result = [];
        var cstspecPcls = [];
        var cstspecPcss = [];
        var cstspecPccs = [];
        var cstspecPces = [];
        for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
            var obj = data_3[_i];
            if (obj.durablespecname === '8PCL' && !(cstspecPcls.includes(obj.cstspec))) {
                cstspecPcls.push(obj.cstspec);
            }
            else if (obj.durablespecname === '8PCS' && !(cstspecPcss.includes(obj.cstspec))) {
                cstspecPcss.push(obj.cstspec);
            }
            else if (obj.durablespecname === '8PCC' && !(cstspecPccs.includes(obj.cstspec))) {
                cstspecPccs.push(obj.cstspec);
            }
            else if (obj.durablespecname === '8PCE' && !(cstspecPces.includes(obj.cstspec))) {
                cstspecPces.push(obj.cstspec);
            }
        }
        for (var _a = 0, cstspecPcls_1 = cstspecPcls; _a < cstspecPcls_1.length; _a++) {
            var cstspecPcl = cstspecPcls_1[_a];
            var countCt = 0;
            var countBank = 0;
            var sumCstqty = 0;
            var sumCt_inline = 0;
            var sumCt_scrap = 0;
            var sumCt_packing = 0;
            var sumBank_n = 0;
            var sumBank_y = 0;
            var sumCt_ratio = 0;
            var sumBank_ratio = 0;
            var sumEngi = 0;
            var sumDev = 0;
            var sumTtl = 0;
            var sumDirty = 0;
            var sumOneqp = 0;
            var sumMoving = 0;
            var sumInstk = 0;
            var sumOutstk = 0;
            var sumEmpty = 0;
            var sumOthers = 0;
            var avgCt_ratio = 0;
            var avgBank_ratio = 0;
            for (var _b = 0, data_4 = data; _b < data_4.length; _b++) {
                var obj = data_4[_b];
                if (obj.durablespecname === '8PCL' && obj.cstspec === cstspecPcl) {
                    if (obj.ct_ratio !== -1) {
                        countCt++;
                        sumCt_ratio += obj.ct_ratio;
                    }
                    if (obj.bank_ratio !== -1) {
                        countBank++;
                        sumBank_ratio += obj.bank_ratio;
                    }
                    sumCstqty += obj.cstqty;
                    sumCt_inline += obj.ct_inline;
                    sumCt_scrap += obj.ct_scrap;
                    sumCt_packing += obj.ct_packing;
                    sumBank_n += obj.bank_n;
                    sumBank_y += obj.bank_y;
                    sumEngi += obj.engi;
                    sumDev += obj.dev;
                    sumTtl += obj.ttl;
                    sumDirty += obj.dirty;
                    sumOneqp += obj.oneqp;
                    sumMoving += obj.moving;
                    sumInstk += obj.instk;
                    sumOutstk += obj.outstk;
                    sumEmpty += obj.empty;
                    sumOthers += obj.others;
                }
            }
            if (countCt === 0) {
                avgCt_ratio = -1;
            }
            else {
                avgCt_ratio = sumCt_ratio / countCt;
            }
            if (countBank === 0) {
                avgBank_ratio = -1;
            }
            else {
                avgBank_ratio = sumBank_ratio / countBank;
            }
            result.push({
                durablespecname: '8PCL', cstspec: cstspecPcl, cstqty: sumCstqty, ct_inline: sumCt_inline,
                ct_scrap: sumCt_scrap, ct_packing: sumCt_packing, bank_n: sumBank_n, bank_y: sumBank_y,
                ct_ratio: avgCt_ratio, bank_ratio: avgBank_ratio, engi: sumEngi, dev: sumDev,
                ttl: sumTtl, dirty: sumDirty, oneqp: sumOneqp, moving: sumMoving, instk: sumInstk, outstk: sumOutstk,
                empty: sumEmpty, others: sumOthers
            });
        }
        for (var _c = 0, cstspecPcss_1 = cstspecPcss; _c < cstspecPcss_1.length; _c++) {
            var cstspecPcs = cstspecPcss_1[_c];
            var countCt = 0;
            var countBank = 0;
            var sumCstqty = 0;
            var sumCt_inline = 0;
            var sumCt_scrap = 0;
            var sumCt_packing = 0;
            var sumBank_n = 0;
            var sumBank_y = 0;
            var sumCt_ratio = 0;
            var sumBank_ratio = 0;
            var sumEngi = 0;
            var sumDev = 0;
            var sumTtl = 0;
            var sumDirty = 0;
            var sumOneqp = 0;
            var sumMoving = 0;
            var sumInstk = 0;
            var sumOutstk = 0;
            var sumEmpty = 0;
            var sumOthers = 0;
            var avgCt_ratio = 0;
            var avgBank_ratio = 0;
            for (var _d = 0, data_5 = data; _d < data_5.length; _d++) {
                var obj = data_5[_d];
                if (obj.durablespecname === '8PCS' && obj.cstspec === cstspecPcs) {
                    if (obj.ct_ratio !== -1) {
                        countCt++;
                        sumCt_ratio += obj.ct_ratio;
                    }
                    if (obj.bank_ratio !== -1) {
                        countBank++;
                        sumBank_ratio += obj.bank_ratio;
                    }
                    sumCstqty += obj.cstqty;
                    sumCt_inline += obj.ct_inline;
                    sumCt_scrap += obj.ct_scrap;
                    sumCt_packing += obj.ct_packing;
                    sumBank_n += obj.bank_n;
                    sumBank_y += obj.bank_y;
                    sumEngi += obj.engi;
                    sumDev += obj.dev;
                    sumTtl += obj.ttl;
                    sumDirty += obj.dirty;
                    sumOneqp += obj.oneqp;
                    sumMoving += obj.moving;
                    sumInstk += obj.instk;
                    sumOutstk += obj.outstk;
                    sumEmpty += obj.empty;
                    sumOthers += obj.others;
                }
            }
            if (countCt === 0) {
                avgCt_ratio = -1;
            }
            else {
                avgCt_ratio = sumCt_ratio / countCt;
            }
            if (countBank === 0) {
                avgBank_ratio = -1;
            }
            else {
                avgBank_ratio = sumBank_ratio / countBank;
            }
            result.push({
                durablespecname: '8PCS', cstspec: cstspecPcs, cstqty: sumCstqty, ct_inline: sumCt_inline,
                ct_scrap: sumCt_scrap, ct_packing: sumCt_packing, bank_n: sumBank_n, bank_y: sumBank_y,
                ct_ratio: avgCt_ratio, bank_ratio: avgBank_ratio, engi: sumEngi, dev: sumDev,
                ttl: sumTtl, dirty: sumDirty, oneqp: sumOneqp, moving: sumMoving, instk: sumInstk, outstk: sumOutstk,
                empty: sumEmpty, others: sumOthers
            });
        }
        for (var _e = 0, cstspecPccs_1 = cstspecPccs; _e < cstspecPccs_1.length; _e++) {
            var cstspecPcc = cstspecPccs_1[_e];
            var countCt = 0;
            var countBank = 0;
            var sumCstqty = 0;
            var sumCt_inline = 0;
            var sumCt_scrap = 0;
            var sumCt_packing = 0;
            var sumBank_n = 0;
            var sumBank_y = 0;
            var sumCt_ratio = 0;
            var sumBank_ratio = 0;
            var sumEngi = 0;
            var sumDev = 0;
            var sumTtl = 0;
            var sumDirty = 0;
            var sumOneqp = 0;
            var sumMoving = 0;
            var sumInstk = 0;
            var sumOutstk = 0;
            var sumEmpty = 0;
            var sumOthers = 0;
            var avgCt_ratio = 0;
            var avgBank_ratio = 0;
            for (var _f = 0, data_6 = data; _f < data_6.length; _f++) {
                var obj = data_6[_f];
                if (obj.durablespecname === '8PCC' && obj.cstspec === cstspecPcc) {
                    if (obj.ct_ratio !== -1) {
                        countCt++;
                        sumCt_ratio += obj.ct_ratio;
                    }
                    if (obj.bank_ratio !== -1) {
                        countBank++;
                        sumBank_ratio += obj.bank_ratio;
                    }
                    sumCstqty += obj.cstqty;
                    sumCt_inline += obj.ct_inline;
                    sumCt_scrap += obj.ct_scrap;
                    sumCt_packing += obj.ct_packing;
                    sumBank_n += obj.bank_n;
                    sumBank_y += obj.bank_y;
                    sumEngi += obj.engi;
                    sumDev += obj.dev;
                    sumTtl += obj.ttl;
                    sumDirty += obj.dirty;
                    sumOneqp += obj.oneqp;
                    sumMoving += obj.moving;
                    sumInstk += obj.instk;
                    sumOutstk += obj.outstk;
                    sumEmpty += obj.empty;
                    sumOthers += obj.others;
                }
            }
            if (countCt === 0) {
                avgCt_ratio = -1;
            }
            else {
                avgCt_ratio = sumCt_ratio / countCt;
            }
            if (countBank === 0) {
                avgBank_ratio = -1;
            }
            else {
                avgBank_ratio = sumBank_ratio / countBank;
            }
            result.push({
                durablespecname: '8PCC', cstspec: cstspecPcc, cstqty: sumCstqty, ct_inline: sumCt_inline,
                ct_scrap: sumCt_scrap, ct_packing: sumCt_packing, bank_n: sumBank_n, bank_y: sumBank_y,
                ct_ratio: avgCt_ratio, bank_ratio: avgBank_ratio, engi: sumEngi, dev: sumDev,
                ttl: sumTtl, dirty: sumDirty, oneqp: sumOneqp, moving: sumMoving, instk: sumInstk, outstk: sumOutstk,
                empty: sumEmpty, others: sumOthers
            });
        }
        for (var _g = 0, cstspecPces_1 = cstspecPces; _g < cstspecPces_1.length; _g++) {
            var cstspecPce = cstspecPces_1[_g];
            var countCt = 0;
            var countBank = 0;
            var sumCstqty = 0;
            var sumCt_inline = 0;
            var sumCt_scrap = 0;
            var sumCt_packing = 0;
            var sumBank_n = 0;
            var sumBank_y = 0;
            var sumCt_ratio = 0;
            var sumBank_ratio = 0;
            var sumEngi = 0;
            var sumDev = 0;
            var sumTtl = 0;
            var sumDirty = 0;
            var sumOneqp = 0;
            var sumMoving = 0;
            var sumInstk = 0;
            var sumOutstk = 0;
            var sumEmpty = 0;
            var sumOthers = 0;
            var avgCt_ratio = 0;
            var avgBank_ratio = 0;
            for (var _h = 0, data_7 = data; _h < data_7.length; _h++) {
                var obj = data_7[_h];
                if (obj.durablespecname === '8PCE' && obj.cstspec === cstspecPce) {
                    if (obj.ct_ratio !== -1) {
                        countCt++;
                        sumCt_ratio += obj.ct_ratio;
                    }
                    if (obj.bank_ratio !== -1) {
                        countBank++;
                        sumBank_ratio += obj.bank_ratio;
                    }
                    sumCstqty += obj.cstqty;
                    sumCt_inline += obj.ct_inline;
                    sumCt_scrap += obj.ct_scrap;
                    sumCt_packing += obj.ct_packing;
                    sumBank_n += obj.bank_n;
                    sumBank_y += obj.bank_y;
                    sumEngi += obj.engi;
                    sumDev += obj.dev;
                    sumTtl += obj.ttl;
                    sumDirty += obj.dirty;
                    sumOneqp += obj.oneqp;
                    sumMoving += obj.moving;
                    sumInstk += obj.instk;
                    sumOutstk += obj.outstk;
                    sumEmpty += obj.empty;
                    sumOthers += obj.others;
                }
            }
            if (countCt === 0) {
                avgCt_ratio = -1;
            }
            else {
                avgCt_ratio = sumCt_ratio / countCt;
            }
            if (countBank === 0) {
                avgBank_ratio = -1;
            }
            else {
                avgBank_ratio = sumBank_ratio / countBank;
            }
            result.push({
                durablespecname: '8PCE', cstspec: cstspecPce, cstqty: sumCstqty, ct_inline: sumCt_inline,
                ct_scrap: sumCt_scrap, ct_packing: sumCt_packing, bank_n: sumBank_n, bank_y: sumBank_y,
                ct_ratio: avgCt_ratio, bank_ratio: avgBank_ratio, engi: sumEngi, dev: sumDev,
                ttl: sumTtl, dirty: sumDirty, oneqp: sumOneqp, moving: sumMoving, instk: sumInstk, outstk: sumOutstk,
                empty: sumEmpty, others: sumOthers
            });
        }
        return result;
    };
    CstpnlComponent.prototype.refresh = function () {
        this.predateStart = -1;
        this.predateEnd = -1;
        this.dateStart = null;
        this.dateEnd = null;
        this.ngOnInit();
    };
    CstpnlComponent.prototype.toSecondTable = function (event, durablespecnameS, cstspecS, indexS) {
        var _this = this;
        if (event.target.innerText.trim() !== '-' && indexS !== 0 && indexS !== 6 && indexS !== 7) {
            this.SecondTableArray = [];
            var typeS = '';
            if (indexS === 1) {
                typeS = 'Inline';
            }
            else if (indexS === 2) {
                typeS = 'Scrap';
            }
            else if (indexS === 3) {
                typeS = 'Packing';
            }
            else if (indexS === 4) {
                typeS = 'N';
            }
            else if (indexS === 5) {
                typeS = 'Y';
            }
            if (this.predateStart === -1 && this.predateEnd === -1) {
                var option = {
                    params: {
                        durablespecname: durablespecnameS,
                        cstspec: cstspecS,
                        type: typeS
                    }
                };
                this.apiService.get('/sc/cstinfopanelT', option).subscribe(function (res) {
                    _this.SecondTableArray = res;
                });
            }
            else {
                var option = {
                    params: {
                        durablespecname: durablespecnameS,
                        cstspec: cstspecS,
                        type: typeS,
                        start: this.predateStart,
                        end: this.predateEnd
                    }
                };
                this.apiService.get('/sc/cstinfopanelQT', option).subscribe(function (res) {
                    _this.SecondTableArray = res;
                });
            }
            this.firstView = false;
            this.secondView = true;
        }
    };
    CstpnlComponent.prototype.toSecondTableRight = function (event, durablespecnameS, cstspecS, indexS) {
        var _this = this;
        if (event.target.innerText.trim() !== '-' && indexS !== 2 && indexS !== 9) {
            this.SecondTableArray = [];
            var typeS = '';
            if (indexS === 0) {
                typeS = 'Engineer';
            }
            else if (indexS === 1) {
                typeS = 'Develop';
            }
            else if (indexS === 3) {
                typeS = 'ONEQP';
            }
            else if (indexS === 4) {
                typeS = 'MOVING';
            }
            else if (indexS === 5) {
                typeS = 'INSTK';
            }
            else if (indexS === 6) {
                typeS = 'Dirty';
            }
            else if (indexS === 7) {
                typeS = '空';
            }
            else if (indexS === 8) {
                typeS = 'OUTSTK';
            }
            if (this.predateStart === -1 && this.predateEnd === -1) {
                var option = {
                    params: {
                        durablespecname: durablespecnameS,
                        cstspec: cstspecS,
                        type: typeS
                    }
                };
                this.apiService.get('/sc/cstinfopanelT', option).subscribe(function (res) {
                    _this.SecondTableArray = res;
                });
            }
            else {
                var option = {
                    params: {
                        durablespecname: durablespecnameS,
                        cstspec: cstspecS,
                        type: typeS,
                        start: this.predateStart,
                        end: this.predateEnd
                    }
                };
                this.apiService.get('/sc/cstinfopanelQT', option).subscribe(function (res) {
                    _this.SecondTableArray = res;
                });
            }
            this.firstView = false;
            this.secondView = true;
        }
    };
    CstpnlComponent.prototype.showFirstTable = function () {
        this.firstView = true;
        this.secondView = false;
    };
    CstpnlComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-cstpnl',
            template: __webpack_require__("./src/app/toumingdisplan/cstpnl/cstpnl.component.html"),
            styles: [__webpack_require__("./src/app/toumingdisplan/cstpnl/cstpnl.component.css")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_service_api_api_service__["a" /* ApiService */]])
    ], CstpnlComponent);
    return CstpnlComponent;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/fabmovement.component.css":
/***/ (function(module, exports) {

module.exports = ".setTableHeader{\r\n    width: 60px !important;\r\n    height: 100px !important;\r\n    padding-left: 0% !important;\r\n    text-align: center !important;\r\n    font-size: 12px !important;\r\n   \r\n}\r\n.touming {\r\n    background-color:rgba(0,0,0,0.1)!important;\r\n    color: #F2F6FA!important;\r\n}\r\n.touming1 {\r\n    background-color:#121e38!important;\r\n    color: #F2F6FA!important;\r\n}\r\nth {\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n    font-weight: initial !important;\r\n    padding: .625em .175em !important;\r\n}\r\n#operation:hover {\r\n    background-color: #314879 !important; \r\n}\r\n.font {\r\n    font-weight: bold!important;\r\n    color: rgb(182, 182, 252)!important;\r\n}\r\n.title {\r\n    font-size:16px!important;\r\n    font-weight: bold!important;\r\n    color: rgb(182, 182, 252)!important;\r\n}\r\n.font2 {\r\n    color: rgb(182, 182, 252)!important;\r\n}\r\ntd {\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n    font-weight: initial !important;\r\n    padding: .625em .175em !important;\r\n    width:2.75%!important;\r\n    text-align:center!important;\r\n}\r\n.noborder {\r\n    border: 0px !important;\r\n}\r\n.setCFOption{\r\n    height: 800px !important;\r\n    padding-left: 2% !important;\r\n   \r\n}\r\n.setCFPH1Option{\r\n    margin-top: -10% !important;\r\n    padding-right: 1% !important;\r\n}\r\n.setCFPH2Option{\r\n    padding-right: 1% !important;\r\n    margin-top: -25% !important;\r\n}\r\n.setCelloption{\r\n    padding-left: 3% !important;\r\n}\r\n.setCellBothption{\r\n    padding-left: 1% !important;\r\n}\r\n.setClSearch{\r\n    position: absolute !important;\r\n    padding-left: 60% !important;\r\n    margin-top: 0% !important;\r\n    color: white !important;\r\n}\r\n#cellwipSearchB{\r\n    margin-left: 95% !important;\r\n    margin-top: -15% !important;\r\n }\r\n#cellwipSearchBtn{\r\n     background-color: rgba(228, 230, 236, 0) !important;\r\n }\r\n.setCurrentCell{\r\n     padding-left: 2% !important;\r\n }\r\n.setCurrentCellBoth{\r\n     padding-left: 2% !important;\r\n     padding-right: 2% !important;\r\n }\r\n "

/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/fabmovement.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-g\">\n\n  <!-- title area -->\n  <div class=\"ui-g-12\"\n       style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n      <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n      <div style=\"width:23%;text-align:center\">\n          <h3 style=\"color: #F2F6FA;margin-top: 30px;\">{{title_yiji}}</h3>\n      </div>\n      <!-- <p style=\"font-size: 8px;position: absolute;top:26%;right:7%;color: #F2F6FA\">{{nowTime | date:\"yyyy-MM-dd\n        HH:mm:ss\"}}</p> -->\n  </div>\n  <!-- end title area -->\n\n  <div class=\"ui-g-12\"\n       style=\"height:100%;background-image: url('assets/bg3_02.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n\n      <!-- button and echarts area -->\n      <div *ngIf=\"movementTableIsShow\">\n          <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n              <button pButton type=\"button\" (click)=\"changeToArrayMove()\" label=\"AR\"></button>\n              <button pButton type=\"button\" (click)=\"changeToCfMove()\" label=\"CF\"></button>\n              <button pButton type=\"button\" (click)=\"changeToClMove()\" label=\"CL\"></button>\n              <button pButton type=\"button\" (click)=\"showCurrentMove()\" label=\"当前\"></button>\n          </div>\n          <div class=\"ui-g-12\">\n              <!-- 普通的 柱状图 array cf cell 的-->\n              <div  *ngIf=\"title_yiji == 'Array MOVEMENT'\" echarts [options]=\"chartOption_array_cf_MOVEMENT\"  [ngStyle]=\"{'height':'650px'}\"(chartClick)=\"onClickChart($event)\" class=\"ui-g-12\"></div>\n              <div  *ngIf=\"title_yiji == 'CF MOVEMENT'\" echarts [options]=\"chartOption_array_cf_MOVEMENT\"  [ngStyle]=\"{'height':'650px'}\" [ngClass]=\"{setCFOption:isCfPH}\"(chartClick)=\"onClickChart($event)\" class=\"ui-g-6\"></div>\n              <div  *ngIf=\"title_yiji == 'Cell MOVEMENT'\" echarts [options]=\"chartOption_array_cf_MOVEMENT\"  [ngStyle]=\"{'height':'650px'}\" [ngClass]=\"{setCelloption:isCellBoth}\"(chartClick)=\"onClickChart($event)\" class=\"ui-g-5\"></div>\n              <div  *ngIf=\"isCfPH\" class=\"ui-g-6\">\n                  <!-- cf 的 ph1 的柱状图-->\n                  <div echarts *ngIf=\"isCfPH\" [options]=\"chart_cf_PH1_move\"  [ngStyle]=\"{'height':'450px'}\" [ngClass]=\"{setCFPH1Option:isCfPH}\" class=\"ui-g-12\"></div>\n                  <!-- cf 的 ph2 的柱状图-->\n                  <div echarts *ngIf=\"isCfPH\" [options]=\"chart_cf_PH2_move\"  [ngStyle]=\"{'height':'550px'}\" [ngClass]=\"{setCFPH2Option:isCfPH}\" class=\"ui-g-12\"></div>\n              </div>\n              <!-- cell 的 第二个柱状图-->\n               <div echarts *ngIf=\"isCellBoth\" [options]=\"chart_cl_both_move\"  [ngStyle]=\"{'height':'650px'}\" [ngClass]=\"{setCellBothption:isCellBoth}\" class=\"ui-g-7\"></div>\n          </div>\n          <!-- 下面是cell move 查询的多选下拉框-->\n          <div *ngIf=\"isCellBoth\" [ngClass]=\"{setClSearch:true}\">\n              <strong>请选择 : &nbsp;&nbsp;</strong>\n              <p-multiSelect [options]=\"LineName\" [(ngModel)]=\"selectedNames\" [panelStyle]=\"{minWidth:'10em'}\"\n                  scrollHeight=\"200px\">\n                  <!-- 上面这个地方是设置被选中的内容-->\n                  <ng-template let-values pTemplate=\"selectedItems\">\n                      <div *ngFor=\"let val of values\" class=\"ui-multiselected-item-token ui-corner-all\">\n                          <span>{{val}}</span>\n                      </div>\n                      <span *ngIf=\"!value || value.length === 0\" class=\"ui-multiselected-empty-token ui-corner-all\">Code</span>\n                  </ng-template>\n                  <!--下面这个地方是现实下拉列表的内容-->\n                  <ng-template let-linename pTemplate=\"item\">\n                      <div style=\"font-size:14px;float:right;margin-top:4px\">{{linename.value}}</div>\n                  </ng-template>\n              </p-multiSelect>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <div  id='cellwipSearchB'>\n                <button id='cellwipSearchBtn' pButton icon='fa fa-search' iconPos='left' label=' ' (click)=\"searchCell()\"></button>\n              </div>\n          </div>\n           <!-- cell move 查询的多选下拉框 end-->\n      </div>\n      <!-- end button and echart area -->\n\n      <!-- data gride of current movement array cf 的current table -->\n      <div *ngIf=\"movementCurrentTableIsShow\" #mytable style=\"margin-bottom: 1%\">\n\n          <!-- button area -->\n          <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n              <button pButton (click)=\"closeTable()\" label=\"返回\"></button>\n          </div>\n          <!-- end button area -->\n\n          <!-- table of current movement -->\n          <div style=\"margin-left: 66px;margin-right: 58px;\">\n              <p-table [columns]=\"data_array_current_cols\" [value]=\"data_array_current\" [frozenColumns]=\"fronzecols\"\n                       [scrollable]=\"true\" selectionMode=\"single\" frozenWidth=\"120px\" scrollHeight=\"421px\"\n                       [(selection)]=\"selectedData\"\n                       dataKey=\"Key\" #chartGride id=\"currentwip\">\n\n                  <ng-template pTemplate=\"colgroup\" let-columns>\n                      <colgroup>\n                          <col *ngFor=\"let col of columns\" style=\"width:120px\">\n                      </colgroup>\n                  </ng-template>\n\n                  <ng-template pTemplate=\"header\" let-columns class=\"noborder\">\n                      <tr>\n                          <th *ngFor=\"let col of columns\" [ngClass]=\"{setTableHeader : true}\" id=\"operation\"\n                              class=\"touming1\"\n                              (click)=\"toThirdTable($event)\">\n                              {{col.header}}\n                          </th>\n                      </tr>\n                  </ng-template>\n\n                  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n                      <tr [pSelectableRow]=\"rowData\">\n                          <td *ngFor=\"let col of columns;\" class=\"touming1\">\n                              {{rowData[col.field]}}\n                          </td>\n                      </tr>\n                  </ng-template>\n\n              </p-table>\n          </div>\n      </div>\n      <!-- data gride of current wip end -->\n\n      <!-- 我一定要用汉语写个注释 ： cell 的move 两个当前的表格 视图是在一个页面上的-->\n     \n      <div class=\"ui-g-12\" *ngIf=\"movementCellIsShow\">\n       <!-- button area -->\n       <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n          <button pButton (click)=\"closeTable()\" label=\"返回\"></button>\n      </div>\n      <!-- end button area -->\n       <div *ngIf=\"movementCurrentTableIsShowcell\" #mytable style=\"margin-bottom: 1%\" class=\"ui-g-12\">\n          <!-- cell 的第一个表格  -->\n          <div  class=\"ui-g-5\" [ngClass] = \"{setCurrentCell:true}\">\n              <p-table [columns]=\"data_array_current_cols_cl\" [value]=\"data_array_current\" \n                       [scrollable]=\"true\" selectionMode=\"single\" scrollHeight=\"417px\"\n                       [(selection)]=\"selectedData\"\n                       dataKey=\"Key\" #chartGride id=\"currentwip\">\n                  <ng-template pTemplate=\"header\" let-columns class=\"noborder\">\n                      <tr>\n                          <th *ngFor=\"let col of columns\" [ngClass]=\"{setTableHeader : true}\"\n                              class=\"touming1\">\n                              {{col.header}}\n                          </th>\n                      </tr>\n                  </ng-template>\n\n                  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n                      <tr [pSelectableRow]=\"rowData\">\n                          <td *ngFor=\"let col of columns;\" class=\"touming1\">\n                              {{rowData[col.field]}}\n                          </td>\n                      </tr>\n                  </ng-template>\n              </p-table>\n          </div>\n           <!-- cell 的第一个表格 end  -->\n             <!-- cell 的第二个表格  -->\n          <div class=\"ui-g-7\" [ngClass] = \"{setCurrentCellBoth:true}\">\n              <p-table [columns]=\"data_array_current_cols_cl_both\" [value]=\"data_array_current_cl_both\" \n                       [scrollable]=\"true\" selectionMode=\"single\" scrollHeight=\"420px\" frozenWidth=\"100px\" [frozenColumns]=\"fronzecols\"\n                       [(selection)]=\"selectedData\"\n                       dataKey=\"Key\" #chartGride id=\"currentwip\">\n\n                       <ng-template pTemplate=\"colgroup\" let-columns>\n                          <colgroup>\n                              <col *ngFor=\"let col of columns\" style=\"width:100px\">\n                          </colgroup>\n                      </ng-template>\n  \n                  <ng-template pTemplate=\"header\" let-columns class=\"noborder\">\n                      <tr>\n                          <th *ngFor=\"let col of columns\" [ngClass]=\"{setTableHeader : true}\"\n                              class=\"touming1\">\n                              {{col.header}}\n                          </th>\n                      </tr>\n                  </ng-template>\n\n                  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n                      <tr [pSelectableRow]=\"rowData\">\n                          <td *ngFor=\"let col of columns;\" class=\"touming1\">\n                              {{rowData[col.field]}}\n                          </td>\n                      </tr>\n                  </ng-template>\n              </p-table>\n          </div>\n          <!-- cell 的第二个表格 end  -->\n       </div>\n      </div>\n      <!-- 我一定要用汉语写个注释 ： cell 的move 两个视图是在一个页面上的end-->\n\n      <!-- data gride area -->\n      <div style=\"margin-left: 5%;margin-right: 5%;\" *ngIf=\"CurrentMoveStationTableIsShow\" #mytable>\n\n          <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n              <button pButton type=\"button\" (click)=\"closeTableSecond()\" label=\"返回\"></button>\n          </div>\n\n          <div class=\"ui-panel-content\">\n              <p-table #chartGride id=\"currentwip\">\n                  <ng-template pTemplate=\"header\">\n                      <tr>\n                          <th [attr.colspan]=\"lengthhead\" class=\"touming title\">{{clickName}}</th>\n                      </tr>\n                      <tr>\n                          <th [attr.rowspan]=\"rowSpan\" class=\"touming font\">{{timestrOnSecondTable }}</th>\n                      </tr>\n                      <tr>\n                          <th class=\"touming font\">设备</th>\n                          <th *ngFor=\"let eqpid of eqp_id\" class=\"touming font2\">{{eqpid}}</th>\n                      </tr>\n                      <tr>\n                          <th [attr.rowspan]=\"modeltypeNumber\" class=\"touming font\">型号</th>\n                      </tr>\n                      <tr *ngFor=\"let modeltypewip of stationWipMessage\">\n                          <!-- {{modeltypewip.glassqtys}} -->\n                          <th class=\"touming font\">{{modeltypewip.modeltype}}</th>\n                          <th *ngFor=\"let wipnumber of modeltypewip.glassqtys\" class=\"touming\">{{wipnumber}}</th>\n                      </tr>\n                  </ng-template>\n              </p-table>\n          </div>\n      </div>\n      <!-- end data gride area -->\n  </div>\n  <div class=\"ui-g-12\" style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\"></div>\n</div>\n"

/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/fabmovement.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FabmovementComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_array_move__ = __webpack_require__("./src/app/toumingdisplan/fabmovement/model/array_move.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__report_ui_service_report_ui_common_service__ = __webpack_require__("./src/app/report-ui/service/report-ui-common.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_service_fullscreen_service__ = __webpack_require__("./src/app/common/service/fullscreen.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_sum_movement__ = __webpack_require__("./src/app/toumingdisplan/fabmovement/model/sum_movement.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_cf_move__ = __webpack_require__("./src/app/toumingdisplan/fabmovement/model/cf_move.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_cell_move__ = __webpack_require__("./src/app/toumingdisplan/fabmovement/model/cell_move.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__outstandingcase_transparent_display_b4_wip_model_array_wip__ = __webpack_require__("./src/app/outstandingcase/transparent-display/b4-wip/model/array_wip.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var FabmovementComponent = /** @class */ (function () {
    /**********下面是定义cell两个视图显示相关的布尔量end****************** */
    function FabmovementComponent(apiService, reportComnService, fullscreen) {
        this.apiService = apiService;
        this.reportComnService = reportComnService;
        this.fullscreen = fullscreen;
        this.title_yiji = 'Array MOVEMENT'; //定义的标题，有大用处的内容
        /***********下面定义一级视图 柱状图 用到的内容******************** */
        this.movementTableIsShow = true; //控制一级柱状图是否显示
        this.movementCurrentTableIsShow = false; //控制current movement 表格的显示 array 和 cf 的
        this.CurrentMoveStationTableIsShow = false; //控制实时的站点信息的 表格显示
        this.LineName = [
            { label: 'PCL', value: 'PCL' },
            { label: 'PCS', value: 'PCS' }
        ];
        this.selectedNames = []; // 用于保存被选中的数据信息
        this.isCfPH = false; // 控制是否存在 cf ph1 ph2  的变量
        this.isCellBoth = false; // 控制 cellmove 的第二个柱状图的显示与否
        this.move_operation = []; //用来保存站点的数组：也就是图表中的X轴的标志
        this.data_date_before_3 = []; //下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_2 = [];
        this.data_date_before_1 = [];
        this.data_date_current = [];
        //下面的这个用来保存上面的数组
        this.dataArray = [this.data_date_before_3, this.data_date_before_2, this.data_date_before_1, this.data_date_current];
        this.legendArray = ['前天move', '昨天move', '今天move', '实时move', 'MOVEMENT', '标准4700'];
        this.legendCF = ['前天move', '昨天move', '今天move', '实时move', 'MOVEMENT', '标准4700'];
        this.legendCell = ['前天move', '昨天move', '今天move', '实时move', 'MOVEMENT', '标准4700'];
        // 下面的是legend的显示
        this.legends = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends = []; //多个x轴的标签
        this.move_operation_PH1 = []; //用来保存站点的数组：也就是图表中的X轴的标志
        this.data_date_before_3_PH1 = []; //下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_2_PH1 = [];
        this.data_date_before_1_PH1 = [];
        this.data_date_current_PH1 = [];
        //下面的这个用来保存上面的数组
        this.dataArray_PH1 = [this.data_date_before_3_PH1, this.data_date_before_2_PH1, this.data_date_before_1_PH1, this.data_date_current_PH1];
        // 下面的是legend的显示
        this.legends_PH1 = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends_PH1 = []; //多个x轴的标签
        this.move_operation_PH2 = []; //用来保存站点的数组：也就是图表中的X轴的标志
        this.data_date_before_3_PH2 = []; //下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_2_PH2 = [];
        this.data_date_before_1_PH2 = [];
        this.data_date_current_PH2 = [];
        //下面的这个用来保存上面的数组
        this.dataArray_PH2 = [this.data_date_before_3_PH2, this.data_date_before_2_PH2, this.data_date_before_1_PH2, this.data_date_current_PH2];
        // 下面的是legend的显示
        this.legends_PH2 = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends_PH2 = []; //多个x轴的标签
        this.move_operation_cell_both = []; //用来保存cell 第二个柱状图的 数据信息的内容站点的数组：也就是图表中的X轴的标志
        this.data_date_before_3_cell_both = []; //下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_2_cell_both = [];
        this.data_date_before_1_cell_both = [];
        this.data_date_current_cell_both = [];
        //下面的这个用来保存上面的数组
        this.dataArray_cell_both = [this.data_date_before_3_cell_both, this.data_date_before_2_cell_both, this.data_date_before_1_cell_both, this.data_date_current_cell_both];
        // 下面的是legend的显示
        this.legends_cell_both = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends_cell_both = []; //多个x轴的标签
        this.datatime = null; //定义一个日期类:这个日期的对象是与一级视图，二级视图通用的
        //这个日期，在每次刷新，切换的时候，都需要重新new一个当前对象
        //其他的时候，不需要重新new，
        this.timestrOnSecondTable = ''; //临时用在二级视图上的时间
        /***********上面定义一级视图 柱状图 用到的内容 end******************** */
        /************下面是定义current movement 数量的内容******************* */
        this.data_key = []; //这个用来保存modeltype:也就是每一个对象的key的值
        this.data_array_current = []; //这个用来保存每一行的对象的数组
        this.data_array_current_cols = [{ field: 'Key', header: '型号' }]; //这个应该是个动态创建的，需要根据实际的情况进行创建
        this.data_array_current_cols_cl = []; // 单独为 cell 的创建一个保存列的名称
        this.data_array_current_cl_both = []; // 保存 cell both 两条产线的表格对象数据的操作
        this.data_array_current_cols_cl_both = []; // 单独为 cell 分line 的创建一个保存列的名称
        /************上面是定义current movement 数量的内容 end******************* */
        this.fronzecols = [
            { field: 'Key', header: '型号' }
        ];
        this.eqp_id = []; //用于保存设备id的数组
        //eqp_state:string[] = [];//用于保存设备状态的数组
        this.modeltype = []; //用于保存型号的数组
        this.stationWipMessage = []; //用于保存一行一行的数据
        this.rowSpan = 2; //这个用来控制表格锁占的行的数量
        this.modeltypeNumber = 0; //这个用来获取型号的数量
        this.objArray = [];
        /***********上面是定义站点信息的内容end******************************* */
        /**********下面是定义cell两个视图显示相关的布尔量****************** */
        this.movementCellIsShow = false; // cell 控制current两个表格的显示 
        this.movementTableIsShowcell = false; // 控制表格显示的操作 ，和上面的是一个意思
        this.movementCurrentTableIsShowcell = false; // 控制cell当前 数据的表格是否显示的
    }
    FabmovementComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.movementTableIsShow = true; //初始化就显示柱状图
        this.datatime = new Date(); //初始化时间
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        //1.这里是从后台数据库里面读取出来的数据:整体上面的数据
        var url_array_move_home = '/array/move';
        this.apiService.getAll(url_array_move_home).subscribe(function (res) {
            _this.getData(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            console.log('柱状图接收到的数组长度是 ： ' + _this.data_date_current.length);
            _this.createLegend();
            _this.set_MOVE_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.move_operation, _this.title_yiji, 90, datatimestr, 135, 35);
        }, function (error) {
            console.log('myerror ' + error);
        });
    };
    //这个是点击柱状图的响应事件:需要向后太传递一个参数
    //点击柱状图的时候，获取数据并且保存下来
    FabmovementComponent.prototype.onClickChart = function (event) {
        var _this = this;
        if (this.title_yiji != 'Cell MOVEMENT') {
            this.isCfPH = false;
            this.isCellBoth = false;
            this.movementTableIsShow = false;
            this.CurrentMoveStationTableIsShow = false;
            var datatime = this.datatime; //与一级的柱状图使用同一个时间操作
            var hourtimekeystr = this.getTimeSameToEchart(datatime);
            this.timestrOnSecondTable = hourtimekeystr.substr(4, 6); //暂时传进到表里面的东西
            this.clickName = event.name; //获取到事件的名称
            console.log(this.clickName);
            //1.创建要传递的参数
            var option = {
                params: {
                    operationdesc: this.clickName
                }
            };
            //2.调用get方法，进行参数传递:根据不同的array  or  cf  进行相关的数据获取或操作
            var url_second_view = '/movecurrentstation';
            if (this.title_yiji == 'Array MOVEMENT') {
                url_second_view = '/array' + url_second_view;
            }
            else {
                url_second_view = '/cf' + url_second_view;
            }
            this.apiService.get(url_second_view, option).subscribe(function (res) {
                console.log(res);
                _this.getStationMessage(res); //格式化数据
                _this.modeltypeNumber = _this.modeltype.length + 1; //获取信号的数量，用于表格的设置
                _this.lengthhead = 2 + _this.eqp_id.length;
            }, function (error) {
                console.log(error);
            });
            this.CurrentMoveStationTableIsShow = true; //当点击的时候显示二级视图
        }
    };
    //下面这个是点击表格的表头，显示第三个视图
    FabmovementComponent.prototype.toThirdTable = function (event) {
        var _this = this;
        this.isCfPH = false;
        this.isCellBoth = false;
        this.movementTableIsShow = false;
        this.CurrentMoveStationTableIsShow = false;
        this.movementCurrentTableIsShow = false;
        var datatime = this.datatime; //与一级的柱状图使用同一个时间操作
        var hourtimekeystr = this.getTimeSameToEchart(datatime);
        this.timestrOnSecondTable = hourtimekeystr.substr(4, 6); //暂时传进到表里面的东西
        this.clickName = event.target.innerText.trim(); //获取到事件的名称,这个地方
        //1.创建要传递的参数
        var option = {
            params: {
                operationdesc: this.clickName
            }
        };
        //2.调用get方法，进行参数传递:根据不同的array  or  cf  进行相关的数据获取或操作
        var url_second_view = '/movecurrentstation';
        if (this.title_yiji == 'Array MOVEMENT') {
            url_second_view = '/array' + url_second_view;
        }
        else {
            url_second_view = '/cf' + url_second_view;
        }
        this.apiService.get(url_second_view, option).subscribe(function (res) {
            console.log(res);
            _this.getStationMessage(res); //格式化数据
            _this.modeltypeNumber = _this.modeltype.length + 1; //获取信号的数量，用于表格的设置
            _this.lengthhead = 2 + _this.eqp_id.length;
        }, function (error) {
            console.log(error);
        });
        this.CurrentMoveStationTableIsShow = true; //当点击的时候显示二级视图
    };
    //展示当前movement的时候：关闭柱状图，显示当前的表格
    FabmovementComponent.prototype.closeTable = function () {
        this.movementCurrentTableIsShow = false;
        this.movementTableIsShow = true;
        this.movementCellIsShow = false; // 关掉cell 的表格视图
    };
    FabmovementComponent.prototype.closeTableSecond = function () {
        this.CurrentMoveStationTableIsShow = false; //关闭掉站点的视图
        this.movementTableIsShow = true;
        this.movementCellIsShow = false; // 整个的div 关掉       
        this.movementTableIsShowcell = false; // 柱状图
        this.movementCurrentTableIsShowcell = false; // current 表格
        if (this.title_yiji == 'CF MOVEMENT') {
            this.isCfPH = true;
        }
    };
    //切换到array move的操作
    FabmovementComponent.prototype.changeToArrayMove = function () {
        var _this = this;
        this.isCfPH = false;
        this.isCellBoth = false;
        this.movementCellIsShow = false; // 整个的div 关掉       
        this.movementTableIsShowcell = false; // 柱状图
        this.movementCurrentTableIsShowcell = false; // current 表格
        this.movementTableIsShow = true; //初始化就显示柱状图
        this.movementCurrentTableIsShow = false;
        this.CurrentMoveStationTableIsShow = false;
        this.datatime = new Date(); //初始化时间
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        this.title_yiji = 'Array MOVEMENT';
        //1.这里是从后台数据库里面读取出来的数据:整体上面的数据
        var url_array_move_home = '/array/move';
        this.apiService.getAll(url_array_move_home).subscribe(function (res) {
            _this.getData(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            console.log('柱状图接收到的数组长度是 ： ' + _this.data_date_current.length);
            _this.createLegend();
            _this.set_MOVE_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.move_operation, _this.title_yiji, 90, datatimestr, 135, 30);
        }, function (error) {
            console.log('myerror ' + error);
        });
    };
    //切换到cf move的操作
    FabmovementComponent.prototype.changeToCfMove = function () {
        var _this = this;
        this.movementCellIsShow = false; // 整个的div 关掉       
        this.movementTableIsShowcell = false; // 柱状图
        this.movementCurrentTableIsShowcell = false; // current 表格
        this.movementTableIsShow = true; //初始化就显示柱状图
        this.movementCurrentTableIsShow = false;
        this.CurrentMoveStationTableIsShow = false;
        this.isCfPH = true;
        this.isCellBoth = false;
        this.datatime = new Date(); //初始化时间
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        this.title_yiji = 'CF MOVEMENT';
        //1.这里是从后台数据库里面读取出来的数据:整体上面的数据
        var url_cf_move_home = '/cf/move';
        this.apiService.getAll(url_cf_move_home).subscribe(function (res) {
            _this.getData(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            console.log('柱状图接收到的数组长度是 ： ' + _this.data_date_current.length);
            _this.createLegend();
            _this.set_CF_MOVE_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.move_operation, _this.title_yiji, 90, datatimestr, 135, 30);
        }, function (error) {
            console.log('myerror ' + error);
        });
        //2.这里是从后台数据库里面读取出来的数据:整体上面的数据
        var url_cf_PH1_move_home = '/cf/movePH1';
        this.apiService.getAll(url_cf_PH1_move_home).subscribe(function (res) {
            _this.getDataPH1(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            _this.createLegendPH1();
            _this.set_CF_PH1_MOVE_Echart(_this.legends_PH1, _this.xAxisLegends_PH1, _this.dataArray_PH1, _this.move_operation_PH1, _this.title_yiji, 45, datatimestr, 85, 25);
        }, function (error) {
            console.log('myerror ' + error);
        });
        setTimeout(function () {
            //3.这里是从后台数据库里面读取出来的数据:整体上面的数据
            var url_cf_PH2_move_home = '/cf/movePH2';
            _this.apiService.getAll(url_cf_PH2_move_home).subscribe(function (res) {
                _this.getDataPH2(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
                _this.createLegendPH2();
                _this.set_CF_PH2_MOVE_Echart(_this.legends_PH2, _this.xAxisLegends_PH2, _this.xAxisLegends_PH1, _this.dataArray_PH1, _this.dataArray_PH2, _this.move_operation_PH2, _this.title_yiji, 45, datatimestr, 85, 25);
            }, function (error) { console.log('myerror ' + error); });
        }, 0);
    };
    //切换到cell move的操作
    FabmovementComponent.prototype.changeToClMove = function () {
        var _this = this;
        this.isCfPH = false;
        this.isCellBoth = true;
        //关第一遍
        this.movementTableIsShow = true; //初始化就显示柱状图
        this.movementCurrentTableIsShow = false; // 关闭掉实时的表格
        this.CurrentMoveStationTableIsShow = false;
        this.datatime = new Date(); //初始化时间
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        this.title_yiji = 'Cell MOVEMENT';
        //1.这里是从后台数据库里面读取出来的数据:整体上面的数据
        var url_cell_move_home = '/cell/move';
        this.apiService.getAll(url_cell_move_home).subscribe(function (res) {
            _this.getData(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            //console.log('柱状图接收到的数组长度是 ： ' + this.data_date_current.length);
            _this.createLegend();
            _this.set_Cell_MOVE_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.move_operation, _this.title_yiji, 0, datatimestr, 45, 30);
            //2.也一并把current的表格给显示出来：这个方法中有一个操作时把实时表格显示出来
            // this.showCurrentMove();
        }, function (error) {
            console.log('myerror ' + error);
        });
        //2.画 第二个柱状图
        var url_cell_move_both = '/cell/moveboth';
        this.apiService.getAll(url_cell_move_both).subscribe(function (res) {
            _this.getDataCellBoth(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            _this.createLegendCellBoth();
            _this.set_Cell_Both_MOVE_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.move_operation_cell_both, _this.title_yiji, 0, 'aaa', 45, 30);
        }, function (error) {
            console.log('myerror ' + error);
        });
        //所以在下面再关掉一边
        // this.movementTableIsShow = false;//初始化就显示柱状图
        // this.movementCurrentTableIsShow = false; // 关闭掉实时的表格
        // this.CurrentMoveStationTableIsShow = false;
        // this.movementCellIsShow = true; // 整个的div 显示       
        // this.movementTableIsShowcell = true; // 柱状图
        // this.movementCurrentTableIsShowcell = false; // current 表格
    };
    //切换到 current move的操作
    FabmovementComponent.prototype.showCurrentMove = function () {
        var _this = this;
        // 1.先把一级柱状图给隐藏掉
        this.movementTableIsShow = false;
        // 2.如果站点的表格开着的话，也一并关掉
        this.CurrentMoveStationTableIsShow = false;
        // 2.把保存数据的数组清空掉
        this.data_array_current_cols = [];
        this.data_array_current_cols_cl = [{ field: 'Key', header: '型号' }]; //这个是cell 的current的表的列的
        this.data_array_current = [];
        var nowTime = new Date();
        var startTime = '';
        var endTime = "TO_CHAR(SYSDATE,'yyyymmddHH24')";
        if (nowTime.getHours() <= 6) {
            startTime = "TO_CHAR(SYSDATE-1,'yyyymmdd')||'06'";
        }
        else {
            startTime = "TO_CHAR(SYSDATE,'yyyymmdd')||'06'";
        }
        var option = {
            params: {
                starttime: startTime,
                endtime: endTime
            }
        };
        if (this.title_yiji == 'Array MOVEMENT') {
            this.movementCurrentTableIsShow = false; //先把其去掉，当数据准备好之后再展示出来
            var url_array_wip_current_home = '/array/currentmove';
            this.apiService.get(url_array_wip_current_home, option).subscribe(function (res) {
                _this.getDataMoveCurrent(res, 'ARRAY');
                //为了画实时的表格而准备的
                _this.getSum('Array', _this.move_operation, res);
                _this.create_cols();
                _this.movementCurrentTableIsShow = true; //最后将表格展示出来
            }, function (error) {
                console.log(error);
            });
        }
        else if (this.title_yiji == 'CF MOVEMENT') {
            this.movementCurrentTableIsShow = false; //先把其去掉，当数据准备好之后再展示出来
            var url_cf_wip_current = '/cf/currentmove';
            this.apiService.get(url_cf_wip_current, option).subscribe(function (res) {
                _this.getDataMoveCurrent(res, 'CF');
                _this.getSum('Cf', _this.move_operation, res);
                _this.create_cols();
                _this.movementCurrentTableIsShow = true;
            }, function (error) {
                console.log(error);
            });
        }
        else if (this.title_yiji == 'Cell MOVEMENT') {
            this.movementCurrentTableIsShow = false; //先把其去掉，当数据准备好之后再展示出来
            // 1. 当前的cell move 的表格
            var url_cl_move_current = '/cell/currentmove';
            this.apiService.get(url_cl_move_current, option).subscribe(function (res) {
                _this.getDataMoveCurrent(res, 'CELL');
                // console.log(this.data_array_current);
                _this.getSum('Cell', _this.move_operation, res);
                _this.create_cols();
                _this.movementCellIsShow = true; // 显示控制cell 两个表格的div
                _this.movementCurrentTableIsShowcell = true; // 显示控制cell 当前表格的div
            }, function (error) {
                console.log(error);
            });
            // 2. 两条产线的cell move 的表格
            var url_cl_move_current_both = '/cell/currentmoveboth';
            this.apiService.get(url_cl_move_current_both).subscribe(function (res) {
                _this.getDataMoveCurrentCellBoth(res);
                //console.log(this.data_array_current_cl_both);
                _this.getSumCellBoth(_this.move_operation_cell_both, res);
                _this.create_cols_cell_both();
            }, function (error) { console.log(error); });
        }
    };
    // cell 的查询柱状图的操作
    FabmovementComponent.prototype.searchCell = function () {
        var _this = this;
        if (this.selectedNames.length == 2 || this.selectedNames.length == 0) {
            console.log("cell boths");
            var url_cell_move_both = '/cell/moveboth';
            this.apiService.get(url_cell_move_both).subscribe(function (res) {
                _this.getDataCellBoth(res);
                _this.createLegendCellBoth();
                _this.set_Cell_Both_MOVE_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.move_operation_cell_both, _this.title_yiji, 0, 'aaa', 45, 30);
            }, function (error) { console.log(error); });
        }
        else if (this.selectedNames.length == 1) {
            var selectednames = this.selectedNames[0];
            var url_cell_move_line = '';
            if (selectednames == 'PCL') {
                url_cell_move_line = '/cell/movePCL';
            }
            else if (selectednames == 'PCS') {
                url_cell_move_line = '/cell/movePCS';
            }
            this.apiService.get(url_cell_move_line).subscribe(function (res) {
                _this.getDataCellOne(res);
                _this.createLegendCellBoth(); // 因为一个和两个的时候 是一样的，所以只用一个方法就可以了
                _this.set_Cell_Both_MOVE_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.move_operation_cell_both, _this.title_yiji, 0, 'aaa', 45, 30);
            }, function (error) { console.log(error); });
        }
    };
    // 创建最后一行的求和的操作
    FabmovementComponent.prototype.getSum = function (fname, move_operation, data) {
        var newobject;
        if (fname === 'Array') {
            newobject = new __WEBPACK_IMPORTED_MODULE_5__model_sum_movement__["a" /* SumMovementArray */]();
        }
        else if (fname === 'Cf') {
            newobject = new __WEBPACK_IMPORTED_MODULE_5__model_sum_movement__["d" /* SumMovementCf */]();
        }
        else if (fname == 'Cell') {
            newobject = new __WEBPACK_IMPORTED_MODULE_5__model_sum_movement__["b" /* SumMovementCell */]();
        }
        var dataSum = 0; //用于计算最后的总和的
        for (var _i = 0, move_operation_1 = move_operation; _i < move_operation_1.length; _i++) {
            var oper = move_operation_1[_i];
            var sumnum = 0;
            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
                var object = data_1[_a];
                var operationdesc = object['operationdesc'];
                if (oper == operationdesc) {
                    var glsqty = parseInt(object['glassqty'], 10);
                    sumnum += glsqty;
                }
            }
            dataSum += sumnum; // 这个是最后的总和
            newobject.setProperty(oper, sumnum); // 把计算的结果进行求和操作
        }
        if (fname === 'Array') {
            newobject.setProperty('SUM', dataSum); //最后给赋值操作
        }
        else if (fname === 'Cf') {
            newobject.setProperty('SUM', dataSum); //最后给赋值操作
        }
        else if (fname === 'Cell') {
            newobject.setProperty('SUM', dataSum); //最后给赋值操作
        }
        this.data_array_current.push(newobject); // 把数组放进去
    };
    //创建 cell both 的最后一行的sum的数据
    FabmovementComponent.prototype.getSumCellBoth = function (move_operation, data) {
        var newOjbect = new __WEBPACK_IMPORTED_MODULE_5__model_sum_movement__["c" /* SumMovementCellBoth */];
        var glassSum = 0; // 用于保存最后的glassqty 的总数的
        for (var _i = 0, move_operation_2 = move_operation; _i < move_operation_2.length; _i++) {
            var oper = move_operation_2[_i];
            var glssum = 0; // 用于保存每个站点的glsqty的数据
            for (var _a = 0, data_2 = data; _a < data_2.length; _a++) {
                var object = data_2[_a];
                var operationdesc = object['operationdesc'];
                var glsqty = object['glassqty'];
                if (operationdesc == oper) {
                    glssum += glsqty;
                }
            }
            glassSum += glssum;
            newOjbect.setProperty(oper, glssum);
        }
        newOjbect.setProperty('SUM', glassSum);
        this.data_array_current_cl_both.push(newOjbect);
    };
    //下面是进行柱状图array  的画图工作
    FabmovementComponent.prototype.set_MOVE_Echart = function (legendname, xlends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, offsetInterval) {
        this.chartOption_array_cf_MOVEMENT = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                data: legendname,
                top: '0%',
                textStyle: {
                    color: '#F2F6FA'
                }
            },
            grid: {
                left: '6%',
                right: '4%',
                bottom: '47%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ''; //拼接加\n返回的类目项
                            var maxLength = 21; //每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); //类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ''; //每次截取的字符串
                                    var start = i * maxLength; //开始截取的位置
                                    var end = start + maxLength; //结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + '\n';
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: '{value}' //设置显示的格式
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: '标准4700',
                    type: 'line',
                    data: [],
                    lineStyle: {
                        color: '#CC3300'
                    },
                    markLine: {
                        silent: true,
                        symbol: 'none',
                        label: {
                            show: false
                        },
                        lineStyle: {
                            type: 'solid',
                            color: '#CC3300',
                            width: 2
                        },
                        data: [{ yAxis: 4700 }]
                    }
                }
            ]
        };
    };
    //下面是 cf 柱状图的画图工作
    FabmovementComponent.prototype.set_CF_MOVE_Echart = function (legendname, xlends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chartOption_array_cf_MOVEMENT = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                data: legendname,
                top: '0%',
                textStyle: {
                    color: '#F2F6FA'
                }
            },
            grid: {
                left: '7%',
                right: '3.5%',
                bottom: '47%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ''; //拼接加\n返回的类目项
                            var maxLength = 21; //每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); //类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ''; //每次截取的字符串
                                    var start = i * maxLength; //开始截取的位置
                                    var end = start + maxLength; //结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + '\n';
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: '{value}' //设置显示的格式
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: '标准4700',
                    type: 'line',
                    data: [],
                    lineStyle: {
                        color: '#CC3300'
                    },
                    markLine: {
                        silent: true,
                        symbol: 'none',
                        label: {
                            show: false
                        },
                        lineStyle: {
                            type: 'solid',
                            color: '#CC3300',
                            width: 2
                        },
                        data: [{ yAxis: 4700 }]
                    }
                }
            ]
        };
    };
    // 下面是 cf ph1 的柱状图
    FabmovementComponent.prototype.set_CF_PH1_MOVE_Echart = function (legendname, xlends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chart_cf_PH1_move = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            grid: {
                left: '8%',
                right: '1%',
                bottom: '47%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ''; //拼接加\n返回的类目项
                            var maxLength = 21; //每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); //类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ''; //每次截取的字符串
                                    var start = i * maxLength; //开始截取的位置
                                    var end = start + maxLength; //结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + '\n';
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            return value / 1000 + 'K';
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    // 下面是 cf ph2 的柱状图
    FabmovementComponent.prototype.set_CF_PH2_MOVE_Echart = function (legendname, xlends, xlendsPH1, dataph1, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chart_cf_PH2_move = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            grid: {
                left: '8%',
                right: '3%',
                bottom: '57%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ''; //拼接加\n返回的类目项
                            var maxLength = 21; //每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); //类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ''; //每次截取的字符串
                                    var start = i * maxLength; //开始截取的位置
                                    var end = start + maxLength; //结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + '\n';
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlendsPH1[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: dataph1[1]
                },
                {
                    name: xlendsPH1[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 1,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: dataph1[2]
                },
                {
                    name: xlendsPH1[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: dataph1[3] //设置数据
                },
                {
                    name: xlends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 5,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 6,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    interval: 1000,
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            return value / 1000 + 'K';
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    //下面是进行柱状的cell 的画图工作
    FabmovementComponent.prototype.set_Cell_MOVE_Echart = function (legendname, xlends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, offsetInterval) {
        this.chartOption_array_cf_MOVEMENT = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                data: legendname,
                top: '0%',
                textStyle: {
                    color: '#F2F6FA'
                }
            },
            grid: {
                left: '7%',
                right: '3.5%',
                bottom: '37%'
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: '{value}' //设置显示的格式
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0
                },
                {
                    name: '标准4700',
                    type: 'line',
                    data: [],
                    lineStyle: {
                        color: '#CC3300'
                    },
                    markLine: {
                        silent: true,
                        symbol: 'none',
                        label: {
                            show: false
                        },
                        lineStyle: {
                            type: 'solid',
                            color: '#CC3300',
                            width: 2
                        },
                        data: [{ yAxis: 4700 }]
                    }
                }
            ]
        };
    };
    FabmovementComponent.prototype.set_Cell_Both_MOVE_Echart = function (legendname, xlends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, offsetInterval) {
        this.chart_cl_both_move = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            grid: {
                left: '9%',
                right: '4%',
                bottom: '37%'
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: offsetInterval,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + offsetInterval * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'k';
                            }
                            else {
                                return value;
                            }
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0
                }
                // {
                //     name:'标准4700',
                //     type:'line',
                //     data:[],
                //     lineStyle:{
                //         color: '#CC3300'
                //     },
                //     markLine: {
                //         silent: true,
                //         symbol:'none',
                //         label:{
                //             show:false
                //         },
                //         lineStyle:{
                //             type:'solid',
                //             color:'#CC3300',
                //             width:2
                //         },
                //         data: [{yAxis:4700}]
                //     }
                // }
            ]
        };
    };
    /********* 一个根据日期创建legend 标签名字的操作************************** */
    FabmovementComponent.prototype.createLegend = function () {
        this.legends = [];
        this.xAxisLegends = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends.push(day_2.getDate() + '日');
        this.xAxisLegends.push(day_1.getDate() + '日');
        this.xAxisLegends.push(today.getDate() + '日');
        this.xAxisLegends.push('实时');
        //legends的标签的
        this.legends.push(day_2.getDate() + '日move');
        this.legends.push(day_1.getDate() + '日move');
        this.legends.push(today.getDate() + '日move');
        this.legends.push('实时move');
        this.legends.push('标准4700');
    };
    FabmovementComponent.prototype.createLegendPH1 = function () {
        //this.legends = [];
        this.xAxisLegends_PH1 = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends_PH1.push(day_2.getDate() + '日');
        this.xAxisLegends_PH1.push(day_1.getDate() + '日');
        this.xAxisLegends_PH1.push(today.getDate() + '日');
        this.xAxisLegends_PH1.push('实时');
        //legends的标签的
        //  this.legends.push(day_2.getDate()+'日move');
        //  this.legends.push(day_1.getDate()+'日move');
        //  this.legends.push(today.getDate()+'日move');
        //  this.legends.push('实时move');
        //  this.legends.push('标准4700');
    };
    FabmovementComponent.prototype.createLegendPH2 = function () {
        //this.legends = [];
        this.xAxisLegends_PH2 = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends_PH2.push(day_2.getDate() + '日');
        this.xAxisLegends_PH2.push(day_1.getDate() + '日');
        this.xAxisLegends_PH2.push(today.getDate() + '日');
        this.xAxisLegends_PH2.push('实时');
        //legends的标签的
        //  this.legends.push(day_2.getDate()+'日move');
        //  this.legends.push(day_1.getDate()+'日move');
        //  this.legends.push(today.getDate()+'日move');
        //  this.legends.push('实时move');
        //  this.legends.push('标准4700');
    };
    FabmovementComponent.prototype.createLegendCellBoth = function () {
        this.legends_cell_both = [];
        this.xAxisLegends_cell_both = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends_cell_both.push(day_2.getDate() + '日');
        this.xAxisLegends_cell_both.push(day_1.getDate() + '日');
        this.xAxisLegends_cell_both.push(today.getDate() + '日');
        this.xAxisLegends_cell_both.push('实时');
        //legends的标签的
        this.legends_cell_both.push(day_2.getDate() + '日move');
        this.legends_cell_both.push(day_1.getDate() + '日move');
        this.legends_cell_both.push(today.getDate() + '日move');
        this.legends_cell_both.push('实时move');
        this.legends_cell_both.push('标准4700');
    };
    //上面是array_wip的图
    /********一级 ： 这个是获取到数据并把数据转换成想要的格式的方法：这个是在画柱状图的时候用的************** */
    FabmovementComponent.prototype.getData = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.move_operation = [];
        this.data_date_before_3 = [];
        this.data_date_before_2 = [];
        this.data_date_before_1 = [];
        this.data_date_current = [];
        this.dataArray = [this.data_date_before_3, this.data_date_before_2, this.data_date_before_1, this.data_date_current];
        if (Array.isArray(data)) {
            for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                var list = data_3[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.move_operation.push(list[value]);
                    }
                    if (value == 'date_before_3') {
                        this.data_date_before_3.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current.push(list[value]);
                    }
                }
            }
        }
    };
    FabmovementComponent.prototype.getDataPH1 = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.move_operation_PH1 = [];
        this.data_date_before_3_PH1 = [];
        this.data_date_before_2_PH1 = [];
        this.data_date_before_1_PH1 = [];
        this.data_date_current_PH1 = [];
        this.dataArray_PH1 = [this.data_date_before_3_PH1, this.data_date_before_2_PH1, this.data_date_before_1_PH1, this.data_date_current_PH1];
        if (Array.isArray(data)) {
            for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                var list = data_4[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.move_operation_PH1.push(list[value]);
                    }
                    if (value == 'date_before_3') {
                        this.data_date_before_3_PH1.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2_PH1.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1_PH1.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current_PH1.push(list[value]);
                    }
                }
            }
        }
    };
    FabmovementComponent.prototype.getDataPH2 = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.move_operation_PH2 = [];
        this.data_date_before_3_PH2 = [];
        this.data_date_before_2_PH2 = [];
        this.data_date_before_1_PH2 = [];
        this.data_date_current_PH2 = [];
        this.dataArray_PH2 = [this.data_date_before_3_PH2, this.data_date_before_2_PH2, this.data_date_before_1_PH2, this.data_date_current_PH2];
        if (Array.isArray(data)) {
            for (var _i = 0, data_5 = data; _i < data_5.length; _i++) {
                var list = data_5[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.move_operation_PH2.push(list[value]);
                    }
                    if (value == 'date_before_3') {
                        this.data_date_before_3_PH2.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2_PH2.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1_PH2.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current_PH2.push(list[value]);
                    }
                }
            }
        }
    };
    FabmovementComponent.prototype.getDataCellBoth = function (data) {
        this.move_operation_cell_both = [];
        this.data_date_before_3_cell_both = [];
        this.data_date_before_2_cell_both = [];
        this.data_date_before_1_cell_both = [];
        this.data_date_current_cell_both = [];
        this.dataArray_cell_both = [this.data_date_before_3_cell_both, this.data_date_before_2_cell_both, this.data_date_before_1_cell_both, this.data_date_current_cell_both];
        if (Array.isArray(data)) {
            for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                var obj = data_6[_i];
                var operationdesc = obj['oper_desc'];
                if (!this.move_operation_cell_both.includes(operationdesc)) {
                    this.move_operation_cell_both.push(operationdesc);
                }
            }
        }
        for (var _a = 0, _b = this.move_operation_cell_both; _a < _b.length; _a++) {
            var oper_desc = _b[_a];
            var data_sum_before_3 = 0;
            var data_sum_before_2 = 0;
            var data_sum_before_1 = 0;
            var data_sum_current = 0;
            for (var _c = 0, data_7 = data; _c < data_7.length; _c++) {
                var object = data_7[_c];
                var operationdesc = object['oper_desc'];
                if (operationdesc == oper_desc) {
                    data_sum_before_3 += object['date_before_3'];
                    data_sum_before_2 += object['date_before_2'];
                    data_sum_before_1 += object['date_before_1'];
                    data_sum_current += object['date_current'];
                }
            }
            this.data_date_before_3_cell_both.push(data_sum_before_3);
            this.data_date_before_2_cell_both.push(data_sum_before_2);
            this.data_date_before_1_cell_both.push(data_sum_before_1);
            this.data_date_current_cell_both.push(data_sum_current);
        }
    };
    FabmovementComponent.prototype.getDataCellOne = function (data) {
        this.move_operation_cell_both = [];
        this.data_date_before_3_cell_both = [];
        this.data_date_before_2_cell_both = [];
        this.data_date_before_1_cell_both = [];
        this.data_date_current_cell_both = [];
        this.dataArray_cell_both = [this.data_date_before_3_cell_both, this.data_date_before_2_cell_both, this.data_date_before_1_cell_both, this.data_date_current_cell_both];
        if (Array.isArray(data)) {
            for (var _i = 0, data_8 = data; _i < data_8.length; _i++) {
                var list = data_8[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.move_operation_cell_both.push(list[value]);
                    }
                    if (value == 'date_before_3') {
                        this.data_date_before_3_cell_both.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2_cell_both.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1_cell_both.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current_cell_both.push(list[value]);
                    }
                }
            }
        }
    };
    /*******************转换数据格式的方法end***************************** */
    /******************修改时间格式 ： 2018-12-14 10：01：02 用于在一级视图上面显示****************** */
    FabmovementComponent.prototype.getTimeStr = function (datatime) {
        var timestr = '';
        var datestr = datatime.toISOString().substr(0, 10);
        var hour = datatime.getHours();
        var hourstr = '';
        if (hour > 9) {
            hourstr = hour + '';
        }
        else {
            hourstr = '0' + hour;
        }
        var minute = datatime.getMinutes();
        var minutestr = '';
        if (minute > 9) {
            minutestr = minute + '';
        }
        else {
            minutestr = '0' + minute;
        }
        var second = datatime.getSeconds();
        var secondstr = '';
        if (second > 9) {
            secondstr = second + '';
        }
        else {
            secondstr = '0' + second;
        }
        timestr = datestr + ' ' + hourstr + ':' + minutestr + ':' + secondstr;
        return timestr;
    };
    /******************修改时间格式 ： 2018-12-14 10：01：02 end************** */
    /********* 一级 ： 转换数据格式 ：movement_current的数据：这个是用来做表格的****************** */
    FabmovementComponent.prototype.getDataMoveCurrent = function (data, factoryname) {
        this.data_key = [];
        if (Array.isArray(data)) {
            //第一个循环用于获取到key的值:,并且在这里在添加最后的求和sum的操作
            for (var _i = 0, data_9 = data; _i < data_9.length; _i++) {
                var list = data_9[_i];
                if (list['modeltype'] != null) {
                    for (var value in list) {
                        if (value == 'modeltype') {
                            if (!this.data_key.includes(list[value])) {
                                //console.log("you are already has a value : "+list[value]);
                                this.data_key.push(list[value]);
                            }
                        }
                    }
                }
            }
            this.data_array_current = []; //清空要保存数据的数组！
            for (var _a = 0, _b = this.data_key; _a < _b.length; _a++) {
                var key = _b[_a];
                //第二个循环data_key用于创建对象，并且把对象放入到数组中去
                var newObject = void 0;
                if (factoryname == 'ARRAY') {
                    newObject = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["c" /* array_move_current */]; //当传进来的是一个array的时候，创建的是个array的对象
                }
                else if (factoryname == 'CF') {
                    newObject = new __WEBPACK_IMPORTED_MODULE_6__model_cf_move__["a" /* cf_move_current */]; //当传进来的是一个cf的时候，创建的是个cf的对象
                }
                else if (factoryname == 'CELL') {
                    newObject = new __WEBPACK_IMPORTED_MODULE_7__model_cell_move__["a" /* cell_move_current */]; //当传进来的是一个cell的时候，创建的是个cell的对象
                }
                newObject.Key = key; // 先给key赋值
                var glassNumbers = [];
                for (var _c = 0, data_10 = data; _c < data_10.length; _c++) {
                    var list = data_10[_c];
                    var modeltypename = list['modeltype'];
                    if (modeltypename == key) {
                        var operationdescname = list['operationdesc'];
                        var glassqtyvalue = list['glassqty'];
                        glassNumbers.push(parseInt(glassqtyvalue, 10));
                        if (newObject[operationdescname] === '') {
                            newObject.setProperty(operationdescname, glassqtyvalue); //调用对象的方法进行的操作
                        }
                        else {
                            var preSum = parseInt(newObject[operationdescname], 10);
                            var newSum = glassqtyvalue + preSum;
                            newObject.setProperty(operationdescname, newSum);
                        }
                    }
                }
                var glassSum = 0;
                for (var _d = 0, glassNumbers_1 = glassNumbers; _d < glassNumbers_1.length; _d++) {
                    var glassqty = glassNumbers_1[_d];
                    glassSum += glassqty;
                }
                newObject.setProperty('SUM', glassSum);
                //把这个的对象放入到数组中去
                this.data_array_current.push(newObject);
            }
        }
    };
    // 获取 cell both 的数据对象，第二个表格的操作
    FabmovementComponent.prototype.getDataMoveCurrentCellBoth = function (data) {
        var data_key = []; // 用于保存所有的 operationdesc 的数组
        for (var _i = 0, data_11 = data; _i < data_11.length; _i++) {
            var object = data_11[_i];
            var modeltype = object['modeltype'];
            if (!data_key.includes(modeltype)) {
                data_key.push(modeltype);
            }
        }
        console.log(data_key);
        this.data_array_current_cl_both = []; // 清空用于保存对象的数组
        // let sumsum:number = 0; // 计算总和的，用来测试的，可以注释掉
        for (var _a = 0, data_key_1 = data_key; _a < data_key_1.length; _a++) {
            var key1 = data_key_1[_a];
            var newObject = new __WEBPACK_IMPORTED_MODULE_7__model_cell_move__["b" /* cell_move_current_both */];
            var glassqtys = []; // 用于保存这个key下面所有的glassqty的值，用来计算总和的
            newObject.Key = key1;
            for (var _b = 0, data_12 = data; _b < data_12.length; _b++) {
                var object = data_12[_b];
                var modeltype = object['modeltype'];
                if (modeltype == key1) {
                    var operationdesc = object['operationdesc'];
                    var glsqty = object['glassqty'];
                    glassqtys.push(glsqty); // 把这个glsqty保存起来
                    if (newObject[operationdesc] == '') {
                        newObject.setProperty(operationdesc, glsqty);
                    }
                    else {
                        var oldglsqty = parseInt(newObject[operationdesc], 10);
                        var newglsqty = parseInt(glsqty, 10);
                        var glsqtys = oldglsqty + newglsqty;
                        newObject.setProperty(operationdesc, glsqtys);
                    }
                }
            }
            // 对这一行的glsqty数量进行求个和
            var glssum = 0;
            for (var _c = 0, glassqtys_1 = glassqtys; _c < glassqtys_1.length; _c++) {
                var glsqty = glassqtys_1[_c];
                glssum += glsqty;
            }
            newObject.setProperty('SUM', glssum);
            //sumsum += glssum;
            // 将上面创建的对象 保存到数组中去
            this.data_array_current_cl_both.push(newObject);
        }
        //console.log('列计算的和是 ： '+sumsum);
    };
    /*******转换数据格式 ：array_current的数据end****************** */
    /******** 一级 ：动态的创建表格的 header 和 feild ********************* */
    FabmovementComponent.prototype.create_cols = function () {
        console.log('you have in method create_cols...');
        if (this.title_yiji == 'Array MOVEMENT' || this.title_yiji == 'CF MOVEMENT') {
            for (var _i = 0, _a = this.move_operation; _i < _a.length; _i++) {
                var value = _a[_i];
                // 1.创建对象
                var colObjetc = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["d" /* move_crrent_cols */];
                colObjetc.setProperty(value, value);
                console.log('aaa  bb  ' + colObjetc);
                // 2.把对象放进到数组中去
                this.data_array_current_cols.push(colObjetc);
            }
            var colSUM = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["d" /* move_crrent_cols */];
            colSUM.setProperty('SUM', 'SUM');
            this.data_array_current_cols.push(colSUM);
        }
        else if (this.title_yiji == 'Cell MOVEMENT') {
            for (var _b = 0, _c = this.move_operation; _b < _c.length; _b++) {
                var value = _c[_b];
                // 1.创建对象
                var colObjetc = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["d" /* move_crrent_cols */];
                colObjetc.setProperty(value, value);
                console.log('aaa  bb  ' + colObjetc);
                // 2.把对象放进到数组中去
                this.data_array_current_cols_cl.push(colObjetc);
            }
            var colSUM = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["d" /* move_crrent_cols */];
            colSUM.setProperty('SUM', 'SUM');
            this.data_array_current_cols_cl.push(colSUM);
        }
    };
    // 创建 cell  both 对应的 表格的列的操作
    FabmovementComponent.prototype.create_cols_cell_both = function () {
        this.data_array_current_cols_cl_both = [];
        for (var _i = 0, _a = this.move_operation_cell_both; _i < _a.length; _i++) {
            var oper = _a[_i];
            var colObject_1 = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["d" /* move_crrent_cols */];
            colObject_1.setProperty(oper, oper);
            this.data_array_current_cols_cl_both.push(colObject_1);
        }
        var colObject = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["d" /* move_crrent_cols */];
        colObject.setProperty('SUM', 'SUM');
        this.data_array_current_cols_cl_both.push(colObject);
    };
    /********动态的创建表格的 header 和 feild  end********************* */
    /************创建二级视图时候，需要转换的时间格式的****************** */
    FabmovementComponent.prototype.getTimeSameToEchart = function (datatime) {
        var hourtimekey = '';
        var yearstr = datatime.getFullYear().toString();
        var month = datatime.getMonth() + 1;
        var date = datatime.getDate();
        var hour = datatime.getHours(); //move的小时要减 1
        if (hour < 0) {
            date = date - 1;
            hour = 23;
        }
        var monthstr = '';
        var datestr = '';
        var hourstr = '';
        if (month > 9) {
            monthstr = month + '';
        }
        else {
            monthstr = '0' + month;
        }
        if (date > 9) {
            datestr = date + '';
        }
        else {
            datestr = '0' + date;
        }
        if (hour > 9) {
            hourstr = hour + '';
        }
        else {
            hourstr = '0' + hour;
        }
        hourtimekey = yearstr + monthstr + datestr + hourstr;
        return hourtimekey;
    };
    /************创建二级视图时候，需要转换的时间格式的end************** */
    /***************创建二级试图时候，接受数据的方法************************ */
    FabmovementComponent.prototype.getStationMessage = function (data) {
        var eqp_id_tepm = []; //创建临时的操作用于去掉重复的值
        var eqp_id_tepm2 = []; //创建临时的操作用于去掉重复的值
        var get_index = []; //用来保存下标使用
        this.eqp_id = []; //清空eqp_id
        //this.eqp_state = [];//清空eqp_state
        this.modeltype = []; //清空型号数组
        this.stationWipMessage = []; //清空对象数组
        if (Array.isArray(data)) {
            console.log(data);
            //1.第一个循环获取到基本的元素信息，放入到数组中进行保存
            for (var _i = 0, data_13 = data; _i < data_13.length; _i++) {
                var list = data_13[_i];
                for (var value in list) {
                    if (value == 'eqp_id') {
                        this.eqp_id.push(list[value]);
                    }
                    // if(value == 'eqp_state'){//保存eqp_state的信息
                    //   this.eqp_state.push(list[value]);
                    // }
                    if (value == 'modeltype') {
                        if (!this.modeltype.includes(list[value])) {
                            this.modeltype.push(list[value]);
                        }
                    }
                }
            }
        } // 所有数据中的类型数组modeltype【】和设备数组eqp_id【】
        //2.第二个循环，用于创建保存型号和m数量的操作
        for (var _a = 0, _b = this.modeltype; _a < _b.length; _a++) {
            var modeltype = _b[_a];
            var newObject = new __WEBPACK_IMPORTED_MODULE_8__outstandingcase_transparent_display_b4_wip_model_array_wip__["b" /* stationMessage */](); //一个modeltype 创建一个临时变量用于保存对象
            newObject.setmodeltype(modeltype); //直接设置这个modeltype型号
            var listsofmodeltype = []; //用来保存和当前modeltype匹配的数据
            //1.循环找到这个型号的所有的list的信息
            for (var _c = 0, data_14 = data; _c < data_14.length; _c++) {
                var list = data_14[_c];
                if (modeltype == list['modeltype']) {
                    listsofmodeltype.push(list);
                }
            }
            var eqp_id_inlist = []; //用来保存这个modeltype下的所有的设备的名称
            for (var _d = 0, listsofmodeltype_1 = listsofmodeltype; _d < listsofmodeltype_1.length; _d++) {
                var list = listsofmodeltype_1[_d];
                if (!eqp_id_inlist.includes(list['eqp_id'])) {
                    eqp_id_inlist.push(list['eqp_id']);
                }
            }
            //2.遍历得到的eqp_id数组，与eqp_id进行对比
            for (var _e = 0, _f = this.eqp_id; _e < _f.length; _e++) {
                var eqp_id = _f[_e];
                if (eqp_id_inlist.includes(eqp_id)) {
                    var glasssum = 0; //记录总数
                    console.log("eqp_id : " + eqp_id);
                    for (var _g = 0, listsofmodeltype_2 = listsofmodeltype; _g < listsofmodeltype_2.length; _g++) {
                        var list = listsofmodeltype_2[_g];
                        if (eqp_id == list['eqp_id']) {
                            glasssum += parseInt(list['glassqty'], 10); //求和
                            console.log("glassqty : " + list['glassqty']);
                            console.log("glasssum : " + glasssum);
                            newObject.setglassqtys(glasssum + '');
                        }
                    }
                    console.log('###################################################');
                }
                else {
                    newObject.setglassqtys('');
                }
            }
            //每次把创建的对象打印一下
            console.log(newObject);
            //3.当所有的设备在这个modeltype类型下都循环完成之后，证明这个对象已经创建完成了
            this.stationWipMessage.push(newObject);
        }
        // //再用一个循环把重复的数据给删除掉
        console.log('内容 ： ');
        // eqp_id_tepm = this.eqp_id;
        // console.log("临时的数组是 ： "+eqp_id_tepm);
        for (var i = 0; i < this.eqp_id.length; i++) {
            eqp_id_tepm[i] = i + this.eqp_id[i]; //重新添加上一个i的值这个内容
            //console.log(i+" : "+eqp_id_tepm[i]);
        }
        console.log('1 ： ' + eqp_id_tepm);
        console.log('1 :  ' + this.eqp_id);
        for (var i = 0; i < eqp_id_tepm.length; i++) {
            var eqpidtemp = ''; //用来保存真实的设备名称
            var index = null; //用来保存真实的下表数据
            if (i < 10) {
                eqpidtemp = eqp_id_tepm[i].substr(1, 7); //截取出来这个操作
                index = parseInt(eqp_id_tepm[i].substr(0, 1), 10);
            }
            else {
                eqpidtemp = eqp_id_tepm[i].substr(2, 7); //截取出来这个操作
                index = parseInt(eqp_id_tepm[i].substr(0, 2), 10);
            }
            if (eqp_id_tepm2.includes(eqpidtemp)) {
                console.log('重复的下标是 ： ' + eqp_id_tepm[i] + ' : ' + eqpidtemp + ' : ' + index);
                this.eqp_id[i] = '666666888888'; //就是写成一个标志位
                //this.eqp_state[i] = '666666888888';
                for (var _h = 0, _j = this.stationWipMessage; _h < _j.length; _h++) {
                    var object = _j[_h];
                    object.glassqtys[i] = '666666888888'; //删除每一个对象的对应下标的数据
                }
            }
            else {
                eqp_id_tepm2.push(eqpidtemp); //最后这个eqp_id_temp2应该和this.eqp_id 是一样的
            }
        }
        console.log('2 ：  ' + eqp_id_tepm2);
        console.log('2 ：  ' + this.eqp_id); //这两个应该是能够对上的才可以
        while (this.eqp_id.includes('666666888888')) {
            var index = this.eqp_id.indexOf('666666888888');
            this.eqp_id.splice(index, 1);
        }
        // while(this.eqp_state.includes('666666888888')){
        //   let index = this.eqp_state.indexOf('666666888888');
        //     this.eqp_state.splice(index,1);
        // }
        for (var _k = 0, _l = this.stationWipMessage; _k < _l.length; _k++) {
            var object = _l[_k];
            while (object.glassqtys.includes('666666888888')) {
                var index = object.glassqtys.indexOf('666666888888');
                object.glassqtys.splice(index, 1);
            }
        }
        console.log('3 ：  ' + eqp_id_tepm2);
        console.log('3 ：  ' + this.eqp_id); //这两个应该是能够对上的才可以
    };
    /***************创建二级试图时候，接受数据的方法end************************ */
    FabmovementComponent.prototype.getStationMessage2 = function (data) {
        this.eqp_id = [];
        this.modeltype = [];
        this.stationWipMessage = [];
        if (Array.isArray(data)) {
            //1.第一个循环获取到基本的元素信息，放入到数组中进行保存
            for (var _i = 0, data_15 = data; _i < data_15.length; _i++) {
                var list = data_15[_i];
                for (var value in list) {
                    if (value == 'eqp_id') {
                        if (!this.eqp_id.includes(list[value])) {
                            this.eqp_id.push(list[value]);
                        } //保存eqp_id的信息
                    }
                    // if(value == 'eqp_state'){//保存eqp_state的信息
                    //   this.eqp_state.push(list[value]);
                    // }
                    if (value == 'modeltype') {
                        if (!this.modeltype.includes(list[value])) {
                            this.modeltype.push(list[value]);
                        }
                    }
                }
            }
        }
        this.objArray = [];
        for (var _a = 0, _b = this.modeltype; _a < _b.length; _a++) {
            var type = _b[_a];
            for (var _c = 0, _d = this.eqp_id; _c < _d.length; _c++) {
                var eqpid = _d[_c];
                var glassqtysum = 0;
                var thirdObject = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["b" /* ThirdObject */]();
                for (var _e = 0, data_16 = data; _e < data_16.length; _e++) {
                    var obj = data_16[_e];
                    if (obj['eqp_id'] === eqpid && obj['modeltype'] === type) {
                        glassqtysum += obj['glassqty'];
                    }
                }
                thirdObject.setmodeltype(type);
                thirdObject.seteqpid(eqpid);
                thirdObject.setgalssqty(glassqtysum);
                this.objArray.push(thirdObject);
            }
        }
        console.log(this.eqp_id);
        this.stationWipMessage = [];
        for (var _f = 0, _g = this.modeltype; _f < _g.length; _f++) {
            var thismodeltype = _g[_f];
            var newobject = new __WEBPACK_IMPORTED_MODULE_1__model_array_move__["a" /* StationMessage */]();
            newobject.setModeltype(thismodeltype);
            for (var _h = 0, _j = this.objArray; _h < _j.length; _h++) {
                var obj = _j[_h];
                if (obj['modeltype'] == thismodeltype) {
                    var eqpid = obj.eqpid;
                    // console.log(eqpid);
                    var index = this.eqp_id.indexOf(eqpid);
                    //console.log(index);
                    newobject.setGlasssum(index, obj.galssqty + '');
                }
                else {
                    //newobject.setGlasssum(index,'');
                }
            }
            console.log(newobject);
            this.stationWipMessage.push(newobject);
        }
    };
    FabmovementComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-fabmovement',
            template: __webpack_require__("./src/app/toumingdisplan/fabmovement/fabmovement.component.html"),
            styles: [__webpack_require__("./src/app/toumingdisplan/fabmovement/fabmovement.component.css")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_service_api_api_service__["a" /* ApiService */],
            __WEBPACK_IMPORTED_MODULE_3__report_ui_service_report_ui_common_service__["a" /* ReportUiCommonService */],
            __WEBPACK_IMPORTED_MODULE_4__common_service_fullscreen_service__["a" /* FullscreenService */]])
    ], FabmovementComponent);
    return FabmovementComponent;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/model/array_move.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StationMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ThirdObject; });
/* unused harmony export station_msg */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return array_move_current; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return move_crrent_cols; });
/* unused harmony export stationMessage */
var StationMessage = /** @class */ (function () {
    function StationMessage() {
        this.galsssum = [];
    }
    StationMessage.prototype.setModeltype = function (value) {
        this.modeltype = value;
    };
    StationMessage.prototype.setGlasssum = function (index, value) {
        this.galsssum[index] = value;
    };
    return StationMessage;
}());

var ThirdObject = /** @class */ (function () {
    function ThirdObject() {
    }
    ThirdObject.prototype.setmodeltype = function (value) {
        this.modeltype = value;
    };
    ThirdObject.prototype.seteqpid = function (value) {
        this.eqpid = value;
    };
    ThirdObject.prototype.setgalssqty = function (value) {
        this.galssqty = value;
    };
    return ThirdObject;
}());

var station_msg = /** @class */ (function () {
    function station_msg() {
        this.machine = null;
        this.machine_type = null;
        this.wip = null;
        this.machine_state = null;
    }
    return station_msg;
}());

var array_move_current = /** @class */ (function () {
    function array_move_current() {
        this['Key'] = '';
        this['Initial Clean'] = '';
        this['1st ITO Dep'] = '';
        this['1st ITO Mask'] = '';
        this['1st ITO Etch'] = '';
        this['Gate Dep.'] = '';
        this['Gate Mask'] = '';
        this['Gate Etch'] = '';
        this['Gate Test Full'] = '';
        this['FGI Clean / Dep'] = '';
        this['Multi Dep Full'] = '';
        this['Active Mask'] = '';
        this['Active Etch'] = '';
        this['Active Strip'] = '';
        this['1st ITO Dep.'] = '';
        this['1st ITO Mask.'] = '';
        this['1st ITO Etch.'] = '';
        this['FGI Dep.'] = '';
        this['Multi Dep.'] = '';
        this['SD Dep.'] = '';
        this['SDT Mask'] = '';
        this['1st SD Etch '] = '';
        this['2nd SD Etch '] = '';
        this['SD Strip'] = '';
        this['SD Test Full'] = '';
        this['PVX Dep'] = '';
        this['VIA Mask'] = '';
        this['VIA Etch'] = '';
        this['2nd ITO Dep'] = '';
        this['2nd ITO Mask'] = '';
        this['2nd ITO Etch'] = '';
        this['Final AOI Inline full'] = '';
        this['Array Test'] = '';
        this['Final CUT  Repair'] = '';
        this['Final CVD Repair'] = '';
        this['Shipping'] = '';
        this['SUM'] = '';
    }
    array_move_current.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName === 'Initial Clean') {
            this['Initial Clean'] = propertyValue;
        }
        else if (propertyName === '1st ITO Dep') {
            this['1st ITO Dep'] = propertyValue;
        }
        else if (propertyName === '1st ITO Mask') {
            this['1st ITO Mask'] = propertyValue;
        }
        else if (propertyName === '1st ITO Etch') {
            this['1st ITO Etch'] = propertyValue;
        }
        else if (propertyName === 'Gate Dep.') {
            this['Gate Dep.'] = propertyValue;
        }
        else if (propertyName === 'Gate Mask') {
            this['Gate Mask'] = propertyValue;
        }
        else if (propertyName === 'Gate Etch') {
            this['Gate Etch'] = propertyValue;
        }
        else if (propertyName === 'Gate Test Full') {
            this['Gate Test Full'] = propertyValue;
        }
        else if (propertyName === 'FGI Clean / Dep') {
            this['FGI Clean / Dep'] = propertyValue;
        }
        else if (propertyName === 'Multi Dep Full') {
            this['Multi Dep Full'] = propertyValue;
        }
        else if (propertyName === 'Active Mask') {
            this['Active Mask'] = propertyValue;
        }
        else if (propertyName === 'Active Etch') {
            this['Active Etch'] = propertyValue;
        }
        else if (propertyName === 'Active Strip') {
            this['Active Strip'] = propertyValue;
        }
        else if (propertyName === '1st ITO Dep.') {
            this['1st ITO Dep.'] = propertyValue;
        }
        else if (propertyName === '1st ITO Mask.') {
            this['1st ITO Mask.'] = propertyValue;
        }
        else if (propertyName === '1st ITO Etch.') {
            this['1st ITO Etch.'] = propertyValue;
        }
        else if (propertyName === 'FGI Dep.') {
            this['FGI Dep.'] = propertyValue;
        }
        else if (propertyName === 'Multi Dep.') {
            this['Multi Dep.'] = propertyValue;
        }
        else if (propertyName === 'SD Dep.') {
            this['SD Dep.'] = propertyValue;
        }
        else if (propertyName === 'SDT Mask') {
            this['SDT Mask'] = propertyValue;
        }
        else if (propertyName === '1st SD Etch ') {
            this['1st SD Etch '] = propertyValue;
        }
        else if (propertyName === '2nd SD Etch ') {
            this['2nd SD Etch '] = propertyValue;
        }
        else if (propertyName === 'SD Strip') {
            this['SD Strip'] = propertyValue;
        }
        else if (propertyName === 'SD Test Full') {
            this['SD Test Full'] = propertyValue;
        }
        else if (propertyName === 'PVX Dep') {
            this['PVX Dep'] = propertyValue;
        }
        else if (propertyName === 'VIA Mask') {
            this['VIA Mask'] = propertyValue;
        }
        else if (propertyName === 'VIA Etch') {
            this['VIA Etch'] = propertyValue;
        }
        else if (propertyName === '2nd ITO Dep') {
            this['2nd ITO Dep'] = propertyValue;
        }
        else if (propertyName === '2nd ITO Mask') {
            this['2nd ITO Mask'] = propertyValue;
        }
        else if (propertyName === '2nd ITO Etch') {
            this['2nd ITO Etch'] = propertyValue;
        }
        else if (propertyName === 'Final AOI Inline full') {
            this['Final AOI Inline full'] = propertyValue;
        }
        else if (propertyName === 'Array Test') {
            this['Array Test'] = propertyValue;
        }
        else if (propertyName === 'Final CUT  Repair') {
            this['Final CUT  Repair'] = propertyValue;
        }
        else if (propertyName === 'Final CVD Repair') {
            this['Final CVD Repair'] = propertyValue;
        }
        else if (propertyName === 'Shipping') {
            this['Shipping'] = propertyValue;
        }
        else if (propertyName === 'SUM') {
            this['SUM'] = propertyValue;
        }
    };
    return array_move_current;
}());

// 下面的类是用来动态地创建实时的表格的内容的
var move_crrent_cols = /** @class */ (function () {
    function move_crrent_cols() {
        this.header = null;
        this.field = null;
    }
    move_crrent_cols.prototype.setProperty = function (field, header) {
        this.field = field;
        this.header = header;
    };
    return move_crrent_cols;
}());

var stationMessage = /** @class */ (function () {
    function stationMessage() {
        this.glassqtys = []; //用来保存数组的操作
    }
    stationMessage.prototype.setProperty = function (modeltype, glassqty) {
        this.modeltype = modeltype;
        this.glassqtys.push(glassqty);
    };
    stationMessage.prototype.setmodeltype = function (modeltype) {
        this.modeltype = modeltype;
    };
    stationMessage.prototype.setglassqtys = function (glassqty) {
        this.glassqtys.push(glassqty);
    };
    return stationMessage;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/model/cell_move.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cell_move_current; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cell_move_current_both; });
var cell_move_current = /** @class */ (function () {
    function cell_move_current() {
        this['Key'] = '';
        this['PI'] = '';
        this['PIRW'] = '';
        this['Rub'] = '';
        this['Assy'] = '';
        this['Cut'] = '';
        this['CT'] = '';
        this['SUM'] = '';
    }
    cell_move_current.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == 'Assy') {
            this['Assy'] = propertyValue;
        }
        else if (propertyName == 'PI') {
            this['PI'] = propertyValue;
        }
        else if (propertyName == 'PIRW') {
            this['PIRW'] = propertyValue;
        }
        else if (propertyName == 'Rub') {
            this['Rub'] = propertyValue;
        }
        else if (propertyName == 'Cut') {
            this['Cut'] = propertyValue;
        }
        else if (propertyName == 'CT') {
            this['CT'] = propertyValue;
        }
        else if (propertyName == 'SUM') {
            this['SUM'] = propertyValue;
        }
    };
    return cell_move_current;
}());

var cell_move_current_both = /** @class */ (function () {
    function cell_move_current_both() {
        this["Key"] = "";
        this["CutP"] = "";
        this["CT"] = "";
        this["Trim"] = "";
        this["NmlRP"] = "";
        this["BurRP"] = "";
        this["Oven"] = "";
        this["PadRP"] = "";
        this["TapeRP"] = "";
        this["Retest"] = "";
        this["Sorter"] = "";
        this["Shipping"] = "";
        this["Packing"] = "";
        this["SUM"] = "";
    }
    cell_move_current_both.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == "CutP") {
            this["CutP"] = propertyValue;
        }
        else if (propertyName == "CT") {
            this["CT"] = propertyValue;
        }
        else if (propertyName == "Trim") {
            this["Trim"] = propertyValue;
        }
        else if (propertyName == "NmlRP") {
            this["NmlRP"] = propertyValue;
        }
        else if (propertyName == "BurRP") {
            this["BurRP"] = propertyValue;
        }
        else if (propertyName == "Oven") {
            this["Oven"] = propertyValue;
        }
        else if (propertyName == "PadRP") {
            this["PadRP"] = propertyValue;
        }
        else if (propertyName == "TapeRP") {
            this["TapeRP"] = propertyValue;
        }
        else if (propertyName == "Retest") {
            this["Retest"] = propertyValue;
        }
        else if (propertyName == "Sorter") {
            this["Sorter"] = propertyValue;
        }
        else if (propertyName == "Shipping") {
            this["Shipping"] = propertyValue;
        }
        else if (propertyName == "Packing") {
            this["Packing"] = propertyValue;
        }
        else if (propertyName == "SUM") {
            this["SUM"] = propertyValue;
        }
    };
    return cell_move_current_both;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/model/cf_move.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cf_move_current; });
var cf_move_current = /** @class */ (function () {
    function cf_move_current() {
        this['Key'] = '';
        this["Unpack"] = "";
        this["ITO"] = "";
        this["BM"] = "";
        this["BMRP"] = "";
        this["R"] = "";
        this["G"] = "";
        this["B"] = "";
        this["CRP"] = "";
        this["OC"] = "";
        this["PS"] = "";
        this["PSRP"] = "";
        this["FINS"] = "";
        this["Rework"] = "";
        this["RWINS"] = "";
        this["Shipping"] = "";
        this['SUM'] = '';
    }
    cf_move_current.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == "Unpack") {
            this["Unpack"] = propertyValue;
        }
        else if (propertyName == "ITO") {
            this["ITO"] = propertyValue;
        }
        else if (propertyName == "BM") {
            this["BM"] = propertyValue;
        }
        else if (propertyName == "BMRP") {
            this["BMRP"] = propertyValue;
        }
        else if (propertyName == "R") {
            this["R"] = propertyValue;
        }
        else if (propertyName == "G") {
            this["G"] = propertyValue;
        }
        else if (propertyName == "B") {
            this["B"] = propertyValue;
        }
        else if (propertyName == "CRP") {
            this["CRP"] = propertyValue;
        }
        else if (propertyName == "OC") {
            this["OC"] = propertyValue;
        }
        else if (propertyName == "PS") {
            this["PS"] = propertyValue;
        }
        else if (propertyName == "PSRP") {
            this["PSRP"] = propertyValue;
        }
        else if (propertyName == "FINS") {
            this["FINS"] = propertyValue;
        }
        else if (propertyName == "Rework") {
            this["Rework"] = propertyValue;
        }
        else if (propertyName == "RWINS") {
            this["RWINS"] = propertyValue;
        }
        else if (propertyName == "Shipping") {
            this["Shipping"] = propertyValue;
        }
        else if (propertyName == "SUM") {
            this["SUM"] = propertyValue;
        }
    };
    return cf_move_current;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabmovement/model/sum_movement.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SumMovementArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SumMovementCf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SumMovementCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SumMovementCellBoth; });
var SumMovementArray = /** @class */ (function () {
    function SumMovementArray() {
        this['Key'] = 'SUM';
        this['Initial Clean'] = '';
        this['1st ITO Dep'] = '';
        this['1st ITO Mask'] = '';
        this['1st ITO Etch'] = '';
        this['Gate Dep.'] = '';
        this['Gate Mask'] = '';
        this['Gate Etch'] = '';
        this['Gate Test Full'] = '';
        this['FGI Clean / Dep'] = '';
        this['Multi Dep Full'] = '';
        this['Active Mask'] = '';
        this['Active Etch'] = '';
        this['Active Strip'] = '';
        this['1st ITO Dep.'] = '';
        this['1st ITO Mask.'] = '';
        this['1st ITO Etch.'] = '';
        this['FGI Dep.'] = '';
        this['Multi Dep.'] = '';
        this['SD Dep.'] = '';
        this['SDT Mask'] = '';
        this['1st SD Etch '] = '';
        this['2nd SD Etch '] = '';
        this['SD Strip'] = '';
        this['SD Test Full'] = '';
        this['PVX Dep'] = '';
        this['VIA Mask'] = '';
        this['VIA Etch'] = '';
        this['2nd ITO Dep'] = '';
        this['2nd ITO Mask'] = '';
        this['2nd ITO Etch'] = '';
        this['Final AOI Inline full'] = '';
        this['Array Test'] = '';
        this['Final CUT  Repair'] = '';
        this['Final CVD Repair'] = '';
        this['Shipping'] = '';
        this['SUM'] = '';
    }
    SumMovementArray.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 'Initial Clean') {
            this['Initial Clean'] = propertyValue;
        }
        else if (indexact == '1st ITO Dep') {
            this['1st ITO Dep'] = propertyValue;
        }
        else if (indexact == '1st ITO Mask') {
            this['1st ITO Mask'] = propertyValue;
        }
        else if (indexact == '1st ITO Etch') {
            this['1st ITO Etch'] = propertyValue;
        }
        else if (indexact == 'Gate Dep.') {
            this['Gate Dep.'] = propertyValue;
        }
        else if (indexact == 'Gate Mask') {
            this['Gate Mask'] = propertyValue;
        }
        else if (indexact == 'Gate Etch') {
            this['Gate Etch'] = propertyValue;
        }
        else if (indexact == 'Gate Test Full') {
            this['Gate Test Full'] = propertyValue;
        }
        else if (indexact == 'FGI Clean / Dep') {
            this['FGI Clean / Dep'] = propertyValue;
        }
        else if (indexact == 'Multi Dep Full') {
            this['Multi Dep Full'] = propertyValue;
        }
        else if (indexact == 'Active Mask') {
            this['Active Mask'] = propertyValue;
        }
        else if (indexact == 'Active Etch') {
            this['Active Etch'] = propertyValue;
        }
        else if (indexact == 'Active Strip') {
            this['Active Strip'] = propertyValue;
        }
        else if (indexact == '1st ITO Dep.') {
            this['1st ITO Dep.'] = propertyValue;
        }
        else if (indexact == '1st ITO Mask.') {
            this['1st ITO Mask.'] = propertyValue;
        }
        else if (indexact == '1st ITO Etch.') {
            this['1st ITO Etch.'] = propertyValue;
        }
        else if (indexact == 'FGI Dep.') {
            this['FGI Dep.'] = propertyValue;
        }
        else if (indexact == 'Multi Dep.') {
            this['Multi Dep.'] = propertyValue;
        }
        else if (indexact == 'SD Dep.') {
            this['SD Dep.'] = propertyValue;
        }
        else if (indexact == 'SDT Mask') {
            this['SDT Mask'] = propertyValue;
        }
        else if (indexact == '1st SD Etch ') {
            this['1st SD Etch '] = propertyValue;
        }
        else if (indexact == '2nd SD Etch ') {
            this['2nd SD Etch '] = propertyValue;
        }
        else if (indexact == 'SD Strip') {
            this['SD Strip'] = propertyValue;
        }
        else if (indexact == 'SD Test Full') {
            this['SD Test Full'] = propertyValue;
        }
        else if (indexact == 'PVX Dep') {
            this['PVX Dep'] = propertyValue;
        }
        else if (indexact == 'VIA Mask') {
            this['VIA Mask'] = propertyValue;
        }
        else if (indexact == 'VIA Etch') {
            this['VIA Etch'] = propertyValue;
        }
        else if (indexact == '2nd ITO Dep') {
            this['2nd ITO Dep'] = propertyValue;
        }
        else if (indexact == '2nd ITO Mask') {
            this['2nd ITO Mask'] = propertyValue;
        }
        else if (indexact == '2nd ITO Etch') {
            this['2nd ITO Etch'] = propertyValue;
        }
        else if (indexact == 'Final AOI Inline full') {
            this['Final AOI Inline full'] = propertyValue;
        }
        else if (indexact == 'Array Test') {
            this['Array Test'] = propertyValue;
        }
        else if (indexact == 'Final CUT  Repair') {
            this['Final CUT  Repair'] = propertyValue;
        }
        else if (indexact == 'Final CVD Repair') {
            this['Final CVD Repair'] = propertyValue;
        }
        else if (indexact == 'Shipping') {
            this['Shipping'] = propertyValue;
        }
        else if (indexact == 'SUM') {
            this['SUM'] = propertyValue;
        }
    };
    return SumMovementArray;
}());

var SumMovementCf = /** @class */ (function () {
    function SumMovementCf() {
        this['Key'] = 'SUM';
        this["Unpack"] = "";
        this["ITO"] = "";
        this["BM"] = "";
        this["BMRP"] = "";
        this["R"] = "";
        this["G"] = "";
        this["B"] = "";
        this["CRP"] = "";
        this["OC"] = "";
        this["PS"] = "";
        this["PSRP"] = "";
        this["FINS"] = "";
        this["Rework"] = "";
        this["RWINS"] = "";
        this["Shipping"] = "";
        this['SUM'] = '';
    }
    SumMovementCf.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 'Unpack') {
            this["Unpack"] = propertyValue;
        }
        else if (indexact == 'ITO') {
            this["ITO"] = propertyValue;
        }
        else if (indexact == 'BM') {
            this["BM"] = propertyValue;
        }
        else if (indexact == 'BMRP') {
            this["BMRP"] = propertyValue;
        }
        else if (indexact == 'R') {
            this["R"] = propertyValue;
        }
        else if (indexact == 'G') {
            this["G"] = propertyValue;
        }
        else if (indexact == 'B') {
            this["B"] = propertyValue;
        }
        else if (indexact == 'CRP') {
            this["CRP"] = propertyValue;
        }
        else if (indexact == 'OC') {
            this["OC"] = propertyValue;
        }
        else if (indexact == 'PS') {
            this["PS"] = propertyValue;
        }
        else if (indexact == 'PSRP') {
            this["PSRP"] = propertyValue;
        }
        else if (indexact == 'FINS') {
            this["FINS"] = propertyValue;
        }
        else if (indexact == 'Rework') {
            this["Rework"] = propertyValue;
        }
        else if (indexact == 'RWINS') {
            this["RWINS"] = propertyValue;
        }
        else if (indexact == 'Shipping') {
            this["Shipping"] = propertyValue;
        }
        else if (indexact == 'SUM') {
            this["SUM"] = propertyValue;
        }
    };
    return SumMovementCf;
}());

var SumMovementCell = /** @class */ (function () {
    function SumMovementCell() {
        this['Key'] = 'SUM';
        this['PI'] = '';
        this['PIRW'] = '';
        this['Rub'] = '';
        this['Assy'] = '';
        this['Cut'] = '';
        this['CT'] = '';
        this['SUM'] = '';
    }
    SumMovementCell.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 'PI') {
            this['PI'] = propertyValue;
        }
        else if (indexact == 'PIRW') {
            this['PIRW'] = propertyValue;
        }
        else if (indexact == 'Rub') {
            this['Rub'] = propertyValue;
        }
        else if (indexact == 'Assy') {
            this['Assy'] = propertyValue;
        }
        else if (indexact == 'Cut') {
            this['Cut'] = propertyValue;
        }
        else if (indexact == 'CT') {
            this['CT'] = propertyValue;
        }
        else if (indexact == 'SUM') {
            this['SUM'] = propertyValue;
        }
    };
    return SumMovementCell;
}());

var SumMovementCellBoth = /** @class */ (function () {
    function SumMovementCellBoth() {
        this["Key"] = "SUM";
        this["CutP"] = "";
        this["CT"] = "";
        this["Trim"] = "";
        this["NmlRP"] = "";
        this["BurRP"] = "";
        this["Oven"] = "";
        this["PadRP"] = "";
        this["TapeRP"] = "";
        this["Retest"] = "";
        this["Sorter"] = "";
        this["Shipping"] = "";
        this["Packing"] = "";
        this["SUM"] = "";
    }
    SumMovementCellBoth.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == "CutP") {
            this["CutP"] = propertyValue;
        }
        else if (propertyName == "CT") {
            this["CT"] = propertyValue;
        }
        else if (propertyName == "Trim") {
            this["Trim"] = propertyValue;
        }
        else if (propertyName == "NmlRP") {
            this["NmlRP"] = propertyValue;
        }
        else if (propertyName == "BurRP") {
            this["BurRP"] = propertyValue;
        }
        else if (propertyName == "Oven") {
            this["Oven"] = propertyValue;
        }
        else if (propertyName == "PadRP") {
            this["PadRP"] = propertyValue;
        }
        else if (propertyName == "TapeRP") {
            this["TapeRP"] = propertyValue;
        }
        else if (propertyName == "Retest") {
            this["Retest"] = propertyValue;
        }
        else if (propertyName == "Sorter") {
            this["Sorter"] = propertyValue;
        }
        else if (propertyName == "Shipping") {
            this["Shipping"] = propertyValue;
        }
        else if (propertyName == "Packing") {
            this["Packing"] = propertyValue;
        }
        else if (propertyName == "SUM") {
            this["SUM"] = propertyValue;
        }
    };
    return SumMovementCellBoth;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabwip/fabwip.component.css":
/***/ (function(module, exports) {

module.exports = ".setTableHeader{\r\n    width: 60px !important;\r\n    height: 100px !important;\r\n    padding-left: 0% !important;\r\n    text-align: center !important;\r\n    font-size: 12px !important;\r\n   \r\n}\r\n.setTableCell{\r\n    margin-top: -10px !important;\r\n    padding-left: 30px !important;\r\n}\r\n.setTableCellBoth{\r\n    margin-top: -10px !important;\r\n    padding-left: 30px !important;\r\n    padding-right: 30px !important;\r\n}\r\n.setTableHeaderCell{\r\n    width: 35px !important;\r\n    height: 50px !important;\r\n    padding-left: 0% !important;\r\n    text-align: center !important;\r\n    font-size: 12px !important;\r\n   \r\n}\r\n.setTableHeaderCellBoth{\r\n    width: 55px !important;\r\n    height: 50px !important;\r\n    padding-left: 0% !important;\r\n    text-align: center !important;\r\n    font-size: 12px !important;\r\n   \r\n}\r\n.touming {\r\n    background-color:rgba(0,0,0,0.1)!important;\r\n    color: #F2F6FA!important;\r\n}\r\n.touming1 {\r\n    background-color:#121e38!important;\r\n    color: rgb(204, 213, 221) !important;\r\n}\r\nth {\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n    font-weight: initial !important;\r\n    padding: .625em .175em !important;\r\n}\r\n#operation:hover {\r\n    background-color: #314879 !important; \r\n    cursor: pointer;\r\n}\r\n.font {\r\n    font-weight: bold!important;\r\n    color: rgb(182, 182, 252)!important;\r\n}\r\n.title {\r\n    font-size:16px!important;\r\n    font-weight: bold!important;\r\n    color: rgb(182, 182, 252)!important;\r\n}\r\n.font2 {\r\n    color: rgb(182, 182, 252)!important;\r\n}\r\ntd {\r\n    font-size: 12px !important;\r\n    border: 1px solid #455e9c !important;\r\n    font-weight: initial !important;\r\n    padding: .625em .175em !important;\r\n    width:2.75%!important;\r\n    text-align:center!important;\r\n}\r\n.noborder {\r\n    border: 0px !important;\r\n}\r\n.setCFOption{\r\n    height: 600px !important;\r\n    padding-left: 2% !important;\r\n   \r\n}\r\n.setCFPH1Option{\r\n    margin-top: -10% !important;\r\n}\r\n.setCFPH2Option{\r\ncolor: white;\r\n}\r\n.setCellOption{\r\n    width: 45% !important;\r\n    height: 540px !important;\r\n    padding-left: 3% !important;\r\n}\r\n.setCellBothOption{\r\n    height: 540px !important;\r\n    margin-top: -1% !important;\r\n}\r\n.setClSearch{\r\n    position: absolute !important;\r\n    padding-left: 60% !important;\r\n   margin-top: -1% !important;\r\n    color: white !important;\r\n}\r\n#cellwipSearchB{\r\n   margin-left: 95% !important;\r\n   margin-top: -15% !important;\r\n}\r\n#cellwipSearchBtn{\r\n    background-color: rgba(228, 230, 236, 0) !important;\r\n}\r\n"

/***/ }),

/***/ "./src/app/toumingdisplan/fabwip/fabwip.component.html":
/***/ (function(module, exports) {

module.exports = "\n\n\n<div class=\"ui-g\">\n  <div class=\"ui-g-12\" style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n    <div style=\"width:23%;text-align:center\">\n      <h3 style=\"color: #F2F6FA;margin-top: 30px;\">{{title_yiji}}</h3>\n    </div>\n    <!-- <p style=\"font-size: 8px;position: absolute;top:26%;right:7%;color: #F2F6FA\">{{nowTime | date:\"yyyy-MM-dd\n      HH:mm:ss\"}}</p> -->\n  </div>\n  <!-- echart 图 部分  在这里画了array_wip的图-->\n  <div class=\"ui-g-12\" style=\"height:100%;background-image: url('assets/bg3_02.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n    <div *ngIf=\"wipTableIsShow\">\n      <!-- 下面是右上角的切换的按钮 -->\n      <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n        <button pButton label='AR' (click)=\"changeToArrayWip()\"></button>\n        <button pButton label='CF' (click)=\"changeToCfWip()\"></button>\n        <button pButton label='CL' (click)=\"changeToCellWip()\"></button>\n        <button pButton label='当前' (click)=\"showCurrentWip()\"></button>\n      </div>\n      <!-- 下面是右上角的 每日 wip的总数的展示 -->\n      <div *ngIf=\"true\" class=\"ui-g-2\" style=\"position:absolute;top:33%;right:5%;text-align: right;color: #F2F6FA;font-weight: bold\">\n        <div *ngFor=\"let sumnum of data_date_before_sum_str\">{{sumnum}}</div>\n      </div>\n      <div class=\"ui-g-12\">\n      <!-- 下面是 array的基本的柱状图-->\n      <div *ngIf=\"title_yiji == 'Array WIP'\" echarts [options]=\"chartOption_wip\" class=\"demo-chart\" [ngStyle]=\"{'height':'680px'}\" (chartClick)=\"onClickChart($event)\" class=\"ui-g-12\"></div>\n      <!-- 下面是 cf 的基本的柱状图-->\n      <div *ngIf=\"title_yiji == 'CF WIP'\" echarts [options]=\"chartOption_wip\" class=\"demo-chart\" [ngStyle]=\"{'height':'680px'}\" (chartClick)=\"onClickChart($event)\" [ngClass]=\"{setCFOption:true}\" class=\"ui-g-6\"></div>  \n      <!-- 下面是 cell 的基本的柱状图-->\n      <div *ngIf=\"title_yiji == 'Cell WIP'\" echarts [options]=\"chartOption_wip\" class=\"demo-chart\" [ngStyle]=\"{'height':'680px'}\" [ngClass]=\"{setCellOption:isCellBoth}\" class=\"ui-g-6\"></div>    \n   \n    \n    <div class=\"ui-g-6\">\n      <!-- 下面是 cf PH1 的柱状图-->\n      <div *ngIf=\"isCfPH\" echarts [options]=\"chartOption_wip_cf_PH1\" class=\"demo-chart\" [ngStyle]=\"{'height':'251px'}\" [ngClass]=\"{setCFPH1Option:isCfPH}\" class=\"ui-g-11\" ></div>\n      <!-- 下面是 cf PH2 的柱状图-->\n      <div *ngIf=\"isCfPH\"echarts [options]=\"chartOption_wip_cf_PH2\" class=\"demo-chart\" [ngStyle]=\"{'height':'420px'}\" [ngClass]=\"{setCFPH2Option:isCfPH}\" class=\"ui-g-11\"></div>\n    </div>\n    \n    <!-- 下面是 cell 可以进行筛选 的柱状图-->\n    <div *ngIf=\"isCellBoth\" echarts [options]=\"chartOption_wip_cl_both\" class=\"demo-chart\"  [ngClass]=\"{setCellBothOption:isCellBoth}\" class=\"ui-g-6\"></div>\n  </div>\n  \n  </div>  \n    <!-- 多选下拉框 cell 的下拉框 PCS\tPCL -->\n    <div *ngIf=\"isCellBoth\" [ngClass]=\"{setClSearch:true}\">\n            <strong>请选择 : &nbsp;&nbsp;</strong>\n            <p-multiSelect [options]=\"LineName\" [(ngModel)]=\"selectedNames\" [panelStyle]=\"{minWidth:'10em'}\"\n                scrollHeight=\"200px\">\n                <!-- 上面这个地方是设置被选中的内容-->\n                <ng-template let-values pTemplate=\"selectedItems\">\n                    <div *ngFor=\"let val of values\" class=\"ui-multiselected-item-token ui-corner-all\">\n                        <span>{{val}}</span>\n                    </div>\n                    <span *ngIf=\"!value || value.length === 0\" class=\"ui-multiselected-empty-token ui-corner-all\">Code</span>\n                </ng-template>\n                <!--下面这个地方是现实下拉列表的内容-->\n                <ng-template let-linename pTemplate=\"item\">\n                    <div style=\"font-size:14px;float:right;margin-top:4px\">{{linename.value}}</div>\n                </ng-template>\n            </p-multiSelect>\n            &nbsp;&nbsp;&nbsp;&nbsp;\n            <div  id='cellwipSearchB'>\n              <button id='cellwipSearchBtn' pButton icon='fa fa-search' iconPos='left' label=' ' (click)=\"searchCell()\"></button>\n            </div>\n           \n    </div>\n    <!-- 多选下拉框 多选下拉框 cell 的下拉框 PCS\tPCL  end -->\n    <!-- end echart 图 部分结束 -->\n\n    <!-- current wip 二级 表格 第一个表格 是array　cf 的，第二个表格时cell基本表格，第三个表格时cell分PCL/PCS的表格 -->\n    <div *ngIf=\"CurrentWipTableIsShow\" #mytable style=\"margin-bottom: 1%\">\n\n      <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n        <button pButton (click)=\"closeTable()\" label=\"返回\"></button>\n      </div>\n\n      <div style=\"margin-left: 66px;margin-right: 58px;\">\n        <p-table id=\"currentwip\" [columns]=\"data_array_current_cols\" [value]=\"data_array_current\" [scrollable]=\"true\" [frozenColumns]=\"fronzecols\"\n          frozenWidth=\"120px\" scrollHeight=\"421px\" dataKey=\"Key\" #chartGride >\n          <ng-template pTemplate=\"colgroup\" let-columns>\n            <colgroup>\n              <col *ngFor=\"let col of columns\" style=\"width:120px\">\n            </colgroup>\n          </ng-template>\n          <ng-template pTemplate=\"header\" let-columns class=\"noborder\">\n            <tr>\n              <th *ngFor=\"let col of columns\" [ngClass]=\"{setTableHeader : true}\" id=\"operation\" class=\"touming1\"\n                (click)=\"toThirdTable($event)\">\n                {{col.header}}\n              </th>\n            </tr>\n          </ng-template>\n\n          <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let col of columns;\" class=\"touming1\">\n                {{rowData[col.field]}}\n              </td>\n            </tr>\n          </ng-template>\n        </p-table>\n      </div>\n      <!-- end data gride area -->\n    </div>\n    <div class=\"ui-g-12\">\n    <div *ngIf=\"CurrentWipTableIsShowCL\" #mytable class=\"ui-g-5\">\n\n      <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n        <button pButton (click)=\"closeTable()\" label=\"返回\"></button>\n      </div>\n\n      <div [ngClass]=\"{setTableCell:true}\">\n        <p-table id=\"currentwip\" [columns]=\"data_array_current_cols\" [value]=\"data_array_current\" [scrollable]=\"true\" scrollHeight=\"404px\"\n          dataKey=\"Key\" #chartGride>\n          <ng-template pTemplate=\"header\" let-columns class=\"noborder\">\n            <tr>\n              <th *ngFor=\"let col of columns\" [ngClass]=\"{setTableHeaderCell : true}\" id=\"operation\" class=\"touming1\">\n                {{col.header}}\n              </th>\n            </tr>\n          </ng-template>\n\n          <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let col of columns;\" class=\"touming1\">\n                {{rowData[col.field]}}\n              </td>\n            </tr>\n          </ng-template>\n        </p-table>\n      </div>\n      <!-- end data gride area -->\n    </div>\n    <div *ngIf=\"CurrentWipTableIsShowCL\" #mytable class=\"ui-g-7\">\n      <div [ngClass]=\"{setTableCellBoth:true}\">\n        <p-table id=\"currentwip\" [columns]=\"data_array_current_cols_cell_both\" [value]=\"data_array_current_cell_both\" [scrollable]=\"true\" scrollHeight=\"404px\"\n          dataKey=\"Key\" [frozenColumns]=\"fronzecols\" frozenWidth=\"90px\" #chartGride>\n          <ng-template pTemplate=\"colgroup\" let-columns>\n            <colgroup>\n              <col *ngFor=\"let col of columns\" style=\"width:90px\">\n            </colgroup>\n          </ng-template>\n          <ng-template pTemplate=\"header\" let-columns class=\"noborder\">\n            <tr>\n              <th *ngFor=\"let col of columns\" [ngClass]=\"{setTableHeaderCellBoth : true}\" id=\"operation\" class=\"touming1\">\n                {{col.header}}\n              </th>\n            </tr>\n          </ng-template>\n\n          <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let col of columns;\" class=\"touming1\">\n                {{rowData[col.field]}}\n              </td>\n            </tr>\n          </ng-template>\n        </p-table>\n      </div>\n      <!-- end data gride area -->\n    </div>\n  </div>\n    <!-- current wip 二级 表格 end -->\n\n    <!-- 站点 三级表格 -->\n    <div style=\"margin-left: 5%;margin-right: 5%;\" *ngIf=\"CurrentWipStationTableIsShow\" #mytable>\n      <div style=\"position: absolute;top:26%;right:7%;color: #F2F6FA\">\n        <button pButton type=\"button\" (click)=\"closeTableSecond()\" label=\"返回\"></button>\n      </div>\n      <div class=\"ui-panel-content\">\n        <!-- if you use selection, you must set datakey -->\n        <p-table #chartGride [autoLayout]=\"false\">\n          <ng-template pTemplate=\"header\">\n            <tr>\n              <th [attr.colspan]=\"lengthhead\" class=\"touming title\">{{clickName}}</th>\n            </tr>\n            <tr>\n              <th [attr.rowspan]=\"rowSpan\" class=\"touming font\">{{timestrOnSecondTable}}</th>\n            </tr>\n            <tr>\n              <th class=\"touming font\">{{thirdName}}</th>\n              <th *ngFor=\"let eqpid of eqp_id\" class=\"touming font2\">{{eqpid}}</th>\n            </tr>\n            <tr *ngIf=\"thirdStateIsShow\">\n              <th class=\"touming font\">状态</th>\n              <th *ngFor=\"let eqpstate of eqp_state\" class=\"touming font2\">{{eqpstate}}</th>\n            </tr>\n            <tr>\n              <th [attr.rowspan]=\"modeltypeNumber\" class=\"touming font\">型号</th>\n            </tr>\n            <tr *ngFor=\"let modeltypewip of stationWipMessage\">\n              <!-- {{modeltypewip.glassqtys}} -->\n              <th class=\"touming font\">{{modeltypewip.modeltype}}</th>\n              <th *ngFor=\"let wipnumber of modeltypewip.glassqtys\" class=\"touming\">{{wipnumber}}</th>\n            </tr>\n          </ng-template>\n        </p-table>\n      </div>\n    </div>\n    <!-- 站点 三级表格 end -->\n  </div>\n  <div class=\"ui-g-12\" style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\"></div>\n</div>"

/***/ }),

/***/ "./src/app/toumingdisplan/fabwip/fabwip.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FabwipComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__ = __webpack_require__("./src/app/outstandingcase/transparent-display/b4-wip/model/array_wip.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__report_ui_service_report_ui_common_service__ = __webpack_require__("./src/app/report-ui/service/report-ui-common.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_service_fullscreen_service__ = __webpack_require__("./src/app/common/service/fullscreen.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__outstandingcase_transparent_display_b4_wip_model_cf_wip__ = __webpack_require__("./src/app/outstandingcase/transparent-display/b4-wip/model/cf_wip.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__outstandingcase_transparent_display_b4_wip_model_cell_wip__ = __webpack_require__("./src/app/outstandingcase/transparent-display/b4-wip/model/cell_wip.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__outstandingcase_transparent_display_b4_wip_model_sum_wip__ = __webpack_require__("./src/app/outstandingcase/transparent-display/b4-wip/model/sum_wip.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_app_report_ui_type1_model_echartSet__ = __webpack_require__("./src/app/report-ui/type1/model/echartSet.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__model_sum_wip__ = __webpack_require__("./src/app/toumingdisplan/fabwip/model/sum_wip.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__model_cell_wip__ = __webpack_require__("./src/app/toumingdisplan/fabwip/model/cell_wip.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var FabwipComponent = /** @class */ (function () {
    function FabwipComponent(apiService, reportComnService, fullscreen) {
        this.apiService = apiService;
        this.reportComnService = reportComnService;
        this.fullscreen = fullscreen;
        this.CurrentWipTableIsShowCL = false;
        this.LineName = [
            { label: 'PCS', value: 'PCS' },
            { label: 'PCL', value: 'PCL' }
        ];
        this.selectedNames = []; // 用来保存被选中的选项的
        //data_array_wip: array_wip[] = []; // 这个图标中的数据，从data_array_wip.json文件中读出来
        this.wip_operation = []; // 用来保存站点的数组：也就是图表中的X轴的标志
        this.data_date_before_2 = []; // 下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_1 = [];
        this.data_date_before_0 = [];
        this.data_date_current = [];
        this.data_date_move = [];
        this.data_date_move_current = [];
        // 下面的这个用来保存上面的
        this.dataArray = [this.data_date_before_2, this.data_date_before_1, this.data_date_before_0,
            this.data_date_current, this.data_date_move, this.data_date_move_current];
        // 下面是对三天的数据求和的变量
        this.data_date_before_2_sum = 0; // 下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_1_sum = 0;
        this.data_date_before_0_sum = 0;
        this.data_date_before_sum = [this.data_date_before_2_sum, this.data_date_before_1_sum, this.data_date_before_0_sum];
        this.data_date_before_sum_str = []; // 例子 ： 12日：185645
        // 下面的是legend的显示
        this.legends = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends = []; //多个x轴的标签
        this.isCfPH = false; // 这个是控制cf两条产线的数据是否显示的
        this.wip_operation_cf_PH1 = []; // 用来保存CF line ph1 站点的数组：也就是图表中的X轴的标志 ，与大图的是一样的
        this.data_date_before_2_cf_PH1 = []; // 下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_1_cf_PH1 = [];
        this.data_date_before_0_cf_PH1 = [];
        this.data_date_current_cf_PH1 = [];
        this.data_date_move_cf_PH1 = [];
        this.data_date_move_current_cf_PH1 = [];
        // 下面的这个用来保存上面的
        this.dataArray_cf_PH1 = [this.data_date_before_2_cf_PH1, this.data_date_before_1_cf_PH1, this.data_date_before_0_cf_PH1,
            this.data_date_current_cf_PH1, this.data_date_move_cf_PH1, this.data_date_move_current_cf_PH1];
        // 下面的是legend的显示
        this.legends_cf_PH1 = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends_cf_PH1 = []; //多个x轴的标签
        this.wip_operation_cf_PH2 = []; // 用来保存CF line ph1 站点的数组：也就是图表中的X轴的标志 ，与大图的是一样的
        this.data_date_before_2_cf_PH2 = []; // 下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_1_cf_PH2 = [];
        this.data_date_before_0_cf_PH2 = [];
        this.data_date_current_cf_PH2 = [];
        this.data_date_move_cf_PH2 = [];
        this.data_date_move_current_cf_PH2 = [];
        // 下面的这个用来保存上面的
        this.dataArray_cf_PH2 = [this.data_date_before_2_cf_PH2, this.data_date_before_1_cf_PH2, this.data_date_before_0_cf_PH2,
            this.data_date_current_cf_PH2, this.data_date_move_cf_PH2, this.data_date_move_current_cf_PH2];
        // 下面的是legend的显示
        this.legends_cf_PH2 = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends_cf_PH2 = []; //多个x轴的标签
        this.isCellBoth = false; // 这个是控制cell可筛选操作的柱状图的显示
        this.wip_operation_cell_both = []; // 用来保存cell可筛选站点的数组：也就是图表中的X轴的标志 ，与大图的是一样的
        this.data_date_before_2_cell_both = []; // 下面这三个数组用来保存从数据库读出来的数据，三天的，每天一个数组来保存
        this.data_date_before_1_cell_both = [];
        this.data_date_before_0_cell_both = [];
        this.data_date_current_cell_both = [];
        this.data_date_move_cell_both = [];
        this.data_date_move_current_cell_both = [];
        // 下面的这个用来保存上面的
        this.dataArray_cell_both = [this.data_date_before_2_cell_both, this.data_date_before_1_cell_both, this.data_date_before_0_cell_both,
            this.data_date_current_cell_both, this.data_date_move_cell_both, this.data_date_move_current_cell_both];
        // 下面的是legend的显示
        this.legends_cell_both = []; //定义一个用来存放legends 的数组，这个需要根据当前刷新的时间来进行创建
        this.xAxisLegends_cell_both = []; //多个x轴的标签
        this.datatime = null; // 定义一个日期类:这个日期的对象是与一级视图，二级视图通用的
        // 这个日期，在每次刷新，切换的时候，都需要重新new一个当前对象
        // 其他的时候，不需要重新new，
        // mydatatimestr : string =  this.getTimeStr();//字符串的时间：用于当前wip的操作
        this.timestrOnSecondTable = ''; // 临时用在二级视图上的时间
        /********上面的是自己定义的echart图的内容end*************** */
        /********下面是用来显示一级视图的当前array_wip的表格的内容***** */
        this.wipTableIsShow = true; //控制一级柱状图显示
        this.CurrentWipTableIsShow = false; //控制一级实时wip表格显示
        this.CurrentWipStationTableIsShow = false; //控制二级站点wip表格显示的
        this.CurrentWipStationTableIsShowCT = false;
        //current_time_key:string = this.datatimestr;//先把当前的时间放进来，目前还没有用到
        this.data_array_current = []; //这个用来保存每一行的对象的数组
        this.data_key = []; //这个用来保存modeltype:也就是每一个对象的key的值
        this.data_sum = []; //这个用来计算每一列的值得操作，需要与wip_operation,和data_date_current两个数组进行结合操作！
        this.data_array_current_cols = [];
        this.fronzecols = [
            { field: 'Key', header: '型号' }
        ];
        //data_array_current_keys: string[] = [];//用来分离获取到的数据结构 key+数组 ，没有用了吧
        // data_array_current_nums: number[] = [];//用来分离获取到的数据结构 key+数组
        this.data_array_current_cell_both = []; //这个用来保存cell both 每一行的对象的数组
        this.data_key_cell_both = []; //这个用来保存 cell both  的 modeltype:也就是每一个对象的key的值
        this.data_sum_cell_both = []; //这个用来计算cell both  每一列的值得操作，需要与wip_operation,和data_date_current两个数组进行结合操作！
        this.data_array_current_cols_cell_both = []; //这个应该是个动态创建的cell both的列的名称的，需要根据实际的情况进行创建
        this.isShowTable = false; //这个是控制整个表的显示 的
        this.eqp_id = []; //用于保存设备id的数组
        this.eqp_state = []; //用于保存设备状态的数组
        this.modeltype = []; //用于保存型号的数组
        this.stationWipMessage = []; //用于保存一行一行的数据
        this.rowSpan = 3; //这个用来控制表格所占的行的数量
        this.modeltypeNumber = 0; //这个用来获取型号的数量
        this.thirdName = '设备'; //控制设备行的名称，cell的时候不叫设备，叫操作名称
        this.thirdStateIsShow = true; // 控制设备状态那一行是不是显示，当cell 的时候是不显示的
        /*********************上面是用来画二级表格的内容************ */
        this.title_yiji = "Array WIP";
        //长度
        this.lengthhead = 0;
    }
    FabwipComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.wipTableIsShow = true; // 初始化就显示柱状图
        this.datatime = new Date(); // 初始化时间
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        //1.这里是从后台数据库里面读取出来的数据:整体上面的数据
        var url_array_wip_home = '/array/wip';
        this.apiService.getAll(url_array_wip_home).subscribe(function (res) {
            _this.getData(res); //调用这个方法然后就得到了所有的数据信息，并且将上面的内容进行了初始化
            _this.createLegend(); //创建legend的信息
            _this.getRowSumDate(); //求和
            _this.getRowSumStr(); //创建信息
            _this.set_WIP_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.wip_operation, _this.title_yiji, 90, datatimestr);
        }, function (error) { console.log("myerror " + error); });
    };
    //这个是点击柱状图的响应事件:需要向后太传递一个参数
    //点击柱状图的时候，获取数据并且保存下来
    FabwipComponent.prototype.onClickChart = function (event) {
        var _this = this;
        this.wipTableIsShow = false;
        this.CurrentWipTableIsShow = false;
        this.CurrentWipStationTableIsShow = true; //当点击的时候显示二级视图
        this.isCfPH = false;
        var datatime = this.datatime; //与一级的柱状图使用同一个时间操作
        var hourtimekeystr = this.getTimeSameToEchart(datatime);
        this.timestrOnSecondTable = hourtimekeystr.substr(4, 6); //暂时传进到表里面的东西
        this.clickName = event.name; //获取到事件的名称
        //1.创建要传递的参数
        var option = {
            params: {
                hourtimekey: hourtimekeystr,
                operationdesc: this.clickName
            }
        };
        //2.调用get方法，进行参数传递:根据不同的array  or  cf  进行相关的数据获取或操作
        var url_second_view = '/wipcurrentstation';
        if (this.title_yiji == 'Array WIP') {
            this.rowSpan = 3;
            this.thirdName = '设备';
            this.thirdStateIsShow = true;
            url_second_view = '/array' + url_second_view;
        }
        else if (this.title_yiji == 'CF WIP') {
            this.rowSpan = 3;
            this.thirdName = '设备';
            this.thirdStateIsShow = true;
            url_second_view = '/cf' + url_second_view;
        }
        else if (this.title_yiji == 'Cell WIP') {
            this.rowSpan = 2;
            this.thirdName = '站点名称';
            this.thirdStateIsShow = false;
            url_second_view = '/cell' + url_second_view;
        }
        else {
            //什么都不做
        }
        this.apiService.get(url_second_view, option).subscribe(function (res) {
            _this.getStationMessage(res); //格式化数据
            _this.modeltypeNumber = _this.modeltype.length + 1; //获取信号的数量，用于表格的设置
            _this.lengthhead = 2 + _this.eqp_id.length;
        }, function (error) { console.log(error); });
    };
    //下面这个是点击表格的表头，显示第三个视图
    FabwipComponent.prototype.toThirdTable = function (event) {
        var _this = this;
        var datatime = this.datatime; //与一级的柱状图使用同一个时间操作
        var hourtimekeystr = this.getTimeSameToEchart(datatime);
        this.timestrOnSecondTable = hourtimekeystr.substr(4, 6); //暂时传进到表里面的东西
        this.clickName = event.target.innerText.trim(); // 获取到事件的名称,这个地方
        if (!((this.clickName === '型号') || (this.clickName === 'SUM'))) {
            this.CurrentWipTableIsShow = false;
            this.CurrentWipTableIsShowCL = false;
            this.wipTableIsShow = false;
            //1.创建要传递的参数
            var option = {
                params: {
                    hourtimekey: hourtimekeystr,
                    operationdesc: this.clickName
                }
            };
            // 2.调用get方法，进行参数传递:根据不同的array  or  cf  进行相关的数据获取或操作
            var url_second_view = '/wipcurrentstation';
            if (this.title_yiji == 'Array WIP') {
                this.rowSpan = 3;
                this.thirdName = '设备';
                this.thirdStateIsShow = true;
                url_second_view = '/array' + url_second_view;
            }
            else if (this.title_yiji == 'CF WIP') {
                this.rowSpan = 3;
                this.thirdName = '设备';
                this.thirdStateIsShow = true;
                url_second_view = '/cf' + url_second_view;
            }
            else if (this.title_yiji == 'Cell WIP') {
                this.rowSpan = 2; // 这个地方需要改一下行的数量
                this.thirdName = '站点名称';
                this.thirdStateIsShow = false;
                url_second_view = '/cell' + url_second_view;
            }
            else {
                url_second_view = '';
            }
            this.apiService.get(url_second_view, option).subscribe(function (res) {
                _this.getStationMessage(res); //格式化数据 
                console.log(res);
                console.log(_this.eqp_id);
                _this.modeltypeNumber = _this.modeltype.length + 1; //获取信号的数量，用于表格的设置
                _this.lengthhead = 2 + _this.eqp_id.length;
            }, function (error) { console.log(error); });
            this.CurrentWipStationTableIsShow = true;
            //当点击的时候显示二级视图
        }
    };
    //下面是关闭一级视图的按钮
    FabwipComponent.prototype.closeTable = function () {
        this.CurrentWipTableIsShow = false;
        this.CurrentWipTableIsShowCL = false;
        this.wipTableIsShow = true;
        if (this.title_yiji == 'CF WIP') {
            this.isCfPH = true;
        }
        if (this.title_yiji == 'Cell WIP') {
            this.isCellBoth = true;
        }
    };
    //下面是关闭二级站点视图的按钮
    FabwipComponent.prototype.closeTableSecond = function () {
        this.CurrentWipStationTableIsShow = false; //关闭掉站点的视图
        this.wipTableIsShow = true;
        if (this.title_yiji == 'CF WIP') {
            this.isCfPH = true; // cf 的时候需要特殊处理
        }
    };
    //下面是切换到array_wip的方法 ok
    FabwipComponent.prototype.changeToArrayWip = function () {
        var _this = this;
        //设置不显示实时的wip表,只是西安市柱状图
        this.CurrentWipTableIsShow = false;
        this.CurrentWipTableIsShowCL = false;
        this.CurrentWipStationTableIsShow = false;
        this.isCfPH = false;
        this.isCellBoth = false;
        //设置标题下面的时间
        this.datatime = new Date(); //重新获取时间，重新画表
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        var time = this.getTimeSameToEchart(this.datatime);
        //设置标题，这个是有用的
        this.title_yiji = "Array WIP";
        //1.下面是设置array_wip的数据图
        var url_array_wip = '/array/wip'; //从文件中读取json格式的数据
        this.apiService.getAll(url_array_wip).subscribe(//通过订阅的方式，获取到数据并且保存到data变量中
        function (res) {
            _this.getData(res);
            // make chart
            _this.createLegend();
            _this.getRowSumDate(); //求和
            _this.getRowSumStr(); //创建信息
            _this.set_WIP_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.wip_operation, _this.title_yiji, 90, datatimestr); //调用setEchart方法，将数据传入进去，生成图表
        }, function (error) { console.log(error); });
    };
    //下面是切换到cf_wip的方法:等着数据结构的到来
    FabwipComponent.prototype.changeToCfWip = function () {
        var _this = this;
        this.CurrentWipTableIsShow = false;
        this.CurrentWipTableIsShowCL = false;
        this.CurrentWipStationTableIsShow = false;
        this.isCfPH = true;
        this.isCellBoth = false;
        this.datatime = new Date(); //重新获取时间对象
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        //把原来的数组全部都清空掉
        this.data_array_current_cols = [];
        //1.画柱状图
        this.title_yiji = "CF WIP";
        var url_cf_wip = '/cf/wip';
        this.apiService.getAll(url_cf_wip).subscribe(function (res) {
            _this.getData(res);
            _this.createLegend();
            _this.getRowSumDate(); //求和
            _this.getRowSumStr(); //创建信息
            _this.set_WIP_CF_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.wip_operation, _this.title_yiji, 90, datatimestr, 160, 25);
        }, function (error) { console.log(error); });
        var url_cf_wip_PH1 = '/cf/wipPH1';
        this.apiService.getAll(url_cf_wip_PH1).subscribe(function (res) {
            _this.getDataCfPH1(res);
            _this.createLegendCfPH1();
            _this.set_WIP_cf_PH1_Echart(_this.legends_cf_PH1, _this.xAxisLegends_cf_PH1, _this.dataArray_cf_PH1, _this.wip_operation_cf_PH1, _this.title_yiji, 0, datatimestr, 65, 25);
        }, function (error) { console.log(error); });
        setTimeout(function () {
            var url_cf_wip_PH2 = '/cf/wipPH2';
            _this.apiService.getAll(url_cf_wip_PH2).subscribe(function (res) {
                _this.getDataCfPH2(res);
                console.log(_this.data_date_move_cf_PH2);
                _this.createLegendCfPH2();
                _this.set_WIP_cf_PH2_Echart(_this.legends_cf_PH2, _this.xAxisLegends_cf_PH2, _this.dataArray_cf_PH1, _this.dataArray_cf_PH2, _this.wip_operation_cf_PH2, _this.title_yiji, 0, datatimestr, 65, 25);
            }, function (error) { console.log(error); });
        }, 0);
    };
    // 下面是切换到cell_wip的方法
    FabwipComponent.prototype.changeToCellWip = function () {
        var _this = this;
        this.CurrentWipTableIsShow = false;
        this.CurrentWipStationTableIsShow = false;
        this.isCfPH = false; // 关闭 cf 的两个小的柱状图
        this.isCellBoth = true; // 显示 cell 的 可以进行筛选的柱状图
        this.datatime = new Date(); //重新获取时间对象
        var datatimestr = this.getTimeStr(this.datatime); //这个时间是在设置一级视图的时候使用的
        //1.先把array的表格隐藏掉
        this.CurrentWipTableIsShow = false;
        this.CurrentWipTableIsShowCL = false;
        //把原来的数组全部都清空掉
        this.data_array_current_cols = [];
        //1.画柱状图
        this.title_yiji = "Cell WIP";
        var url_cell_wip = '/cell/wip';
        this.apiService.getAll(url_cell_wip).subscribe(function (res) {
            _this.getData(res);
            _this.createLegend();
            _this.getRowSumDate(); //求和
            _this.getRowSumStr(); //创建信息
            _this.set_WIP_CL_Echart(_this.legends, _this.xAxisLegends, _this.dataArray, _this.wip_operation, _this.title_yiji, 0, datatimestr, 85, 25);
        }, function (error) { console.log(error); });
        var url_cell_both_wip = '/cell/wipboth';
        this.apiService.getAll(url_cell_both_wip).subscribe(function (res) {
            _this.getDataCellBoth(res);
            _this.createLegendCellBoth();
            console.log(_this.wip_operation_cell_both);
            _this.set_WIP_CL_Both_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.wip_operation_cell_both, _this.title_yiji, 90, datatimestr, 85, 25);
        }, function (error) { console.log(error); });
    };
    // 下面是 cell 第二个柱状图 的查询操作
    FabwipComponent.prototype.searchCell = function () {
        var _this = this;
        var datatimestr = 'aaa'; //这个 字符串是没有用的
        var selectedNumbers = this.selectedNames.length;
        if (selectedNumbers > 0) {
            if (selectedNumbers == 1) {
                var selectname = this.selectedNames[0]; // 得到选中的名字
                if (selectname == 'PCS') {
                    var url_cell_PCS_wip = '/cell/wipPCS';
                    this.apiService.getAll(url_cell_PCS_wip).subscribe(function (res) {
                        _this.getDataCellOne(res);
                        _this.createLegendCellBoth();
                        _this.set_WIP_CL_Both_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.wip_operation_cell_both, _this.title_yiji, 0, datatimestr, 85, 25);
                    }, function (error) { console.log(error); });
                }
                else if (selectname == 'PCL') {
                    var url_cell_PCL_wip = '/cell/wipPCL';
                    this.apiService.getAll(url_cell_PCL_wip).subscribe(function (res) {
                        _this.getDataCellOne(res);
                        _this.createLegendCellBoth();
                        _this.set_WIP_CL_Both_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.wip_operation_cell_both, _this.title_yiji, 0, datatimestr, 85, 25);
                    }, function (error) { console.log(error); });
                }
            }
            else if (selectedNumbers == 2) {
                var url_cell_both_wip = '/cell/wipboth';
                this.apiService.getAll(url_cell_both_wip).subscribe(function (res) {
                    _this.getDataCellBoth(res);
                    _this.createLegendCellBoth();
                    _this.set_WIP_CL_Both_Echart(_this.legends_cell_both, _this.xAxisLegends_cell_both, _this.dataArray_cell_both, _this.wip_operation_cell_both, _this.title_yiji, 0, datatimestr, 85, 25);
                }, function (error) { console.log(error); });
            }
        }
    };
    //下面是显示当前wip数量的内容，根据当前表格是array的还是cf的进行操作
    FabwipComponent.prototype.showCurrentWip = function () {
        var _this = this;
        //1.先把一级柱状图给隐藏掉
        this.wipTableIsShow = false;
        this.isCfPH = false;
        //this.isCfPH = false;
        this.isCellBoth = false;
        //2.如果站点的表格开着的话，也一并关掉
        this.CurrentWipStationTableIsShow = false;
        //2.把保存数据的数组清空掉
        this.data_array_current_cols = [];
        this.data_array_current = [];
        //3.创建参数：关键是时间的
        var datatime = this.datatime; //与一级的柱状图使用同一个时间操作
        var hourtimekeystr = this.getTimeSameToEchart(datatime);
        //this.timestrOnSecondTable = hourtimekeystr;//暂时传进到表里面的东西
        //1.创建要传递的参数
        var option = {
            params: {
                hourtimekey: hourtimekeystr
            }
        };
        if (this.title_yiji == 'Array WIP') {
            this.CurrentWipTableIsShow = false; // 先把其去掉，当数据准备好之后再展示出来
            var url_array_wip_current_home = '/array/currentwip';
            this.apiService.get(url_array_wip_current_home, option).subscribe(function (res) {
                _this.getDataWipCurrent(res, 'ARRAY');
                _this.getSumDate('Array'); //获取当前的Sum的事情
                _this.data_array_current_cols = [];
                _this.create_cols();
                _this.CurrentWipTableIsShow = true; //最后将表格展示出来
            }, function (error) { console.log(error); });
        }
        else if (this.title_yiji == 'CF WIP') {
            this.CurrentWipTableIsShow = false; //先把其去掉，当数据准备好之后再展示出来
            //this.data_array_current = [];//每次用之前都先把数据清空，然后再获取数据
            // console.log("change to array : " + this.data_array_current.length);
            var url_cf_wip_current = '/cf/currentwip';
            this.apiService.get(url_cf_wip_current, option).subscribe(function (res) {
                _this.getDataWipCurrent(res, 'CF');
                _this.getSumDate('Cf');
                _this.data_array_current_cols = [];
                _this.create_cols();
                _this.CurrentWipTableIsShow = true;
            }, function (error) { console.log(error); });
        }
        else if (this.title_yiji == 'Cell WIP') {
            //1.基本表的数据获取
            var url_cell_wip_current = '/cell/currentwip';
            this.apiService.get(url_cell_wip_current, option).subscribe(function (res) {
                _this.getDataWipCurrent(res, 'CELL');
                _this.getSumDate('Cell');
                _this.data_array_current_cols = [{ field: 'Key', header: '型号' }];
                _this.create_cols();
                //console.log(this.data_array_current_cols);
                _this.CurrentWipTableIsShowCL = true;
            }, function (error) { console.log(error); });
            //2.第二个表格的数据获取
            var url_cell_wip_current_cell_both = '/cell/currentwipboth';
            this.apiService.get(url_cell_wip_current_cell_both, option).subscribe(function (res) {
                _this.getDataWipCurrentCellBoth(res);
                //console.log(this.data_key_cell_both);
                //console.log(this.data_array_current_cell_both);
                _this.getSumDateCellBoth();
                //this.data_array_current_cols_cell_both = [{ field: 'Key', header: '型号' }];
                _this.create_cols_cell_coth();
                _this.CurrentWipTableIsShowCL = true;
            }, function (error) { console.log(error); });
        }
    };
    // echart setting function
    FabwipComponent.prototype.set_WIP_Echart = function (legendname, xlegends, datap, xAxisName, title_text, rotatem, datatime) {
        this.chartOption_wip = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                data: legendname,
                top: '0%',
                textStyle: {
                    color: '#F2F6FA'
                }
            },
            //calculable: true,
            grid: {
                left: '5%',
                right: '3.4%',
                bottom: '47%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ""; // 拼接加\n返回的类目项
                            var maxLength = 21; // 每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); // 类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ""; // 每次截取的字符串
                                    var start = i * maxLength; // 开始截取的位置
                                    var end = start + maxLength; // 结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + "\n";
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlegends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: 135,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: 30,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlegends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: 165,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见        
                    },
                    axisTick: {
                        length: 30,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlegends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: 195,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: 30,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlegends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: 225,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: 30,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: 255,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: '{value}'
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    type: 'value',
                    axisLabel: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[4],
                    type: 'line',
                    //barWidth:'50%',
                    data: datap[4],
                    label: {
                        show: true,
                        color: '#F2F6FA',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#1FE9BA'
                    },
                    lineStyle: {
                        normal: {
                            color: '#1FE9BA'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[5],
                    type: 'line',
                    data: datap[5],
                    label: {
                        show: true,
                        color: 'white',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#44FF32'
                    },
                    lineStyle: {
                        normal: {
                            color: '#44FF32'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    // echart setting function
    FabwipComponent.prototype.set_WIP_CF_Echart = function (legendname, xlegends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chartOption_wip = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                data: legendname,
                top: '0%',
                textStyle: {
                    color: '#F2F6FA'
                }
            },
            //calculable: true,
            grid: {
                left: '8.5%',
                right: '1%',
                bottom: '54%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ""; // 拼接加\n返回的类目项
                            var maxLength = 21; // 每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); // 类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ""; // 每次截取的字符串
                                    var start = i * maxLength; // 开始截取的位置
                                    var end = start + maxLength; // 结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + "\n";
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlegends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlegends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlegends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlegends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    name: xlegends[4],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[4] //设置数据
                },
                {
                    name: xlegends[5],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 5,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[5] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 6,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: '{value}'
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    type: 'value',
                    axisLabel: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[4],
                    type: 'line',
                    //barWidth:'50%',
                    data: datap[4],
                    label: {
                        show: true,
                        color: '#F2F6FA',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#1FE9BA'
                    },
                    lineStyle: {
                        normal: {
                            color: '#1FE9BA'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[5],
                    type: 'line',
                    data: datap[5],
                    label: {
                        show: true,
                        color: 'white',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#44FF32'
                    },
                    lineStyle: {
                        normal: {
                            color: '#44FF32'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    // echart setting function
    FabwipComponent.prototype.set_WIP_cf_PH1_Echart = function (legendname, xlegends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chartOption_wip_cf_PH1 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            //calculable: true,
            grid: {
                left: '8%',
                right: '1%',
                bottom: '15%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ""; // 拼接加\n返回的类目项
                            var maxLength = 21; // 每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); // 类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ""; // 每次截取的字符串
                                    var start = i * maxLength; // 开始截取的位置
                                    var end = start + maxLength; // 结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + "\n";
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
            ],
            yAxis: [
                {
                    // name:'PH1',
                    nameLocation: 'center',
                    nameGap: 40,
                    nameTextStyle: {
                        fontSize: 14,
                        fontWeight: 'bold',
                        color: 'white'
                    },
                    type: 'value',
                    interval: 1000,
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            return value / 1000 + 'K';
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    type: 'value',
                    axisLabel: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[4],
                    type: 'line',
                    //barWidth:'50%',
                    data: datap[4],
                    label: {
                        show: true,
                        color: '#F2F6FA',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#1FE9BA'
                    },
                    lineStyle: {
                        normal: {
                            color: '#1FE9BA'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[5],
                    type: 'line',
                    data: datap[5],
                    label: {
                        show: true,
                        color: 'white',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#44FF32'
                    },
                    lineStyle: {
                        normal: {
                            color: '#44FF32'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    // echart setting function
    FabwipComponent.prototype.set_WIP_cf_PH2_Echart = function (legendname, xlegends, dataph1, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chartOption_wip_cf_PH2 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            grid: {
                left: '8%',
                right: '1%',
                bottom: '55%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        formatter: function (value) {
                            var ret = ""; // 拼接加\n返回的类目项
                            var maxLength = 21; // 每项显示文字个数
                            var valLength = value.length; //X轴类目项的文字个数
                            var rowN = Math.ceil(valLength / maxLength); // 类目项需要换行的行数
                            if (rowN > 1) {
                                for (var i = 0; i < rowN; i++) {
                                    var temp = ""; // 每次截取的字符串
                                    var start = i * maxLength; // 开始截取的位置
                                    var end = start + maxLength; // 结束截取的位置
                                    //这里也可以加一个是否是最后一行的判断，但是不加也没有影响，那就不加吧
                                    temp = value.substring(start, end) + "\n";
                                    ret += temp; //凭借最终的字符串
                                }
                                return ret;
                            }
                            else {
                                return value;
                            }
                        },
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlegends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: dataph1[1]
                },
                {
                    name: xlegends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: dataph1[2]
                },
                {
                    name: xlegends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: dataph1[3] //设置数据
                },
                {
                    name: xlegends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlegends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlegends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 5,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 6,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    // name:'PH2',
                    nameLocation: 'center',
                    nameGap: 40,
                    nameTextStyle: {
                        fontSize: 14,
                        fontWeight: 'bold',
                        color: 'white'
                    },
                    type: 'value',
                    interval: 1000,
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            return value / 1000 + 'K';
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    type: 'value',
                    axisLabel: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[4],
                    type: 'line',
                    //barWidth:'50%',
                    data: datap[4],
                    label: {
                        show: true,
                        color: '#F2F6FA',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#1FE9BA'
                    },
                    lineStyle: {
                        normal: {
                            color: '#1FE9BA'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[5],
                    type: 'line',
                    data: datap[5],
                    label: {
                        show: true,
                        color: 'white',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#44FF32'
                    },
                    lineStyle: {
                        normal: {
                            color: '#44FF32'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    // echart setting function
    FabwipComponent.prototype.set_WIP_CL_Echart = function (legendname, xlegends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chartOption_wip = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            legend: {
                data: legendname,
                top: '0%',
                textStyle: {
                    color: '#F2F6FA'
                }
            },
            //calculable: true,
            grid: {
                left: '7%',
                right: '3%',
                bottom: '54%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlegends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlegends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlegends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlegends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    name: xlegends[4],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[4] //设置数据
                },
                {
                    name: xlegends[5],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 5,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[5] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 6,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'K';
                            }
                            else {
                                return value;
                            }
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    type: 'value',
                    axisLabel: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[4],
                    type: 'line',
                    //barWidth:'50%',
                    data: datap[4],
                    label: {
                        show: true,
                        color: '#F2F6FA',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#1FE9BA'
                    },
                    lineStyle: {
                        normal: {
                            color: '#1FE9BA'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[5],
                    type: 'line',
                    data: datap[5],
                    label: {
                        show: true,
                        color: 'white',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#44FF32'
                    },
                    lineStyle: {
                        normal: {
                            color: '#44FF32'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    // echart setting function
    FabwipComponent.prototype.set_WIP_CL_Both_Echart = function (legendname, xlegends, datap, xAxisName, title_text, rotatem, datatime, offsetfirst, xlength) {
        this.chartOption_wip_cl_both = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                }
            },
            grid: {
                left: '7.4%',
                right: '2%',
                bottom: '54%',
            },
            xAxis: [
                {
                    type: 'category',
                    data: xAxisName,
                    axisTick: {
                        length: 0,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLine: {
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: rotatem,
                        margin: 15,
                        textStyle: {
                            fontStyle: 'Times',
                            fontSize: '18',
                            color: '#F2F6FA'
                        }
                    },
                },
                {
                    name: xlegends[0],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[1].data//设置数据
                    data: datap[0]
                },
                {
                    name: xlegends[1],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[2].data//设置数据
                    data: datap[1]
                },
                {
                    name: xlegends[2],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    //data: this.setSeriesOption(data)[3].data//设置数据
                    data: datap[2]
                },
                {
                    name: xlegends[3],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[3] //设置数据
                },
                {
                    name: xlegends[4],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 4,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[4] //设置数据
                },
                {
                    name: xlegends[5],
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [26, -5, 0, 0]
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 5,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见        
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: datap[5] //设置数据
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 6,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条y轴是否可见
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    //interval:500,
                    axisLabel: {
                        color: '#F2F6FA',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'K';
                            }
                            else {
                                return value;
                            }
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#455e9c'
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    type: 'value',
                    axisLabel: {
                        show: false
                    },
                    axisTick: {
                        show: false
                    },
                    axisLine: {
                        show: false
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: [
                {
                    name: legendname[0],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[0],
                    itemStyle: {
                        normal: {
                            color: '#0073FF',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[1],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[1],
                    itemStyle: {
                        normal: {
                            color: '#3AA4FB',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[2],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[2],
                    itemStyle: {
                        normal: {
                            color: '#1FE9BA',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[3],
                    type: 'bar',
                    //barWidth:'50%',
                    data: datap[3],
                    itemStyle: {
                        normal: {
                            color: '#44FF32',
                            label: {
                                //show:true,
                                color: '#455e9c',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 0 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[4],
                    type: 'line',
                    //barWidth:'50%',
                    data: datap[4],
                    label: {
                        show: true,
                        color: '#F2F6FA',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#1FE9BA'
                    },
                    lineStyle: {
                        normal: {
                            color: '#1FE9BA'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                },
                {
                    name: legendname[5],
                    type: 'line',
                    data: datap[5],
                    label: {
                        show: true,
                        color: 'white',
                        fontSize: 9
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                    itemStyle: {
                        color: '#44FF32'
                    },
                    lineStyle: {
                        normal: {
                            color: '#44FF32'
                        }
                    },
                    yAxisIndex: 1 //这个是选择使用哪一个y坐标轴
                }
            ]
        };
    };
    /********* 一个根据日期创建legend 标签名字 和 多个x轴 名字的 的操作************************** */
    FabwipComponent.prototype.createLegend = function () {
        this.legends = [];
        this.xAxisLegends = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends.push(day_2.getDate() + '日');
        this.xAxisLegends.push(day_1.getDate() + '日');
        this.xAxisLegends.push(today.getDate() + '日');
        this.xAxisLegends.push('实时');
        if (this.title_yiji == 'CF WIP' || this.title_yiji == 'Cell WIP') {
            this.xAxisLegends.push(today.getDate() + '日');
            this.xAxisLegends.push('实时');
        }
        //legends的标签的
        this.legends.push(day_2.getDate() + '日wip');
        this.legends.push(day_1.getDate() + '日wip');
        this.legends.push(today.getDate() + '日wip');
        this.legends.push('实时wip');
        this.legends.push(today.getDate() + '日move');
        this.legends.push('实时move');
    };
    FabwipComponent.prototype.createLegendCfPH1 = function () {
        this.legends_cf_PH1 = [];
        this.xAxisLegends_cf_PH1 = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends_cf_PH1.push(day_2.getDate() + '日');
        this.xAxisLegends_cf_PH1.push(day_1.getDate() + '日');
        this.xAxisLegends_cf_PH1.push(today.getDate() + '日');
        this.xAxisLegends_cf_PH1.push('实时');
        //legends的标签的
        this.legends_cf_PH1.push(day_2.getDate() + '日wip');
        this.legends_cf_PH1.push(day_1.getDate() + '日wip');
        this.legends_cf_PH1.push(today.getDate() + '日wip');
        this.legends_cf_PH1.push('实时wip');
        this.legends_cf_PH1.push(today.getDate() + '日move');
        this.legends_cf_PH1.push('实时move');
    };
    FabwipComponent.prototype.createLegendCfPH2 = function () {
        this.legends_cf_PH2 = [];
        this.xAxisLegends_cf_PH2 = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends_cf_PH2.push(day_2.getDate() + '日');
        this.xAxisLegends_cf_PH2.push(day_1.getDate() + '日');
        this.xAxisLegends_cf_PH2.push(today.getDate() + '日');
        this.xAxisLegends_cf_PH2.push('实时');
        //legends的标签的
        this.legends_cf_PH2.push(day_2.getDate() + '日wip');
        this.legends_cf_PH2.push(day_1.getDate() + '日wip');
        this.legends_cf_PH2.push(today.getDate() + '日wip');
        this.legends_cf_PH2.push('实时wip');
        this.legends_cf_PH2.push(today.getDate() + '日move');
        this.legends_cf_PH2.push('实时move');
    };
    FabwipComponent.prototype.createLegendCellBoth = function () {
        this.legends_cell_both = [];
        this.xAxisLegends_cell_both = [];
        var today = new Date(); // 现在的
        var day_1 = new Date(); // 上一天的
        var day_2 = new Date(); //上两天的
        var date = today.getDate();
        var hour = today.getHours();
        if (hour > 5) {
            day_2.setDate(today.getDate() - 3);
            day_1.setDate(today.getDate() - 2);
            today.setDate(today.getDate() - 1);
        }
        else {
            day_2.setDate(today.getDate() - 4);
            day_1.setDate(today.getDate() - 3);
            today.setDate(today.getDate() - 2);
        }
        //这个是多个x轴的
        this.xAxisLegends_cell_both.push(day_2.getDate() + '日');
        this.xAxisLegends_cell_both.push(day_1.getDate() + '日');
        this.xAxisLegends_cell_both.push(today.getDate() + '日');
        this.xAxisLegends_cell_both.push('实时');
        this.xAxisLegends_cell_both.push(today.getDate() + '日');
        this.xAxisLegends_cell_both.push('实时');
        //legends的标签的
        this.legends_cell_both.push(day_2.getDate() + '日wip');
        this.legends_cell_both.push(day_1.getDate() + '日wip');
        this.legends_cell_both.push(today.getDate() + '日wip');
        this.legends_cell_both.push('实时wip');
        this.legends_cell_both.push(today.getDate() + '日move');
        this.legends_cell_both.push('实时move');
    };
    /********* 一个根据日期创建legend 标签名字的操作end************************** */
    /*******************转换数据格式的方法end***************************** */
    FabwipComponent.prototype.getData = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.wip_operation = [];
        this.data_date_before_2 = [];
        this.data_date_before_1 = [];
        this.data_date_before_0 = [];
        this.data_date_current = [];
        this.data_date_move = [];
        this.data_date_move_current = [];
        this.dataArray = [this.data_date_before_2, this.data_date_before_1, this.data_date_before_0,
            this.data_date_current, this.data_date_move, this.data_date_move_current];
        if (Array.isArray(data)) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var list = data_1[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.wip_operation.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1.push(list[value]);
                    }
                    if (value == 'date_before_0') {
                        this.data_date_before_0.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current.push(list[value]);
                    }
                    if (value == 'date_move') {
                        this.data_date_move.push(list[value]);
                    }
                    if (value == 'date_move_current') {
                        this.data_date_move_current.push(list[value]);
                    }
                }
            }
        }
    };
    FabwipComponent.prototype.getDataCfPH1 = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.wip_operation_cf_PH1 = [];
        this.data_date_before_2_cf_PH1 = [];
        this.data_date_before_1_cf_PH1 = [];
        this.data_date_before_0_cf_PH1 = [];
        this.data_date_current_cf_PH1 = [];
        this.data_date_move_cf_PH1 = [];
        this.data_date_move_current_cf_PH1 = [];
        this.dataArray_cf_PH1 = [this.data_date_before_2_cf_PH1, this.data_date_before_1_cf_PH1, this.data_date_before_0_cf_PH1,
            this.data_date_current_cf_PH1, this.data_date_move_cf_PH1, this.data_date_move_current_cf_PH1];
        if (Array.isArray(data)) {
            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                var list = data_2[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.wip_operation_cf_PH1.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2_cf_PH1.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1_cf_PH1.push(list[value]);
                    }
                    if (value == 'date_before_0') {
                        this.data_date_before_0_cf_PH1.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current_cf_PH1.push(list[value]);
                    }
                    if (value == 'date_move') {
                        this.data_date_move_cf_PH1.push(list[value]);
                    }
                    if (value == 'date_move_current') {
                        this.data_date_move_current_cf_PH1.push(list[value]);
                    }
                }
            }
        }
    };
    FabwipComponent.prototype.getDataCfPH2 = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.wip_operation_cf_PH2 = [];
        this.data_date_before_2_cf_PH2 = [];
        this.data_date_before_1_cf_PH2 = [];
        this.data_date_before_0_cf_PH2 = [];
        this.data_date_current_cf_PH2 = [];
        this.data_date_move_cf_PH2 = [];
        this.data_date_move_current_cf_PH2 = [];
        this.dataArray_cf_PH2 = [this.data_date_before_2_cf_PH2, this.data_date_before_1_cf_PH2, this.data_date_before_0_cf_PH2,
            this.data_date_current_cf_PH2, this.data_date_move_cf_PH2, this.data_date_move_current_cf_PH2];
        if (Array.isArray(data)) {
            for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                var list = data_3[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.wip_operation_cf_PH2.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2_cf_PH2.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1_cf_PH2.push(list[value]);
                    }
                    if (value == 'date_before_0') {
                        this.data_date_before_0_cf_PH2.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current_cf_PH2.push(list[value]);
                    }
                    if (value == 'date_move') {
                        this.data_date_move_cf_PH2.push(list[value]);
                    }
                    if (value == 'date_move_current') {
                        this.data_date_move_current_cf_PH2.push(list[value]);
                    }
                }
            }
        }
    };
    FabwipComponent.prototype.getDataCellBoth = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.wip_operation_cell_both = [];
        this.data_date_before_2_cell_both = [];
        this.data_date_before_1_cell_both = [];
        this.data_date_before_0_cell_both = [];
        this.data_date_current_cell_both = [];
        this.data_date_move_cell_both = [];
        this.data_date_move_current_cell_both = [];
        this.dataArray_cell_both = [this.data_date_before_2_cell_both, this.data_date_before_1_cell_both, this.data_date_before_0_cell_both,
            this.data_date_current_cell_both, this.data_date_move_cell_both, this.data_date_move_current_cell_both];
        if (Array.isArray(data)) {
            //1.第一个循环 获取到所有的站点的信息
            for (var _i = 0, data_4 = data; _i < data_4.length; _i++) {
                var list = data_4[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        if (!this.wip_operation_cell_both.includes(list[value])) {
                            this.wip_operation_cell_both.push(list[value]);
                        }
                    }
                }
            }
            //2.第二个循环，根据站点对 不同产线的数据进行求和
            for (var _a = 0, _b = this.wip_operation_cell_both; _a < _b.length; _a++) {
                var oper = _b[_a];
                var objs = []; // 用来保存，当前站点的对象的
                for (var _c = 0, data_5 = data; _c < data_5.length; _c++) {
                    var object = data_5[_c];
                    var operationdesc = object['oper_desc'];
                    if (operationdesc == oper) {
                        objs.push(object);
                    }
                }
                var data_before_2 = 0; // 临时变量保存求的和的数据
                var data_before_1 = 0;
                var data_before_0 = 0;
                var data_current = 0;
                var data_move = 0;
                var data_move_current = 0;
                for (var _d = 0, objs_1 = objs; _d < objs_1.length; _d++) {
                    var object = objs_1[_d];
                    data_before_2 += object['date_before_2'];
                    data_before_1 += object['date_before_1'];
                    data_before_0 += object['date_before_0'];
                    data_current += object['date_current'];
                    data_move += object['date_move'];
                    data_move_current += object['date_move_current'];
                }
                this.data_date_before_2_cell_both.push(data_before_2);
                this.data_date_before_1_cell_both.push(data_before_1);
                this.data_date_before_0_cell_both.push(data_before_0);
                this.data_date_current_cell_both.push(data_current);
                this.data_date_move_cell_both.push(data_move);
                this.data_date_move_current_cell_both.push(data_move_current);
            }
        }
    };
    FabwipComponent.prototype.getDataCellOne = function (data) {
        //在getData之前，先把所有的数组都晴空
        this.wip_operation_cell_both = [];
        this.data_date_before_2_cell_both = [];
        this.data_date_before_1_cell_both = [];
        this.data_date_before_0_cell_both = [];
        this.data_date_current_cell_both = [];
        this.data_date_move_cell_both = [];
        this.data_date_move_current_cell_both = [];
        this.dataArray_cell_both = [this.data_date_before_2_cell_both, this.data_date_before_1_cell_both, this.data_date_before_0_cell_both,
            this.data_date_current_cell_both, this.data_date_move_cell_both, this.data_date_move_current_cell_both];
        if (Array.isArray(data)) {
            for (var _i = 0, data_6 = data; _i < data_6.length; _i++) {
                var list = data_6[_i];
                for (var value in list) {
                    if (value == 'oper_desc') {
                        this.wip_operation_cell_both.push(list[value]);
                    }
                    if (value == 'date_before_2') {
                        this.data_date_before_2_cell_both.push(list[value]);
                    }
                    if (value == 'date_before_1') {
                        this.data_date_before_1_cell_both.push(list[value]);
                    }
                    if (value == 'date_before_0') {
                        this.data_date_before_0_cell_both.push(list[value]);
                    }
                    if (value == 'date_current') {
                        this.data_date_current_cell_both.push(list[value]);
                    }
                    if (value == 'date_move') {
                        this.data_date_move_cell_both.push(list[value]);
                    }
                    if (value == 'date_move_current') {
                        this.data_date_move_current_cell_both.push(list[value]);
                    }
                }
            }
        }
    };
    /*******************转换数据格式的方法end***************************** */
    /********* 一级 ： 转换数据格式 ：array_current的数据：这个是用来做表格的****************** */
    FabwipComponent.prototype.getDataWipCurrent = function (data, factoryname) {
        this.data_key = [];
        if (Array.isArray(data)) {
            //第一个循环用于获取到key的值:,并且在这里在添加最后的求和sum的操作
            for (var _i = 0, data_7 = data; _i < data_7.length; _i++) {
                var list = data_7[_i];
                if (list['hourtimekey'] != null) {
                    for (var value in list) {
                        if (value == 'modeltype') {
                            if (!this.data_key.includes(list[value])) {
                                //console.log("you are already has a value : "+list[value]);
                                this.data_key.push(list[value]);
                            }
                        }
                    }
                }
            }
            this.data_array_current = []; //清空要保存数据的数组！
            for (var _a = 0, _b = this.data_key; _a < _b.length; _a++) {
                var key = _b[_a];
                //第二个循环data_key用于创建对象，并且把对象放入到数组中去
                var newObject = void 0;
                if (factoryname == "ARRAY") {
                    newObject = new __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__["a" /* array_wip_current */]; //当传进来的是一个array的时候，创建的是个array的对象
                }
                else if (factoryname == "CF") {
                    newObject = new __WEBPACK_IMPORTED_MODULE_5__outstandingcase_transparent_display_b4_wip_model_cf_wip__["a" /* cf_wip_current */]; //当传进来的是一个cf的时候，创建的是个cf的对象
                }
                else if (factoryname == "CELL") {
                    newObject = new __WEBPACK_IMPORTED_MODULE_6__outstandingcase_transparent_display_b4_wip_model_cell_wip__["a" /* cell_wip_current */]; //当传进来的是一个cell的时候，创建的是个cell的对象
                }
                newObject.Key = key; //先给key赋值
                // this.data_array_current_keys.push(key);//把key另存为到新的数组中
                var glassNumbers = []; // 1.声明一个用来保存glass数量的数组（添加SUM列的操作）
                for (var _c = 0, data_8 = data; _c < data_8.length; _c++) {
                    var list = data_8[_c];
                    var modeltypename = list['modeltype'];
                    if (modeltypename == key) {
                        var operationdescname = list['operationdesc'];
                        var glassqtyvalue = list['glassqty'];
                        glassNumbers.push(parseInt(glassqtyvalue, 10)); // 2.把glassqty放入到数组中保存（添加SUM列的操作）
                        newObject.setProperty(operationdescname, glassqtyvalue); //调用对象的方法进行的操作
                    }
                }
                //3.添加求和的操作（添加SUM列的操作）
                var glassSUM = 0;
                for (var _d = 0, glassNumbers_1 = glassNumbers; _d < glassNumbers_1.length; _d++) {
                    var glassqty = glassNumbers_1[_d];
                    glassSUM += glassqty;
                }
                newObject.setProperty("SUM", glassSUM);
                //把这个的对象放入到数组中去
                this.data_array_current.push(newObject);
            }
        }
    };
    FabwipComponent.prototype.getDataWipCurrentCellBoth = function (data) {
        this.data_key_cell_both = [];
        this.data_array_current_cell_both = [];
        //1.获取到 modeltype的值
        for (var _i = 0, data_9 = data; _i < data_9.length; _i++) {
            var object = data_9[_i];
            var operationdesc = object['modeltype'];
            if (!this.data_key_cell_both.includes(operationdesc)) {
                this.data_key_cell_both.push(operationdesc);
            }
        }
        //2.根据上面获取到的modeltype的值，进行 对象的创建
        for (var _a = 0, _b = this.data_key_cell_both; _a < _b.length; _a++) {
            var key = _b[_a];
            var newObject = new __WEBPACK_IMPORTED_MODULE_10__model_cell_wip__["a" /* cell_wip_current_both */];
            newObject.Key = key;
            var glasssum = 0;
            for (var _c = 0, data_10 = data; _c < data_10.length; _c++) {
                var object = data_10[_c];
                var modeltype = object['modeltype'];
                if (modeltype == key) {
                    var operationdesc = object['operationdesc'];
                    var glassqty = object['glassqty'];
                    glasssum += glassqty; // 把对应的glass数量求和
                    newObject.setProperty(operationdesc, parseInt(glassqty, 10)); //给这个对象放值
                }
            }
            newObject.setProperty('SUM', glasssum);
            //一个 key循环完成，一个对象创建完成，放入到数组this.data_array_current_cell_both中保存
            this.data_array_current_cell_both.push(newObject);
        }
    };
    /*******转换数据格式 ：array_current的数据end****************** */
    /***********计算最后行 SUM 的内容******************** */
    FabwipComponent.prototype.getSumDate = function (fname) {
        var newobject;
        if (fname == 'Array') {
            newobject = new __WEBPACK_IMPORTED_MODULE_7__outstandingcase_transparent_display_b4_wip_model_sum_wip__["a" /* sum_wip_array */]();
        }
        else if (fname == 'Cf') {
            newobject = new __WEBPACK_IMPORTED_MODULE_7__outstandingcase_transparent_display_b4_wip_model_sum_wip__["c" /* sum_wip_cf */]();
        }
        else if (fname == 'Cell') {
            newobject = new __WEBPACK_IMPORTED_MODULE_7__outstandingcase_transparent_display_b4_wip_model_sum_wip__["b" /* sum_wip_cell */];
        }
        var glassnum = 0; //用于计算总和的
        for (var i = 0; i < this.data_date_current.length; i++) {
            var num = this.data_date_current[i];
            glassnum += num; // 直接求一个和
            newobject.setProperty((i + 1), num);
        }
        if (fname == 'Array') {
            newobject.setProperty(36, glassnum); //最后给赋值操作
        }
        else if (fname == 'Cf') {
            newobject.setProperty(16, glassnum); //最后给赋值操作
        }
        else if (fname == 'Cell') {
            newobject.setProperty(7, glassnum); //最后给赋值操作
        }
        this.data_array_current.push(newobject); // 把数组放进去
    };
    FabwipComponent.prototype.getSumDateCellBoth = function () {
        var newOjbect = new __WEBPACK_IMPORTED_MODULE_9__model_sum_wip__["a" /* sum_wip_cell_both */];
        var glasssum = 0;
        for (var i = 0; i < this.data_date_current_cell_both.length; i++) {
            var num = this.data_date_current_cell_both[i];
            glasssum += num;
            newOjbect.setProperty((i + 1), num);
        }
        newOjbect.setProperty(15, glasssum);
        console.log(newOjbect);
        this.data_array_current_cell_both.push(newOjbect);
    };
    /* **********计算行SUM 的内容end ************** */
    /***********计算每一行的 SUM 的内容******************** */
    FabwipComponent.prototype.getRowSumDate = function () {
        this.data_date_before_2_sum = 0;
        this.data_date_before_1_sum = 0;
        this.data_date_before_0_sum = 0;
        this.data_date_before_sum = [];
        for (var _i = 0, _a = this.data_date_before_2; _i < _a.length; _i++) {
            var a = _a[_i];
            this.data_date_before_2_sum += a;
        }
        for (var _b = 0, _c = this.data_date_before_1; _b < _c.length; _b++) {
            var a = _c[_b];
            this.data_date_before_1_sum += a;
        }
        for (var _d = 0, _e = this.data_date_before_0; _d < _e.length; _d++) {
            var a = _e[_d];
            this.data_date_before_0_sum += a;
        }
        this.data_date_before_sum.push(this.data_date_before_2_sum, this.data_date_before_1_sum, this.data_date_before_0_sum);
    };
    FabwipComponent.prototype.getRowSumStr = function () {
        this.data_date_before_sum_str = [];
        for (var i = 0; i < 3; i++) {
            var d = this.xAxisLegends[i];
            var s = this.data_date_before_sum[i];
            var ds = d + " : " + s;
            this.data_date_before_sum_str.push(ds);
        }
    };
    /* **********计算每一行的 SUM 的内容end ************** */
    /******** 一级 ：动态的创建表格的 header 和 feild ********************* */
    FabwipComponent.prototype.create_cols = function () {
        //this.data_array_current_cols = [];
        // console.log('you have in method create_cols...');
        for (var _i = 0, _a = this.wip_operation; _i < _a.length; _i++) {
            var value = _a[_i];
            // 1.创建对象
            var colObjetc = new __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__["c" /* wip_crrent_cols */];
            colObjetc.setProperty(value, value);
            //console.log('aaa  bb  ' + colObjetc);
            // 2.把对象放进到数组中去
            this.data_array_current_cols.push(colObjetc);
        }
        //最后再添加一个SUM列
        var colSUM = new __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__["c" /* wip_crrent_cols */];
        colSUM.setProperty('SUM', 'SUM');
        this.data_array_current_cols.push(colSUM);
    };
    FabwipComponent.prototype.create_cols_cell_coth = function () {
        for (var _i = 0, _a = this.wip_operation_cell_both; _i < _a.length; _i++) {
            var value = _a[_i];
            var colObject = new __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__["c" /* wip_crrent_cols */];
            colObject.setProperty(value, value);
            this.data_array_current_cols_cell_both.push(colObject);
        }
        var colSUM = new __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__["c" /* wip_crrent_cols */];
        colSUM.setProperty('SUM', 'SUM');
        this.data_array_current_cols_cell_both.push(colSUM);
    };
    /********动态的创建表格的 header 和 feild  end********************* */
    /******************修改时间格式 ： 2018-12-14 10：01：02 用于在一级视图上面显示****************** */
    FabwipComponent.prototype.getTimeStr = function (datatime) {
        var timestr = '';
        var datestr = datatime.toISOString().substr(0, 10);
        var hour = datatime.getHours();
        var hourstr = '';
        if (hour > 9) {
            hourstr = hour + '';
        }
        else {
            hourstr = '0' + hour;
        }
        var minute = datatime.getMinutes();
        var minutestr = '';
        if (minute > 9) {
            minutestr = minute + '';
        }
        else {
            minutestr = '0' + minute;
        }
        var second = datatime.getSeconds();
        var secondstr = '';
        if (second > 9) {
            secondstr = second + '';
        }
        else {
            secondstr = '0' + second;
        }
        timestr = datestr + ' ' + hourstr + ':' + minutestr + ':' + secondstr;
        return timestr;
    };
    /******************修改时间格式 ： 2018-12-14 10：01：02 end************** */
    /************创建二级视图时候，需要转换的时间格式的****************** */
    FabwipComponent.prototype.getTimeSameToEchart = function (datatime) {
        var hourtimekey = '';
        var yearstr = datatime.getFullYear().toString();
        var month = datatime.getMonth() + 1;
        var date = datatime.getDate();
        var hour = datatime.getHours();
        var monthstr = '';
        var datestr = '';
        var hourstr = '';
        if (month > 9) {
            monthstr = month + '';
        }
        else {
            monthstr = '0' + month;
        }
        if (date > 9) {
            datestr = date + '';
        }
        else {
            datestr = '0' + date;
        }
        if (hour > 9) {
            hourstr = hour + '';
        }
        else {
            hourstr = '0' + hour;
        }
        hourtimekey = yearstr + monthstr + datestr + hourstr;
        return hourtimekey;
    };
    /************创建二级视图时候，需要转换的时间格式的end************** */
    /***************创建二级试图时候，接受数据的方法************************ */
    FabwipComponent.prototype.getStationMessage = function (data) {
        var eqp_id_tepm = []; //创建临时的操作用于去掉重复的值
        var eqp_id_tepm2 = []; //创建临时的操作用于去掉重复的值
        var get_index = []; //用来保存下标使用
        this.eqp_id = []; //清空eqp_id
        this.eqp_state = []; //清空eqp_state
        this.modeltype = []; //清空型号数组
        this.stationWipMessage = []; //清空对象数组
        if (Array.isArray(data)) {
            // console.log(data);
            //1.第一个循环获取到基本的元素信息，放入到数组中进行保存
            for (var _i = 0, data_11 = data; _i < data_11.length; _i++) {
                var list = data_11[_i];
                for (var value in list) {
                    if (value == 'eqp_id') {
                        this.eqp_id.push(list[value]);
                    }
                    if (value == 'eqp_state') {
                        this.eqp_state.push(list[value]);
                    }
                    if (value == 'modeltype') {
                        if (!this.modeltype.includes(list[value])) {
                            this.modeltype.push(list[value]);
                        }
                    }
                }
            }
        }
        console.log("inner eqp_id length: " + this.eqp_id.length);
        console.log("inner eqp_state length: " + this.eqp_state.length);
        // for (let i = 0; i < this.eqp_id.length; i++) {
        //   console.log(i + " : " + this.eqp_id[i] + " ： " + this.eqp_state[i]);
        // }
        //2.第二个循环，用于创建保存型号和wip数量的操作
        for (var _a = 0, _b = this.modeltype; _a < _b.length; _a++) {
            var modeltype = _b[_a];
            var newObject = new __WEBPACK_IMPORTED_MODULE_1__outstandingcase_transparent_display_b4_wip_model_array_wip__["b" /* stationMessage */](); //一个modeltype 创建一个临时变量用于保存对象
            newObject.setmodeltype(modeltype); //直接设置这个modeltype型号
            var listsofmodeltype = []; //用来保存和当前modeltype匹配的数据
            //1.循环找到这个型号的所有的list的信息
            for (var _c = 0, data_12 = data; _c < data_12.length; _c++) {
                var list = data_12[_c];
                if (modeltype == list['modeltype']) {
                    listsofmodeltype.push(list);
                }
            }
            //console.log("长度 ： "+listsofmodeltype.length);
            var eqp_id_inlist = []; //用来保存这个modeltype下的所有的设备的名称
            for (var _d = 0, listsofmodeltype_1 = listsofmodeltype; _d < listsofmodeltype_1.length; _d++) {
                var list = listsofmodeltype_1[_d];
                if (!eqp_id_inlist.includes(list['eqp_id'])) {
                    eqp_id_inlist.push(list['eqp_id']);
                }
            }
            //2.遍历得到的eqp_id_inlist数组，与eqp_id进行对比
            for (var _e = 0, _f = this.eqp_id; _e < _f.length; _e++) {
                var eqp_id = _f[_e];
                if (eqp_id_inlist.includes(eqp_id)) {
                    for (var _g = 0, listsofmodeltype_2 = listsofmodeltype; _g < listsofmodeltype_2.length; _g++) {
                        var list = listsofmodeltype_2[_g];
                        if (eqp_id == list['eqp_id']) {
                            newObject.setglassqtys(list['glassqty']);
                        }
                    }
                }
                else {
                    newObject.setglassqtys('');
                }
            }
            //每次把创建的对象打印一下
            //console.log(newObject);
            //3.当所有的设备在这个modeltype类型下都循环完成之后，证明这个对象已经创建完成了
            this.stationWipMessage.push(newObject);
        }
        // //再用一个循环把重复的数据给删除掉
        //   console.log("内容 ： ");
        // eqp_id_tepm = this.eqp_id;
        // console.log("临时的数组是 ： "+eqp_id_tepm);
        for (var i = 0; i < this.eqp_id.length; i++) {
            eqp_id_tepm[i] = i + this.eqp_id[i]; //重新添加上一个i的值这个内容
            //console.log(i+" : "+eqp_id_tepm[i]);
        }
        // console.log("1 ： " + eqp_id_tepm);
        // console.log("1 :  " + this.eqp_id);
        for (var i = 0; i < eqp_id_tepm.length; i++) {
            var eqpidtemp = ''; //用来保存真实的设备名称
            var index = null; //用来保存真实的下表数据
            if (i < 10) {
                eqpidtemp = eqp_id_tepm[i].substr(1); //截取出来这个操作
                index = parseInt(eqp_id_tepm[i].substr(0, 1), 10);
            }
            else if (i > 9 && i < 100) {
                eqpidtemp = eqp_id_tepm[i].substr(2); //截取出来这个操作
                index = parseInt(eqp_id_tepm[i].substr(0, 2), 10);
            }
            else if (i > 99 && i < 1000) {
                eqpidtemp = eqp_id_tepm[i].substr(3); //截取出来这个操作
                index = parseInt(eqp_id_tepm[i].substr(0, 3), 10);
            }
            if (eqp_id_tepm2.includes(eqpidtemp)) {
                //  console.log("重复的下标是 ： " + eqp_id_tepm[i] + " : " + eqpidtemp + " : " + index);
                this.eqp_id[i] = '666666888888'; //就是写成一个标志位
                this.eqp_state[i] = '666666888888';
                for (var _h = 0, _j = this.stationWipMessage; _h < _j.length; _h++) {
                    var object = _j[_h];
                    object.glassqtys[i] = '666666888888'; //删除每一个对象的对应下标的数据
                }
            }
            else {
                eqp_id_tepm2.push(eqpidtemp); //最后这个eqp_id_temp2应该和this.eqp_id 是一样的
            }
        }
        // console.log("2 ：  " + eqp_id_tepm2);
        //  console.log("2 ：  " + this.eqp_id);//这两个应该是能够对上的才可以
        while (this.eqp_id.includes('666666888888')) {
            var index = this.eqp_id.indexOf('666666888888');
            this.eqp_id.splice(index, 1);
        }
        while (this.eqp_state.includes('666666888888')) {
            var index = this.eqp_state.indexOf('666666888888');
            this.eqp_state.splice(index, 1);
        }
        for (var _k = 0, _l = this.stationWipMessage; _k < _l.length; _k++) {
            var object = _l[_k];
            while (object.glassqtys.includes('666666888888')) {
                var index = object.glassqtys.indexOf('666666888888');
                object.glassqtys.splice(index, 1);
            }
        }
        // console.log("3 ：  " + eqp_id_tepm2);
        // console.log("3 ：  " + this.eqp_id);//这两个应该是能够对上的才可以
    };
    /***************创建二级试图时候，接受数据的方法end************************ */
    FabwipComponent.prototype.setSeriesOption = function (obj) {
        var seriesArray = new Array();
        if (Array.isArray(obj)) {
            for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
                var list = obj_1[_i];
                var echartSet = new __WEBPACK_IMPORTED_MODULE_8_app_report_ui_type1_model_echartSet__["a" /* EchartSet */]();
                var dataArray = new Array(); //这个就是个数组用来存每一个的数据的
                echartSet.name = list['key'];
                echartSet.type = 'bar';
                for (var value in list) {
                    if (list.hasOwnProperty(value)) {
                        if (value !== 'key') {
                            dataArray.push(list[value]);
                        }
                    }
                }
                echartSet.data = dataArray;
                seriesArray.push(echartSet);
            }
        }
        return seriesArray;
    };
    FabwipComponent.prototype.getKey = function (obj) {
        var keyNameArray = new Array();
        if (Array.isArray(obj)) {
            for (var _i = 0, obj_2 = obj; _i < obj_2.length; _i++) {
                var list = obj_2[_i];
                keyNameArray.push(list['key']);
            }
        }
        return keyNameArray;
    };
    __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('fullScreenTest'),
        __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"])
    ], FabwipComponent.prototype, "fullScreenTest", void 0);
    __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChildren"])('chartGride2'),
        __metadata("design:type", __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"])
    ], FabwipComponent.prototype, "chartGride2", void 0);
    FabwipComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-fabwip',
            template: __webpack_require__("./src/app/toumingdisplan/fabwip/fabwip.component.html"),
            styles: [__webpack_require__("./src/app/toumingdisplan/fabwip/fabwip.component.css")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_2__common_service_api_api_service__["a" /* ApiService */],
            __WEBPACK_IMPORTED_MODULE_3__report_ui_service_report_ui_common_service__["a" /* ReportUiCommonService */],
            __WEBPACK_IMPORTED_MODULE_4__common_service_fullscreen_service__["a" /* FullscreenService */]])
    ], FabwipComponent);
    return FabwipComponent;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabwip/model/cell_wip.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export cell_wip_current */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cell_wip_current_both; });
var cell_wip_current = /** @class */ (function () {
    function cell_wip_current() {
        this["key"] = "";
        this["PI"] = "";
        this["PIRW"] = "";
        this["Rub"] = "";
        this["Assy"] = "";
        this["Cut"] = "";
        this["CT"] = "";
        this["SUM"] = "";
    }
    cell_wip_current.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == "PI") {
            this["PI"] = propertyValue;
        }
        else if (propertyName == "PIRW") {
            this["PIRW"] = propertyValue;
        }
        else if (propertyName == "Rub") {
            this["Rub"] = propertyValue;
        }
        else if (propertyName == "Assy") {
            this["Assy"] = propertyValue;
        }
        else if (propertyName == "Cut") {
            this["Cut"] = propertyValue;
        }
        else if (propertyName == "CT") {
            this["CT"] = propertyValue;
        }
        else if (propertyName == "SUM") {
            this["SUM"] = propertyValue;
        }
    };
    return cell_wip_current;
}());

var cell_wip_current_both = /** @class */ (function () {
    function cell_wip_current_both() {
        this["Key"] = "";
        this["CutP"] = "";
        this["CT"] = "";
        this["Trim"] = "";
        this["NmlRP"] = "";
        this["BurRP"] = "";
        this["Oven"] = "";
        this["PadRP"] = "";
        this["TapeRP"] = "";
        this["Retest"] = "";
        this["Sorter"] = "";
        this["Scrap"] = "";
        this["PadCut"] = "";
        this["Shipping"] = "";
        this["Packing"] = "";
        this["SUM"] = "";
    }
    cell_wip_current_both.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == "CutP") {
            this["CutP"] = propertyValue;
        }
        else if (propertyName == "CT") {
            this["CT"] = propertyValue;
        }
        else if (propertyName == "Trim") {
            this["Trim"] = propertyValue;
        }
        else if (propertyName == "NmlRP") {
            this["NmlRP"] = propertyValue;
        }
        else if (propertyName == "BurRP") {
            this["BurRP"] = propertyValue;
        }
        else if (propertyName == "Oven") {
            this["Oven"] = propertyValue;
        }
        else if (propertyName == "PadRP") {
            this["PadRP"] = propertyValue;
        }
        else if (propertyName == "TapeRP") {
            this["TapeRP"] = propertyValue;
        }
        else if (propertyName == "Retest") {
            this["Retest"] = propertyValue;
        }
        else if (propertyName == "Sorter") {
            this["Sorter"] = propertyValue;
        }
        else if (propertyName == "Scrap") {
            this["Scrap"] = propertyValue;
        }
        else if (propertyName == "PadCut") {
            this["PadCut"] = propertyValue;
        }
        else if (propertyName == "Shipping") {
            this["Shipping"] = propertyValue;
        }
        else if (propertyName == "Packing") {
            this["Packing"] = propertyValue;
        }
        else if (propertyName == "SUM") {
            this["SUM"] = propertyValue;
        }
    };
    return cell_wip_current_both;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/fabwip/model/sum_wip.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return sum_wip_cell_both; });
/* unused harmony export sum_wip_cell */
/* unused harmony export sum_wip_cf */
/* unused harmony export sum_wip_array */
var sum_wip_cell_both = /** @class */ (function () {
    function sum_wip_cell_both() {
        this["Key"] = "SUM";
        this["CutP"] = "";
        this["CT"] = "";
        this["Trim"] = "";
        this["NmlRP"] = "";
        this["BurRP"] = "";
        this["Oven"] = "";
        this["PadRP"] = "";
        this["TapeRP"] = "";
        this["Retest"] = "";
        this["Sorter"] = "";
        this["Scrap"] = "";
        this["PadCut"] = "";
        this["Shipping"] = "";
        this["Packing"] = "";
        this["SUM"] = "";
    }
    sum_wip_cell_both.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 1) {
            this["CutP"] = propertyValue;
        }
        else if (indexact == 2) {
            this["CT"] = propertyValue;
        }
        else if (indexact == 3) {
            this["Trim"] = propertyValue;
        }
        else if (indexact == 4) {
            this["NmlRP"] = propertyValue;
        }
        else if (indexact == 5) {
            this["BurRP"] = propertyValue;
        }
        else if (indexact == 6) {
            this["Oven"] = propertyValue;
        }
        else if (indexact == 7) {
            this["PadRP"] = propertyValue;
        }
        else if (indexact == 8) {
            this["TapeRP"] = propertyValue;
        }
        else if (indexact == 9) {
            this["Retest"] = propertyValue;
        }
        else if (indexact == 10) {
            this["Sorter"] = propertyValue;
        }
        else if (indexact == 11) {
            this["Scrap"] = propertyValue;
        }
        else if (indexact == 12) {
            this["PadCut"] = propertyValue;
        }
        else if (indexact == 13) {
            this["Shipping"] = propertyValue;
        }
        else if (indexact == 14) {
            this["Packing"] = propertyValue;
        }
        else if (indexact == 15) {
            this["SUM"] = propertyValue;
        }
    };
    return sum_wip_cell_both;
}());

var sum_wip_cell = /** @class */ (function () {
    function sum_wip_cell() {
        this["Key"] = "SUM";
        this["PI"] = "";
        this["PIRW"] = "";
        this["Rub"] = "";
        this["Assy"] = "";
        this["Cut"] = "";
        this["CT"] = "";
        this["SUM"] = "";
    }
    sum_wip_cell.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 1) {
            this["PI"] = propertyValue;
        }
        else if (indexact == 2) {
            this["PIRW"] = propertyValue;
        }
        else if (indexact == 3) {
            this["Rub"] = propertyValue;
        }
        else if (indexact == 4) {
            this["Assy"] = propertyValue;
        }
        else if (indexact == 5) {
            this["Cut"] = propertyValue;
        }
        else if (indexact == 6) {
            this["CT"] = propertyValue;
        }
        else if (indexact == 7) {
            this["SUM"] = propertyValue;
        }
    };
    return sum_wip_cell;
}());

var sum_wip_cf = /** @class */ (function () {
    function sum_wip_cf() {
        this["Key"] = "SUM";
        this["Unpack"] = "";
        this["ITO"] = "";
        this["BM"] = "";
        this["BMRP"] = "";
        this["R"] = "";
        this["G"] = "";
        this["B"] = "";
        this["CRP"] = "";
        this["OC"] = "";
        this["PS"] = "";
        this["PSRP"] = "";
        this["FINS"] = "";
        this["Rework"] = "";
        this["RWINS"] = "";
        this["Shipping"] = "";
        this["SUM"] = "";
    }
    // Unpack	ITO	BM	BMRP	R	G	B	CRP	OC	PS PSRP	FINS	Rework	RWINS	Shipping
    sum_wip_cf.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 1) {
            this["Unpack"] = propertyValue;
        }
        else if (indexact == 2) {
            this["ITO"] = propertyValue;
        }
        else if (indexact == 3) {
            this["BM"] = propertyValue;
        }
        else if (indexact == 4) {
            this["BMRP"] = propertyValue;
        }
        else if (indexact == 5) {
            this["R"] = propertyValue;
        }
        else if (indexact == 6) {
            this["G"] = propertyValue;
        }
        else if (indexact == 7) {
            this["B"] = propertyValue;
        }
        else if (indexact == 8) {
            this["CRP"] = propertyValue;
        }
        else if (indexact == 9) {
            this["OC"] = propertyValue;
        }
        else if (indexact == 10) {
            this["PS"] = propertyValue;
        }
        else if (indexact == 11) {
            this["PSRP"] = propertyValue;
        }
        else if (indexact == 12) {
            this["FINS"] = propertyValue;
        }
        else if (indexact == 13) {
            this["Rework"] = propertyValue;
        }
        else if (indexact == 14) {
            this["RWINS"] = propertyValue;
        }
        else if (indexact == 15) {
            this["Shipping"] = propertyValue;
        }
        else if (indexact == 16) {
            this["SUM"] = propertyValue;
        }
    };
    return sum_wip_cf;
}());

var sum_wip_array = /** @class */ (function () {
    function sum_wip_array() {
        this["Key"] = "SUM";
        this["Initial Clean"] = "";
        this["1st ITO Dep"] = "";
        this["1st ITO Mask"] = "";
        this["1st ITO Etch"] = "";
        this["Gate Dep."] = "";
        this["Gate Mask"] = "";
        this["Gate Etch"] = "";
        this["Gate Test Full"] = "";
        this["FGI Clean / Dep"] = "";
        this["Multi Dep Full"] = "";
        this["Active Mask"] = "";
        this["Active Etch"] = "";
        this["Active Strip"] = "";
        this["1st ITO Dep."] = "";
        this["1st ITO Mask."] = "";
        this["1st ITO Etch."] = "";
        this["FGI Dep."] = "";
        this["Multi Dep."] = "";
        this["SD Dep."] = "";
        this["SDT Mask"] = "";
        this["1st SD Etch "] = "";
        this["2nd SD Etch "] = "";
        this["SD Strip"] = "";
        this["SD Test Full"] = "";
        this["PVX Dep"] = "";
        this["VIA Mask"] = "";
        this["VIA Etch"] = "";
        this["2nd ITO Dep"] = "";
        this["2nd ITO Mask"] = "";
        this["2nd ITO Etch"] = "";
        this["Final AOI Inline full"] = "";
        this["Array Test"] = "";
        this["Final CUT  Repair"] = "";
        this["Final CVD Repair"] = "";
        this["Shipping"] = "";
        this["SUM"] = "";
    }
    sum_wip_array.prototype.setProperty = function (indexact, propertyValue) {
        if (indexact == 1) {
            this["Initial Clean"] = propertyValue;
        }
        else if (indexact == 2) {
            this["1st ITO Dep"] = propertyValue;
        }
        else if (indexact == 3) {
            this["1st ITO Mask"] = propertyValue;
        }
        else if (indexact == 4) {
            this["1st ITO Etch"] = propertyValue;
        }
        else if (indexact == 5) {
            this["Gate Dep."] = propertyValue;
        }
        else if (indexact == 6) {
            this["Gate Mask"] = propertyValue;
        }
        else if (indexact == 7) {
            this["Gate Etch"] = propertyValue;
        }
        else if (indexact == 8) {
            this["Gate Test Full"] = propertyValue;
        }
        else if (indexact == 9) {
            this["FGI Clean / Dep"] = propertyValue;
        }
        else if (indexact == 10) {
            this["Multi Dep Full"] = propertyValue;
        }
        else if (indexact == 11) {
            this["Active Mask"] = propertyValue;
        }
        else if (indexact == 12) {
            this["Active Etch"] = propertyValue;
        }
        else if (indexact == 13) {
            this["Active Strip"] = propertyValue;
        }
        else if (indexact == 14) {
            this["1st ITO Dep."] = propertyValue;
        }
        else if (indexact == 15) {
            this["1st ITO Mask."] = propertyValue;
        }
        else if (indexact == 16) {
            this["1st ITO Etch."] = propertyValue;
        }
        else if (indexact == 17) {
            this["FGI Dep."] = propertyValue;
        }
        else if (indexact == 18) {
            this["Multi Dep."] = propertyValue;
        }
        else if (indexact == 19) {
            this["SD Dep."] = propertyValue;
        }
        else if (indexact == 20) {
            this["SDT Mask"] = propertyValue;
        }
        else if (indexact == 21) {
            this["1st SD Etch "] = propertyValue;
        }
        else if (indexact == 22) {
            this["2nd SD Etch "] = propertyValue;
        }
        else if (indexact == 23) {
            this["SD Strip"] = propertyValue;
        }
        else if (indexact == 24) {
            this["SD Test Full"] = propertyValue;
        }
        else if (indexact == 25) {
            this["PVX Dep"] = propertyValue;
        }
        else if (indexact == 26) {
            this["VIA Mask"] = propertyValue;
        }
        else if (indexact == 27) {
            this["VIA Etch"] = propertyValue;
        }
        else if (indexact == 28) {
            this["2nd ITO Dep"] = propertyValue;
        }
        else if (indexact == 29) {
            this["2nd ITO Mask"] = propertyValue;
        }
        else if (indexact == 30) {
            this["2nd ITO Etch"] = propertyValue;
        }
        else if (indexact == 31) {
            this["Final AOI Inline full"] = propertyValue;
        }
        else if (indexact == 32) {
            this["Array Test"] = propertyValue;
        }
        else if (indexact == 33) {
            this["Final CUT  Repair"] = propertyValue;
        }
        else if (indexact == 34) {
            this["Final CVD Repair"] = propertyValue;
        }
        else if (indexact == 35) {
            this["Shipping"] = propertyValue;
        }
        else if (indexact == 36) {
            this["SUM"] = propertyValue;
        }
    };
    return sum_wip_array;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/m1m2wip.component.css":
/***/ (function(module, exports) {

module.exports = ".test{\r\n    color: rgb(151, 149, 18);\r\n    background-color: red;\r\n}\r\n/* 下面是 设置鼠标放到导航条的位置时候的 样式*/\r\n#MonthPage :hover {\r\n   font-size: 15px !important;\r\n   background-color: rgb(58, 59, 59) !important;\r\n}\r\n#CurrentPage :hover{\r\n    font-size: 15px !important;\r\n    background-color: rgb(58, 59, 59) !important;\r\n}\r\n/*下面是一级界面的样式设定 begin*/\r\n.setEchartFirst{\r\n  width: 96% !important;\r\n  margin-left: 2% !important;\r\n  background-color: rgba(14, 70, 116,0) !important;\r\n  border-radius: 10px !important;\r\n}\r\n.setSearchToolFirst1{\r\n    color:white !important;\r\n    font-size: 15px !important;\r\n}\r\n.setSearchToolFirst2{\r\n    color:white !important;\r\n    font-size: 15px !important;\r\n}\r\n.searchBtnFirst{\r\n    background-color: rgba(5, 10, 87,0) !important;\r\n}\r\n#aBtnFirst :hover{\r\n    background-color: rgb(63, 63, 65) !important;\r\n}\r\n#bBtnFirst :hover{\r\n    background-color: rgb(63, 63, 65) !important;\r\n}\r\n/*上面是一级界面的样式设定 end*/\r\n/* 下面是二级界面的 样式设定 begin */\r\n.setSearchTool{\r\n    width: 96% !important;\r\n    height: 60px !important;\r\n    margin-left: 2% !important;\r\n    /* border-style: solid !important;\r\n    border-color: rgb(83, 73, 73) !important;\r\n    box-shadow: 10px 10px 10px 10px !important; */\r\n\r\n    border-radius: 100px !important;\r\n\r\n    background-color:  rgba(245, 231, 231,0) !important;\r\n    color:  rgb(247, 244, 244) !important;\r\n    font-size: 15px !important;\r\n    \r\n    padding-top: 1px !important;\r\n    padding-left: 1.5% !important;\r\n\r\n    margin-top: -0.5% !important;\r\n}\r\n.setEchart{\r\n    width: 94% !important;\r\n    margin-left: 3% !important;\r\n    margin-right: 3% !important;\r\n}\r\n.setTable1{\r\n    width: 98% !important;\r\n    margin-left: 1% !important;\r\n    margin-top: 10px !important;\r\n    background-color: rgba(245, 231, 231,0) !important;\r\n}\r\n.setTable2{\r\n    width: 100% !important;\r\n    height: 300px !important;\r\n    margin-top: 10px !important;\r\n    border-style: solid !important;\r\n    border-color: azure !important;\r\n\r\n    background-color: antiquewhite !important;\r\n}\r\n/* 上面是 二级界面的 样式设定 end */\r\n/* 下面是三界界面的 样式设定 begin */\r\n.headerBlue {\r\n    background-color: #BDD7EE!important;\r\n    color: black!important;\r\n    border: 1px solid #9c9c9c!important;\r\n    font-weight: bold!important;\r\n  }\r\n/* 上面 是 三级界面 的 样式设定 end*/\r\n"

/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/m1m2wip.component.html":
/***/ (function(module, exports) {

module.exports = "<!-- 查询 时候的 提示 信息 -->\n<p-growl [(value)]=\"msgs\" life=\"10000\"></p-growl>\n\n<div class=\"ui-g\">\n    <!-- 1. 标题部分-->\n    <div class=\"ui-g-12\" style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n        <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n        <div class=\"ui-g-2\" style=\"margin-left:7%;font-size: 1.2em;font-weight: bold;margin-top: 0px;color: #F2F6FA\">\n            {{factoryNameFirst}} WIP\n        </div>\n        <!-- 一级界面控制按钮 -->\n        <div *ngIf=\"isFirst\" class=\"ui-g\">\n             <!-- 2.2.0 当前月份的名字-->\n          <div class=\"ui-g-2\" style=\"margin-top:3%;margin-left:0%;font-size: 16px;color: #F2F6FA;padding-top: 1%;padding-left: 2%\"><strong>{{currentMonthNameFirst}}</strong></div>\n            <div class=\"ui-g-7\"></div>\n          <!-- 2.1.1下面是右上角的切换的按钮 -->\n          <div class=\"ui-g-3\" style=\"margin-top:3%;margin-left:0%;color: #F2F6FA;padding-top: 0%\">\n            <button pButton label='Module' (click)=\"changeToModuleFirst()\"></button>\n            <button pButton label='S2' (click)=\"changeToS2First()\"></button>\n            <button pButton label='当前' (click)=\"changePage(2)\"></button>\n          </div>\n        </div>\n         <!-- 二级界面控制按钮 -->\n        <div *ngIf=\"isSecond\" class=\"ui-g\">\n            <div class=\"ui-g-8\"></div>\n              <!-- 2.2.1下面是右上角的切换的按钮 -->\n              <div class=\"ui-g-4\" style=\"margin-top:3%;margin-left:0%;color: #F2F6FA;padding-top: 0%\">\n                <button pButton label='Module' (click)=\"changeToModule()\"></button>\n                <button pButton label='S2' (click)=\"changeToS2()\"></button>\n                <button pButton label='返回' (click)=\"changePage(1)\"></button>\n                <button pButton label='计划' (click)=\"changePageFrom2to3()\"></button>\n            </div>\n        </div>\n\n         <!-- 三级界面控制按钮  ： 添加了返回到 二级界面的按钮-->\n         <div *ngIf=\"isUpload\" class=\"ui-g\">\n            <div class=\"ui-g-10\"></div>\n              <!-- 2.2.1下面是右上角的切换的按钮 -->\n              <div class=\"ui-g-2\" style=\"margin-top:3%;margin-left:0%;color: #F2F6FA;padding-top: 0%\">\n                <button pButton label='返回' icon=\"fa fa-home\" iconPos=\"left\" (click)=\"changePageFrom3to2()\"></button>\n            </div>\n        </div>\n    </div>\n    <!-- 2. 中间主体部分-->\n    <div class=\"ui-g-12\" style=\"height:100%;background-image: url('assets/bg3_02.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n        <!--2.1 一级界面 isFirst-->\n        <div *ngIf=\"isFirst\" class=\"ui-g-12\">\n         \n          <!-- 2.1.2下面是两个柱状图-->\n           <!-- 第一个柱状图 -->\n         <div class=\"ui-g-12\" [ngClass]=\"{setEchartFirst:true}\">\n            <!-- 筛选条-->\n            <div class=\"ui-g-12\" [ngClass]=\"{setSearchToolFirst1:true}\" style=\"margin-top:-3%;\">\n                <div class=\"ui-g-2\" ><strong>ProductSize : &nbsp;&nbsp;</strong></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-7%\"><p-multiSelect [options]='productSizeFirst1' [(ngModel)]='selectedSizesFirst1' [panelStyle]=\"{minWidth:'12em'}\"  scrollHeight='300px'></p-multiSelect></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-3%\"><strong>CheckIncode : &nbsp;&nbsp;</strong></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-7%\"><p-multiSelect [options]='checkInCodeFirst1' [(ngModel)]='selectedCodeFirst1' [panelStyle]=\"{minWidth:'12em'}\"  scrollHeight='300px'></p-multiSelect></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-3%\"><strong>LOTTYPE : &nbsp;&nbsp;</strong></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-7%\"><p-multiSelect [options]='lottypeFirst1' [(ngModel)]='selectedlottypeFirst1' [panelStyle]=\"{minWidth:'8em'}\"  scrollHeight='300px'></p-multiSelect></div>\n                <div class=\"ui-g-1\" id=\"aBtnFirst\" style=\"margin-left:-8%;\">\n                    <button  class=\"searchBtnFirst\" pButton icon='fa fa-search' iconPos='left' label=' ' (click)='searchDataFirst(1)'></button>\n                </div>\n            </div>\n            <!-- 柱状图-->\n            <div class=\"ui-g-12\"><div  echarts [options]=\"wip_chart1_first\" style=\"height:350px\"></div></div>\n         </div>\n         <div class=\"ui-g-1\"></div>\n           <!-- 第二个柱状图 -->\n         <div class=\"ui-g-12\"  [ngClass]=\"{setEchartFirst:true}\" *ngIf=\"true\">\n             <!-- 筛选条-->\n            <div class=\"ui-g-12\" [ngClass]=\"{setSearchToolFirst2:true}\" style=\"margin-top:-1%;\">\n                <div class=\"ui-g-2\"><strong>ProductSize : &nbsp;&nbsp;</strong></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-7%\"><p-multiSelect [options]='productSizeFirst2' [(ngModel)]='selectedSizesFirst2' [panelStyle]=\"{minWidth:'12em'}\"  scrollHeight='300px'></p-multiSelect></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-3%\"><strong>CheckIncode : &nbsp;&nbsp;</strong></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-7%\"><p-multiSelect [options]='checkInCodeFirst2' [(ngModel)]='selectedCodeFirst2' [panelStyle]=\"{minWidth:'12em'}\"  scrollHeight='300px'></p-multiSelect></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-3%\"><strong>LOTTYPE : &nbsp;&nbsp;</strong></div>\n                <div class=\"ui-g-2\" style=\"margin-left:-7%\"><p-multiSelect [options]='lottypeFirst2' [(ngModel)]='selectedlottypeFirst2' [panelStyle]=\"{minWidth:'8em'}\"  scrollHeight='300px'></p-multiSelect></div>\n                <div class=\"ui-g-1\" id=\"bBtnFirst\" style=\"margin-left:-8%;\">\n                    <button  class=\"searchBtnFirst\"  pButton icon='fa fa-search' iconPos='left' label=' ' (click)='searchDataFirst(2)'></button>\n                </div>\n            </div>\n            <!-- 柱状图-->\n            <div class=\"ui-g-12\"><div echarts [options]=\"wip_chart2_first\" style=\"height:350px\"></div></div>\n         </div>\n         <div class=\"ui-g-1\"></div>\n        </div>\n        <!-- 2.2 二级界面isSecond-->\n        <div *ngIf=\"isSecond\" class=\"ui-g-12\">\n           \n           \n        <!-- 2.2.2下面是二级界面的主体部分-->\n            \n        <!-- 1.1  上面的筛选查询的条Module  -->\n        <div class=\"ui-g\" *ngIf=\"!isS2\">\n        <div [ngClass]=\"{setSearchTool:true}\" class=\"ui-g-10\">\n        \n            <!-- 多选下拉框 checkincode -->\n            <div class=\"ui-g-3\">\n                <strong>CheckIncode :&nbsp;&nbsp;</strong>\n                <p-multiSelect class=\"modMultiSelect\" [options]=\"checkInCode\" [(ngModel)]=\"selectedCodes\" [panelStyle]=\"{minWidth:'12em'}\"\n                    scrollHeight=\"300px\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 checkincode end -->\n            &nbsp;&nbsp;&nbsp;\n            <!-- 多选下拉框 line -->\n            <div class=\"ui-g-3\" style=\"margin-left:-2%;\">\n                <strong>线体 :&nbsp;&nbsp;</strong>\n                <p-multiSelect [options]=\"Lines\" [(ngModel)]=\"selectedLines\" [panelStyle]=\"{minWidth:'12em'}\" scrollHeight=\"300px\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 line end -->\n            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n            <!--多选下拉框 productsize -->\n            <div class=\"ui-g-3\" style=\"margin-left:-7%\">\n                <strong>尺寸 :&nbsp;&nbsp;</strong>\n                <p-multiSelect [options]=\"productSize\" [(ngModel)]=\"selectedSizes\" [panelStyle]=\"{minWidth:'12em'}\" scrollHeight=\"300px\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 productsize end-->\n            &nbsp;&nbsp;&nbsp;\n            <!-- 时间选择框 -->\n            <div class=\"ui-g-3\" style=\"margin-left:-7%\">\n                <strong>时间点 :&nbsp;&nbsp;</strong>\n                <p-calendar id=\"modCalendar\" [(ngModel)]=\"searchTime\" [showTime]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\"\n                    yearRange=\"2009:2099\" [showIcon]=\"true\" dateFormat=\"yy-mm-dd\"></p-calendar>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 时间选择框end -->\n            &nbsp;&nbsp;&nbsp;\n            <div class=\"ui-g-1\" id=\"aBtnFirst\"  style=\"margin-left : -4%;\">\n                    <button  class=\"searchBtnFirst\"  pButton icon='fa fa-search' iconPos='left' label=' ' (click)='search()'></button>\n            </div>\n            <!-- <div class=\"ui-g-4\">\n                <button pButton type=\"button\" icon=\"fa fa-search\" iconPos=\"left\" label=\"Search\" (click)=\"search()\" class=\"ui-g-3\"></button>\n            </div> -->\n        </div>\n        </div>\n        <!-- 1.1 上面的筛选查询的条 end-->\n    \n        <!-- 1.2  上面的筛选查询的条 S2 -->\n        <div class=\"ui-g\" *ngIf=\"isS2\">\n        <div class=\"ui-g-1\"></div>\n        <div [ngClass]=\"{setSearchTool:true}\" class=\"ui-g-10\">\n    \n            <!-- 多选下拉框 checkincode -->\n            <div class=\"ui-g-3\">\n                <strong>CheckIncode :&nbsp;&nbsp;</strong>\n                <p-multiSelect [options]=\"checkInCode\" [(ngModel)]=\"selectedCodes\" [panelStyle]=\"{minWidth:'12em'}\" scrollHeight=\"300px\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 checkincode end -->\n    \n            <!-- 多选下拉框 line -->\n            <div class=\"ui-g-3\" style=\"margin-left:-2%;\">\n                <strong>线体 :&nbsp;&nbsp;</strong>\n                <p-multiSelect [options]=\"Lines\" [(ngModel)]=\"selectedLines\" [panelStyle]=\"{minWidth:'12em'}\" scrollHeight=\"300px\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 line end -->\n    \n            <!--多选下拉框 productsize -->\n            <div class=\"ui-g-3\" style=\"margin-left:-7%\">\n                <strong>尺寸 ： &nbsp;&nbsp;</strong>\n                <p-multiSelect [options]=\"productSize\" [(ngModel)]=\"selectedSizes\" [panelStyle]=\"{minWidth:'12em'}\" scrollHeight=\"300px\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 productsize end-->\n    \n            <!--多选下拉框 producttype -->\n            <div class=\"ui-g-2\"  style=\"margin-left:-7%\">\n                <strong *ngIf=\"isS2\">型号 ： &nbsp;&nbsp;</strong>\n                <p-multiSelect *ngIf=\"isS2\" [options]=\"productType\" [(ngModel)]=\"selectedTypes\" [panelStyle]=\"{minWidth:'12em'}\">\n                </p-multiSelect>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 多选下拉框 productsize end-->\n    \n    \n            <!-- 时间选择框 -->\n            <div class=\"ui-g-3\" style=\"margin-left:-2%\">\n                <strong>时间点 ：&nbsp;&nbsp;</strong>\n                <p-calendar id=\"s2Calendar\" [(ngModel)]=\"searchTime\" [showTime]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\"\n                    yearRange=\"2009:2099\" [showIcon]=\"true\" dateFormat=\"yy-mm-dd\"></p-calendar>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n            <!-- 时间选择框end -->\n    \n            <div class=\"ui-g-1\" id=\"aBtnFirst\" style=\"margin-left: 95%;margin-top: -3%;\">\n                    <button  class=\"searchBtnFirst\"  pButton icon='fa fa-search' iconPos='left' label=' ' (click)='search()'></button>\n            </div>\n            <!-- <div class=\"ui-g-2\">\n                <button pButton type=\"button\" icon=\"fa fa-search\" iconPos=\"left\" label=\"Search\" (click)=\"search()\"></button>\n            </div> -->\n        </div>\n        </div>\n        <!-- 1..2 上面的筛选查询的条 end-->\n    \n    \n        <!-- 2 中间的wip柱状图 -->\n        <!-- <div class=\"ui-g-1\"></div> -->\n        <div [ngClass]=\"{setEchart:true}\" class=\"ui-g-12\" >\n            <div echarts [options]=\"wip_chart_seconde\" class=\"demo-chart\" style=\"height:600px;margin-top:-2%;\"></div>\n        </div>\n    \n    \n         <!--3.1 下面的表格 : 这一部分是已经不需要的代码-->\n        <!-- data gride area -->\n        <div class=\"ui-g-12\" *ngIf=\"false\">\n            <div class=\"ui-g-1\"></div>\n            <div [ngClass]=\"{setTable1:true}\" class=\"ui-g-10\">\n                <div style=\"margin-top:-4%;\">\n                    <p-table [columns]=\"tableCols\">\n                        <ng-template pTemplate=\"header\" let-columns>\n                            <tr>\n                                <th *ngFor=\"let col of columns\" style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">\n                                    {{col.header}}\n                                </th>\n                            </tr>\n                            <tr>\n                                <th style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">Plan</th>\n                                <th *ngFor=\"let sumnum of tableDataSum\" style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">{{sumnum}}</th>\n                            </tr>\n                            <tr>\n                                <th style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">ACT</th>\n                                <th *ngFor=\"let sumnum of tableDataSum\" style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">{{sumnum}}</th>\n                            </tr>\n                            <tr>\n                                <th style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">差值</th>\n                                <th *ngFor=\"let sumnum of tableDataSum\" style=\"font-size:12px;background-color: rgba(0,0,0,0.1);color: aliceblue\">{{sumnum}}</th>\n                            </tr>\n                        </ng-template>\n                    </p-table>\n                </div>\n            </div>                                                                                                                                                                                                                                             \n        </div>\n        <!-- end data gride area -->\n    \n        <!--3.2 下面的表格 这一部分已经是不需要的代码了-->\n        <!-- data gride area -->\n        <div class=\"ui-g-1\"></div>\n        <div *ngIf=\"false\" [ngClass]=\"{setTable2:false}\" class=\"ui-g-10\">\n        <p-panel>\n            <p-header>\n                <div class=\"ui-helper-clearfix\">\n                    <span class=\"ui-panel-title\">WIP二级视图{{factoryName}}</span>\n                </div>\n            </p-header>\n            <div class=\"ui-panel-content\">\n                <!-- if you use selection, you must set datakey -->\n                <p-table [columns]=\"tableCols\" #chartGride>\n                    <ng-template pTemplate=\"header\" let-columns>\n                        <tr>\n                            <th *ngFor=\"let col of columns\">\n                                {{col.header}}\n                            </th>\n                        </tr>\n                        <tr *ngFor=\"let obj of tableData\">\n                            <th>{{obj.fgCode}}</th>\n                            <th *ngFor=\"let data of obj.pnlqty\">{{data}}</th>\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </p-panel>\n        </div>\n         <!-- end data gride area -->\n        </div>\n        <!--2.3 三级界面  ： 导入生产计划 -->\n        <div *ngIf=\"isUpload\" class=\"ui-g-12\">\n            <div class=\"ui-g\"> \n                <p-growl [(value)]=\"msgs\"></p-growl>\n              <div class=\"ui-g-11\" style=\"margin-left:5%\">     \n                  <p-tabView>\n                    <p-tabPanel header=\"Excel导入\" leftIcon=\"pi pi-calendar\">\n                      \n                      <div class=\"ui-g\">\n                        \n                        <div class=\"ui-g-12\" style=\"text-align:center;font-size: 1.2em;font-weight: bold;width: 100%;height: 5%;background-color: rgb(224, 221, 221)\">生产计划导入界面 - {{factoryNameFirst}} WIP</div>\n                        <!-- 选择文件的按钮-->\n                        <div class=\"ui-g-2\" style=\"margin-top:0%;margin-bottom:-1%\"><p-fileUpload mode=\"basic\" chooseLabel=\"选择文件\" name=\"myfile[]\" url=\"./api/file/upload\" accept=\".xls,.xlsx\" maxFileSize=\"1000000\" (onUpload)=\"onBasicUpload($event);\"></p-fileUpload></div> \n                      </div>\n                     <div class=\"ui-g\">\n                            <div class=\"ui-g-12\">\n              \n                              <p-panel>\n                                  <p-header>\n                                      <div class=\"ui-helper-clearfix\">\n                                          <span class=\"ui-panel-title\">Excel数据展示</span>\n                                          <span style=\"float: right;\" *ngIf=\"showFlag\">是否保存到数据库？\n                                              <p-button   icon=\"fa fa-plus\" label=\"保存\" [disabled]=\"false\"\n                                              (onClick)=\"saveExcelImportInfo()\"></p-button>\n                                            <p-button  icon=\"fa fa-plus\" label=\"取消\" [disabled]=\"false\"\n                                                (onClick)=\"cancel()\"></p-button>\n                                            </span>\n                                          \n                                      </div>\n                                  </p-header>\n              \n                                    \n                                    <p-table #dt [columns]=\"cols\" [value]=\"pageData\" selectionMode=\"single\" [(selection)]=\"selectedData\"  >\n                                            <ng-template pTemplate=\"header\" let-columns>\n                                              <tr>\n                                                <th class=\"headerBlue\">Factory</th>\n                                                <th class=\"headerBlue\">Operation</th>\n                                                <th class=\"headerBlue\">Qty</th>\n                                              </tr>\n                                            </ng-template>\n                                            <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" >\n                                                <tr style=\"text-align:center\">   \n                                                  <td *ngFor=\"let col of columns\">\n                                                    {{rowData[col.field]}}\n                                                  </td>\n                                                </tr>\n                                            </ng-template>\n                                            <ng-template pTemplate=\"summary\">\n                                                <p-paginator [rows]=\"rows\" [totalRecords]=\"totalRecords\" \n                                                (onPageChange)=\"paginate($event)\" #p [rowsPerPageOptions]=\"rowsPerPageOptions\"  pageLinkSize=\"5\"></p-paginator>\n                                            </ng-template>\n                                          </p-table>                       \n                                 </p-panel>\n                            </div>\n                        </div>\n                    </p-tabPanel>\n              \n                    <p-tabPanel header=\"Excel模板下载\" leftIcon=\"pi pi-calendar\">\n                     <div class=\"ui-g\">\n                            <div class=\"ui-g-12\">\n              \n                              <p-panel>\n                                  <p-header>\n                                      <div class=\"ui-helper-clearfix\">\n                                          <span class=\"ui-panel-title\">Excel数据表模板</span>  \n                                          <button type=\"button\" pButton icon=\"fa fa-file\" iconPos=\"left\" label=\"下载模板\" (click)=\"dt.exportCSV()\" style=\"float:right\"></button>\n                                      </div>\n                                  </p-header>\n              \n                                    \n                                    <p-table #dt [columns]=\"cols\" selectionMode=\"single\" [(selection)]=\"selectedData\"  >\n                                            <ng-template pTemplate=\"header\" let-columns>\n                                              <tr>\n                                                <th class=\"headerBlue\">Factory</th>\n                                                <th class=\"headerBlue\">Operation</th>\n                                                <th class=\"headerBlue\">Qty</th>\n                                              </tr>\n                                            </ng-template>\n              \n                                          </p-table>                       \n              </p-panel>\n                            </div>\n                        </div>\n                    </p-tabPanel>\n                   \n                </p-tabView>\n              </div>\n              \n              \n              \n              </div>\n        </div>\n    </div>\n    <!-- 3. 最后的背景图片-->\n    <div class=\"ui-g-12\" style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n    </div>\n</div>"

/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/m1m2wip.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return M1m2wipComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_ModuleWipObject__ = __webpack_require__("./src/app/toumingdisplan/m1m2wip/model/ModuleWipObject.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_TableData__ = __webpack_require__("./src/app/toumingdisplan/m1m2wip/model/TableData.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_core_layout_retab_service_tab_service__ = __webpack_require__("./src/core/layout/retab/service/tab.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__boe_ui_boe_list_service_file_upload_service__ = __webpack_require__("./src/app/boe-ui/boe-list/service/file-upload.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_messageservice__ = __webpack_require__("./node_modules/primeng/components/common/messageservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_messageservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_primeng_components_common_messageservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_selectItemModel__ = __webpack_require__("./src/app/toumingdisplan/m1m2wip/model/selectItemModel.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_TableCols__ = __webpack_require__("./src/app/toumingdisplan/m1m2wip/model/TableCols.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var M1m2wipComponent = /** @class */ (function () {
    function M1m2wipComponent(apiService, tService, file, messageService) {
        this.apiService = apiService;
        this.tService = tService;
        this.file = file;
        this.messageService = messageService;
        this.factoryName = 'MODULE'; // 这个标题用来控制选择的对象是Module 还是 S2,查询用的
        this.isFirst = false; // 控制一级试图还是二级试图的操作
        this.isSecond = true; // 控制二级试图还是二级试图的操作
        this.isUpload = false; // 控制是否是 导入生产计划的操作
        this.checkInCode = []; // checkincode 的下拉框
        this.selectedCodes = []; // 定义这个被选中的code
        this.selectedLines = []; // 这个变量就是用来保存被选中的数据的
        this.selectedSizes = []; // 被选中的productsize
        this.selectedTypes = []; // 被选中的producttype
        this.isS2 = false; // 判断是够是S2 的标志位
        this.searchTime = new Date();
        this.xAxisLabel = []; // x轴坐标的内容 ,二级柱状图的
        this.legendsLabel = []; // 图例的坐标内容二级柱状图的
        this.dataArray = []; // 用来保存所得数据转换之后的对象的数组 二级柱状图的
        this.tableCols = []; // 表格的 列 的定义数组 二级表格的
        this.tableData = []; // 保存 表格中 数据的数组 二级表格的 
        this.tableDataSum = []; // 保存每隔站点的总和的 数据的数组，其中的数据需要和表头的数据对应上 二级表格的
        this.plandata = []; //保存 二级柱状图中 plan 横轴的数据
        this.subdata = []; // 保存 二级柱状图中 差值 横轴的数据
        /************上面的定义都是二级视图的 end ******************************************** */
        this.xAxisLabel_first = []; // x轴坐标的内容 ,一级柱状图的
        this.legendsLabel_first = []; // 图例的坐标内容，一级柱状图的
        this.serises_array_first = []; // 柱状图的坐标系中的实际的数据内容
        //一级柱状图上面的尺寸别筛选下拉框
        this.productSizeFirst1 = [];
        this.selectedSizesFirst1 = [];
        this.productSizeFirst2 = [];
        this.selectedSizesFirst2 = [];
        //一级柱状图上面的checkincode筛选下拉框
        this.checkInCodeFirst1 = [];
        this.selectedCodeFirst1 = [];
        this.checkInCodeFirst2 = [];
        this.selectedCodeFirst2 = [];
        //一级柱状图上面的lottype筛选下拉框
        this.lottypeFirst1 = [
            { label: '非Z', value: '非Z' },
            { label: 'Z', value: 'Z' }
        ];
        this.selectedlottypeFirst1 = ['非Z', 'Z'];
        this.lottypeFirst2 = [
            { label: '非Z', value: '非Z' },
            { label: 'Z', value: 'Z' }
        ];
        this.selectedlottypeFirst2 = ['非Z', 'Z'];
        //页面切换按钮的名字
        this.pageName = 'MonthPage'; //MonthPage 月别的页面 CurrentPage 当前的页面
        //一级界面 工厂名称的切换标志
        this.factoryNameFirst = 'Module'; //  Module  s2 就这两个值
        //查询 切换 时候的提示信息
        this.msgs = [];
        //一级界面的月份显示
        this.currentMonthNameFirst = '';
        this.cols = [
            { field: 'factory', header: 'Factory' },
            { field: 'operation', header: 'Opeartion' },
            { field: 'qty', header: 'Qty' }
        ];
        this.showFlag = false;
        this.uploadedFiles = [];
        this.rows = 10;
        this.rowsPerPageOptions = [10, 50, 100];
        this.pageInfo = { pageRow: this.rows, startRow: 0 };
    }
    //这个方法就是一个模板的方法，不知道为什么这样写，但是就是这样写
    M1m2wipComponent.prototype.onUpload = function (event) {
        for (var _i = 0, _a = event.files; _i < _a.length; _i++) {
            var file = _a[_i];
            this.uploadedFiles.push(file);
        }
        this.messageService.add({ severity: 'info', summary: 'File Uploaded', detail: '' });
    };
    M1m2wipComponent.prototype.ngOnInit = function () {
        var _this = this;
        // 获取当前月的名字
        this.currentMonthNameFirst = this.getCurrentMonthFirst();
        this.msgs = [{ severity: 'info', summary: '初始化页面', detail: '正在初始化页面' }];
        // 1.初始化的时候展示一级视图，关闭二级视图
        this.isFirst = true;
        this.isSecond = false;
        // 2.获取x轴的日期信息
        this.getXaxisLable();
        // 单独获取坐标轴
        this.legendsLabel_first = this.getLegendsFirst('Module');
        //  console.log("thisthisthis ...");
        //  console.log(this.legendsLabel_first);
        //3.1 . 获取数据 ，创建 一级柱状图
        var url_wip_first_mnt = '/module/wipfirst';
        var optionmnt = {
            params: {
                types: ['MNT']
            }
        };
        this.apiService.get(url_wip_first_mnt, optionmnt).subscribe(function (res) {
            _this.getDataFirst(res, 'Module', 'MNT');
            _this.productSizeFirst1 = _this.createDrownArrayFirst(_this.selectedSizesFirst1);
            _this.checkInCodeFirst1 = _this.createDrownArrayFirst(_this.selectedCodeFirst1);
            //4. 两个一级视图
            _this.setWipChart1First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'Module MNT');
            if (_this.msgs[0].severity == 'info') {
                _this.msgs = [];
            }
            _this.msgs.push({ severity: 'success', summary: '初始化页面', detail: 'MNT完成' });
        }, function (error) { console.log(error); });
        //3.2 . 获取数据 ，创建 一级柱状图
        var url_wip_first__tv = '/module/wipfirst';
        var optiontv = {
            params: {
                types: ['TV']
            }
        };
        this.apiService.get(url_wip_first__tv, optiontv).subscribe(function (res) {
            _this.getDataFirst(res, 'Module', 'TV');
            _this.productSizeFirst2 = _this.createDrownArrayFirst(_this.selectedSizesFirst2);
            _this.checkInCodeFirst2 = _this.createDrownArrayFirst(_this.selectedCodeFirst2);
            //4. 两个一级视图
            _this.setWipChart2First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'Module TV');
            if (_this.msgs[0].severity == 'info') {
                _this.msgs = [];
            }
            _this.msgs.push({ severity: 'success', summary: '初始化页面', detail: 'TV完成' });
        }, function (error) { console.log(error); });
    };
    //下面是进行查询的方法 ： 是这个页面中的主要方法 二级柱状图
    M1m2wipComponent.prototype.search = function () {
        var _this = this;
        if (this.selectedLines.length != 0 && this.selectedCodes.length != 0 && this.selectedSizes.length != 0) {
            //1.进行查询
            var timestr = this.getTimeStr(this.searchTime);
            var option = void 0;
            var url = void 0;
            if (this.factoryName == 'MODULE') {
                option = {
                    params: {
                        hourtimekey: timestr,
                        checkincodes: this.selectedCodes,
                        lines: this.selectedLines,
                        productsizes: this.selectedSizes
                    }
                };
                url = '/module/wip';
            }
            else if (this.factoryName == 'S2') {
                option = {
                    params: {
                        hourtimekey: timestr,
                        checkincodes: this.selectedCodes,
                        lines: this.selectedLines,
                        productsizes: this.selectedSizes,
                        producttypes: this.selectedTypes
                    }
                };
                url = '/S2/wip';
            }
            this.apiService.get(url, option).subscribe(function (res) {
                _this.getData(res);
                // console.log(this.xAxisLabel);
                // console.log(this.legendsLabel);
                _this.createTableCols(_this.dataArray);
                _this.createTable1Data(_this.dataArray, _this.xAxisLabel); // 创建 Plan数据的内
                //查询导入的计划
                _this.importExcelInfo();
                setTimeout(function () {
                    _this.setWipChartSecond(_this.xAxisLabel, _this.legendsLabel, 90, 110, 30, _this.plandata, _this.tableDataSum, _this.subdata);
                }, 1000);
                //console.log(this.xAxisLabel);
                //this.createTable2Data(this.dataArray);
                //console.log(this.tableData);
            }, function (error) { console.log(error); });
        }
        else {
            alert("当前查询条件不足！");
        }
    };
    //下面是画一级 柱状图的 操作
    M1m2wipComponent.prototype.setWipChart1First = function (xAxisLabel, lengdslabels, serisesarray, title) {
        this.wip_chart1_first = {
            title: {
                text: title,
                x: 'center',
                textStyle: {
                    color: 'white'
                }
            },
            tooltip: {
                trigger: 'axis',
                triggerOn: 'onmousemove',
                axisPointer: {
                    type: 'shadow',
                    label: {
                        show: true,
                        textStyle: {
                            color: 'black'
                        }
                    }
                },
                backgroundColor: 'rgba(0,0,0,0.8)',
                formatter: function (params) {
                    var tip = '';
                    var isenter = false; // 控制是否换行的标志位
                    var isou = false;
                    for (var i = 0; i < params.length; i++) {
                        isenter = (params[i].value != 0 && params[i].seriesName != 'sum'); // 当对2求余,不为0的时候控制换行
                        isou = (i % 2 == 0);
                        if (isenter) {
                            tip = tip + params[i].marker + params[i].seriesName + " : " + params[i].value + "<br />";
                        }
                        // else{
                        //     let currenttip = params[i].marker+params[i].seriesName+" : "+params[i].value+";";
                        //     let lengthq = currenttip.length;
                        //     if(lengthq < 155){
                        //         let cha = 155-lengthq; // 求出差多少来
                        //         for(let i = 0 ; i < cha;i++){
                        //             currenttip = currenttip+'&nbsp;';
                        //         }
                        //     };
                        //     tip = tip+currenttip;
                        // }
                    }
                    return tip;
                }
            },
            legend: {
                type: 'scroll',
                orient: 'vertical',
                right: 30,
                bottom: 20,
                top: 10,
                textStyle: {
                    color: 'white'
                },
                pageTextStyle: {
                    color: 'white'
                },
                pageIconColor: 'green',
                pageIconInactiveColor: 'gray',
                data: lengdslabels
            },
            grid: {
                left: '3%',
                right: '13%',
                bottom: '3%',
                containLabel: true
            },
            xAxis: [
                {
                    type: 'category',
                    interval: 2,
                    axisLabel: {
                        color: 'white'
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    data: xAxisLabel
                }
            ],
            yAxis: [
                {
                    name: 'PanleQty',
                    type: 'value',
                    yAxisIndex: 0,
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    axisLabel: {
                        color: 'white',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'K';
                            }
                            else {
                                return value + '';
                            }
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    name: 'GlassQty',
                    type: 'value',
                    yAxisIndex: 1,
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    axisLabel: {
                        color: 'white',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'K';
                            }
                            else {
                                return value + '';
                            }
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: serisesarray
        };
    };
    M1m2wipComponent.prototype.setWipChart2First = function (xAxisLabel, lengdslabels, serisesarray, title) {
        this.wip_chart2_first = {
            title: {
                text: title,
                x: 'center',
                textStyle: {
                    color: 'white'
                }
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow',
                    label: {
                        show: true,
                        textStyle: {
                            color: 'black'
                        }
                    }
                },
                backgroundColor: 'rgba(0,0,0,0.8)',
                formatter: function (params) {
                    var tip = '';
                    var isenter = false; // 控制是否换行的标志位
                    for (var i = 0; i < params.length; i++) {
                        isenter = (params[i].value != 0 && params[i].seriesName != 'sum'); // 当对2求余,不为0的时候控制换行
                        if (isenter) {
                            tip = tip + params[i].marker + params[i].seriesName + " : " + params[i].value + "<br />";
                        }
                        // else{
                        //     let currenttip = params[i].marker+params[i].seriesName+" : "+params[i].value+";";
                        //     let lengthq = currenttip.length;
                        //     if(lengthq < 155){
                        //         let cha = 155-lengthq; // 求出差多少来
                        //         for(let i = 0 ; i < cha;i++){
                        //             currenttip = currenttip+'&nbsp;';
                        //         }
                        //     };
                        //     tip = tip+currenttip;
                        // }
                    }
                    return tip;
                }
            },
            legend: {
                type: 'scroll',
                orient: 'vertical',
                right: 30,
                bottom: 20,
                top: 10,
                textStyle: {
                    color: 'white'
                },
                pageTextStyle: {
                    color: 'white'
                },
                pageIconColor: 'green',
                pageIconInactiveColor: 'gray',
                data: lengdslabels
            },
            grid: {
                left: '3%',
                right: '13%',
                bottom: '3%',
                containLabel: true
            },
            xAxis: [
                {
                    type: 'category',
                    interval: 0,
                    axisLabel: {
                        color: 'white'
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    data: xAxisLabel
                }
            ],
            yAxis: [
                {
                    name: 'PanleQty',
                    type: 'value',
                    yAxisIndex: 0,
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    axisLabel: {
                        color: 'white',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'K';
                            }
                            else {
                                return value + '';
                            }
                        }
                    },
                    splitLine: {
                        show: false
                    }
                },
                {
                    name: 'GlassQty',
                    type: 'value',
                    yAxisIndex: 1,
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    axisLabel: {
                        color: 'white',
                        formatter: function (value) {
                            if (value > 999) {
                                return value / 1000 + 'K';
                            }
                            else {
                                return value + '';
                            }
                        }
                    },
                    splitLine: {
                        show: false
                    }
                }
            ],
            series: serisesarray
        };
    };
    //下面是画二级 柱状图的操作
    M1m2wipComponent.prototype.setWipChartSecond = function (xlabel, lengdslabel, rotatem, offsetfirst, xlength, PlanNumber, ACTNumber, subNumber) {
        this.wip_chart_seconde = {
            title: {
                text: this.factoryName + ' WIP',
                x: 'center',
                y: 20,
                textStyle: {
                    color: 'white'
                },
            },
            tooltip: {
                trigger: 'item',
                axisPointer: {
                    type: 'shadow',
                },
                backgroundColor: 'rgba(0,0,0,0.7)',
            },
            legend: {
                type: 'scroll',
                y: 'bottom',
                left: 50,
                right: 50,
                //orient:'vertical', // 设置垂直样式
                // right:30,  // 设置位置
                // top:20,  
                // bottom:90, // 设置位置，和top配合可以实现展示
                textStyle: {
                    color: 'white'
                },
                pageTextStyle: {
                    color: 'white'
                },
                pageIconColor: 'green',
                pageIconInactiveColor: 'gray',
                data: lengdslabel
            },
            grid: {
                top: '15%',
                left: '2%',
                right: '2%',
                bottom: '20%',
                containLabel: true
            },
            xAxis: [
                {
                    type: 'category',
                    axisLabel: {
                        interval: 0,
                        color: 'white',
                        rotate: rotatem //x轴的刻度旋转度数，通过参数传递进来的
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    data: xlabel
                },
                {
                    name: 'Plan',
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: PlanNumber
                },
                {
                    name: 'ACT',
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: ACTNumber
                },
                {
                    name: '差值',
                    nameLocation: 'start',
                    nameTextStyle: {
                        color: '#F2F6FA',
                        padding: [27, -5, 0, 0] //这个是设置名字的位置：通过内边距进行上、右、下、作的设置进行
                    },
                    position: 'bottom',
                    offset: offsetfirst + xlength * 2,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    axisTick: {
                        length: xlength,
                        inside: false,
                        lineStyle: { color: '#455e9c' }
                    },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                    data: subNumber
                },
                {
                    position: 'bottom',
                    offset: offsetfirst + xlength * 3,
                    type: 'category',
                    axisLine: {
                        lineStyle: { color: '#455e9c' },
                        onZero: false,
                        show: true //设置这一条x轴是否可见
                    },
                    // axisTick: {//这个设置的是竖着的那条线是什么样子的：暂时没有用
                    //   length: xlength,
                    //   inside: false,//设置方向：true:向右，false：向左
                    //   lineStyle: { color: '#455e9c' }
                    // },
                    axisLabel: {
                        color: '#F2F6FA',
                        interval: 0,
                        inside: false,
                        rotate: '0'
                    },
                    inverse: false,
                }
            ],
            yAxis: [
                {
                    name: 'PanelQty',
                    type: 'value',
                    axisLabel: {
                        color: 'white',
                        formatter: function (value) {
                            var res = '';
                            if (value > 999) {
                                res = value / 1000 + 'k';
                            }
                            else {
                                res = value + '';
                            }
                            return res;
                        }
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    yAxisIndex: 0
                },
                {
                    name: 'GalssQty',
                    type: 'value',
                    axisLabel: {
                        color: 'white'
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    splitLine: {
                        show: false,
                    },
                    yAxisIndex: 1
                }
            ],
            series: this.setSeriesOption(this.dataArray, this.legendsLabel, this.xAxisLabel)
        };
        // 自定义标签的显示内容 的方法 ： 
        function formatterTip(params) {
            var tip = 'PanelQty : <br />';
            for (var i = 0; i < params.length; i++) {
                if (params[i].value != 0) {
                    tip = tip + params[i].marker + params[i].seriesName + ' : ' + params[i].value + '<br />';
                }
            }
            return tip;
        }
    };
    //下面是获取查询参数并且创建下拉框的对象的方法 二级柱状图
    M1m2wipComponent.prototype.createDrownArray = function (data) {
        var objectArray = [];
        if (Array.isArray(data)) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var object = data_1[_i];
                var newobject = new __WEBPACK_IMPORTED_MODULE_7__model_selectItemModel__["a" /* selectObject */]();
                for (var prop in object) {
                    var valuestr = object[prop];
                    newobject.setProperty('label', valuestr.toString().trim()); //为新的对象赋值操作
                    newobject.setProperty('value', valuestr.toString().trim());
                }
                objectArray.push(newobject);
            }
        }
        return objectArray;
    };
    //下面是获取时间格式的方法 ： 2019010811 二级柱状图
    M1m2wipComponent.prototype.getTimeStr = function (time) {
        var today;
        if (time != null) {
            today = time;
        }
        else {
            today = new Date();
        }
        var year = today.getFullYear();
        var month = today.getMonth() + 1;
        var date = today.getDate();
        var hour = today.getHours();
        var yeastr = year + '';
        var monthstr = '';
        var datestr = '';
        var hourstr = '';
        if (month < 10) {
            monthstr = '0' + month;
        }
        else {
            monthstr = '' + month;
        }
        if (date < 10) {
            datestr = '0' + date;
        }
        else {
            datestr = '' + date;
        }
        if (hour < 10) {
            hourstr = '0' + hour;
        }
        else {
            hourstr = '' + hour;
        }
        return yeastr + monthstr + datestr + hourstr;
    };
    //下面是 进行 格式化数据的操作 ,转换成对象的操作 二级柱状图
    M1m2wipComponent.prototype.getData = function (data) {
        this.xAxisLabel = [];
        this.legendsLabel = [];
        this.dataArray = [];
        this.legendsLabel.push('GlassQty');
        if (Array.isArray(data)) {
            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                var obj = data_2[_i];
                var newobject = new __WEBPACK_IMPORTED_MODULE_1__model_ModuleWipObject__["a" /* moduleWipObject */]();
                for (var prop in obj) {
                    //如果是 fgCode 的话，就保存起来=>图例的数组
                    if (prop == 'hourTimeKey') {
                        newobject.setHourTimekey(obj[prop]);
                    }
                    if (prop == 'fgCode') {
                        if (!this.legendsLabel.includes(obj[prop])) {
                            this.legendsLabel.push(obj[prop]);
                        }
                        newobject.setFgCode(obj[prop]);
                    }
                    if (prop == 'checkInCode') {
                        newobject.setcheckInCode(obj[prop]);
                    }
                    if (prop == 'line') {
                        newobject.setline(obj[prop]);
                    }
                    if (prop == 'productSize') {
                        newobject.setproductSize(obj[prop]);
                    }
                    if (prop == 'productType') {
                        newobject.setproductType(obj[prop]);
                    }
                    //如果是operationDesc, 就保存起来=>x轴标签的数组
                    if (prop == 'operationDesc') {
                        if (!this.xAxisLabel.includes(obj[prop])) {
                            this.xAxisLabel.push(obj[prop]);
                        }
                        newobject.setoperationDesc(obj[prop]);
                    }
                    if (prop == 'glsQty') {
                        newobject.setglsQty(parseInt(obj[prop]));
                    }
                    if (prop == 'pnlQty') {
                        newobject.setpnlQty(parseInt(obj[prop]));
                    }
                }
                this.dataArray.push(newobject);
            }
            //最后添加一个 x轴的标签的内容
            this.xAxisLabel.push("");
            //this.legendsLabel.push('GlassQty1');
        }
    };
    //下面是创建柱状图  的 series 的方法： 二级柱状图
    M1m2wipComponent.prototype.setSeriesOption = function (obj, legends, xlabels) {
        var seriesArray = new Array(); // 用来存放每一个series 的数组
        //下面创建柱子
        for (var _i = 0, legends_1 = legends; _i < legends_1.length; _i++) {
            var legend = legends_1[_i];
            if (legend == 'GlassQty') {
                //创建一个line的glassQty的折线
                var seriseGlassData = []; // 用来保存glass的数据
                for (var _a = 0, xlabels_1 = xlabels; _a < xlabels_1.length; _a++) {
                    var xlable = xlabels_1[_a];
                    if (xlable != '') {
                        var glassSum = 0;
                        for (var _b = 0, obj_1 = obj; _b < obj_1.length; _b++) {
                            var object = obj_1[_b];
                            var operationdesc = object.operationDesc;
                            if (operationdesc == xlable) {
                                var glassqty = object.glsQty;
                                glassSum += glassqty;
                            }
                        }
                        seriseGlassData.push(glassSum);
                    }
                }
                var glassLine = {
                    name: 'GlassQty',
                    type: 'line',
                    itemStyle: {
                        normal: {
                            color: 'rgb(0, 255,106)',
                            label: {
                                show: true,
                                color: 'rgb(255, 255, 255)',
                                position: 'top'
                            }
                        }
                    },
                    yAxisIndex: 1,
                    data: seriseGlassData
                };
                seriesArray.push(glassLine);
            }
            else {
                var objTempArray = []; // 用来保存fgcode 是 legend的 对象的数组
                for (var _c = 0, obj_2 = obj; _c < obj_2.length; _c++) {
                    var objtemp = obj_2[_c];
                    var fgcode = objtemp.fgCode;
                    if (legend == fgcode) {
                        objTempArray.push(objtemp);
                    }
                }
                //下面的准备数据的操作
                var serisePanelData = [];
                for (var _d = 0, xlabels_2 = xlabels; _d < xlabels_2.length; _d++) {
                    var xlabel = xlabels_2[_d];
                    var panelSum = 0;
                    for (var _e = 0, objTempArray_1 = objTempArray; _e < objTempArray_1.length; _e++) {
                        var obj_3 = objTempArray_1[_e];
                        var objOperationdesc = obj_3.operationDesc;
                        if (objOperationdesc == xlabel) {
                            panelSum += obj_3.pnlQty;
                        }
                    }
                    serisePanelData.push(panelSum);
                }
                var panelbar = {
                    name: legend,
                    type: 'bar',
                    stack: 'aaa',
                    yAxisIndex: 0,
                    data: serisePanelData
                };
                //把欻功能键的serise对象放到数组中用来返回
                seriesArray.push(panelbar);
            }
        }
        // 最后将创建的这些个series返回
        return seriesArray;
    };
    //下面是根据xAxisLable的值动态的创建 col的方法 根据原始的数据单独做的 没有与上面的任何方法有任何的联系 二级表格
    M1m2wipComponent.prototype.createTableCols = function (dataArray) {
        var _this = this;
        this.tableCols = [{ field: '工序', header: '工序' }];
        var xlabels = [];
        for (var _i = 0, dataArray_1 = dataArray; _i < dataArray_1.length; _i++) {
            var obj = dataArray_1[_i];
            var xlabel = obj['operationDesc'];
            var fgcode = obj['fgCode'];
            if (!xlabels.includes(xlabel)) {
                xlabels.push(xlabel);
            }
        }
        xlabels.forEach(function (element) {
            var newCol = new __WEBPACK_IMPORTED_MODULE_8__model_TableCols__["a" /* col */];
            newCol.setField(element);
            newCol.setHeader(element);
            _this.tableCols.push(newCol);
        });
    };
    //下面是把每隔operationdesc 中的数据求和的操作   二级表格
    M1m2wipComponent.prototype.createTable1Data = function (dataArray, xlabels) {
        this.tableDataSum = [];
        for (var _i = 0, xlabels_3 = xlabels; _i < xlabels_3.length; _i++) {
            var xlable = xlabels_3[_i];
            if (xlable != '') {
                var pnlsum = 0;
                for (var _a = 0, dataArray_2 = dataArray; _a < dataArray_2.length; _a++) {
                    var obj = dataArray_2[_a];
                    var operdesc = obj.operationDesc;
                    if (operdesc == xlable) {
                        var pnlqty = obj.pnlQty;
                        pnlsum += pnlqty;
                    }
                }
                this.tableDataSum.push(pnlsum);
            }
        }
        // 计算最后的总和的操作:新添加的内容
        var total = 0;
        for (var _b = 0, _c = this.tableDataSum; _b < _c.length; _b++) {
            var aa = _c[_b];
            total += aa;
        }
        this.tableDataSum.push(total);
    };
    //下面是创建表格中的数据的方法 : 根据原始的数据单独做的 没有与上面的任何方法有任何的联系  二级表格
    M1m2wipComponent.prototype.createTable2Data = function (dataArray) {
        var _this = this;
        this.tableData = [];
        var xlabels = [];
        var fgCodes = [];
        for (var _i = 0, dataArray_3 = dataArray; _i < dataArray_3.length; _i++) {
            var obj = dataArray_3[_i];
            var xlabel = obj['operationDesc'];
            var fgcode = obj['fgCode'];
            if (!xlabels.includes(xlabel)) {
                xlabels.push(xlabel);
            }
            if (!fgCodes.includes(fgcode)) {
                fgCodes.push(fgcode);
            }
        }
        fgCodes.forEach(function (element) {
            var objTableData = new __WEBPACK_IMPORTED_MODULE_2__model_TableData__["a" /* tableData */];
            objTableData.setFgCode(element);
            //把所有 与 当前fgcode相同的对象 取出来
            var objects = [];
            for (var _i = 0, dataArray_4 = dataArray; _i < dataArray_4.length; _i++) {
                var obj = dataArray_4[_i];
                var fgcode = obj.fgCode;
                if (fgcode == element) {
                    objects.push(obj);
                }
            }
            //根据 xlabels 计算pnlqty的数量
            for (var _a = 0, xlabels_4 = xlabels; _a < xlabels_4.length; _a++) {
                var xlabel = xlabels_4[_a];
                var pnlqtySum = 0;
                for (var _b = 0, objects_1 = objects; _b < objects_1.length; _b++) {
                    var obj = objects_1[_b];
                    var operationdesc = obj.operationDesc;
                    if (operationdesc == xlabel) {
                        pnlqtySum += obj.pnlQty;
                    }
                }
                objTableData.setPnlqty(pnlqtySum);
            }
            _this.tableData.push(objTableData);
        });
    };
    //页面的切换操作 : 一级视图 和 二级 视图之间的切换
    M1m2wipComponent.prototype.changePage = function (msg) {
        if (msg == 2) {
            this.pageName = 'CurrentPage'; // 改变页面名字
            this.isFirst = false;
            this.isSecond = true;
            if (this.factoryNameFirst == 'Module') {
                this.changeToModule();
            }
            else {
                this.changeToS2();
            }
        }
        else if (msg == 1) {
            this.pageName = 'MonthPage'; // 改变页面名字
            this.isSecond = false;
            this.isFirst = true;
            if (this.factoryNameFirst == 'Module') {
                this.changeToModuleFirst();
            }
            else {
                this.changeToS2First();
            }
        }
    };
    //切换到 Module 的柱状图 一级界面
    M1m2wipComponent.prototype.changeToModuleFirst = function () {
        var _this = this;
        this.factoryNameFirst = "Module";
        this.selectedlottypeFirst1 = ['非Z', 'Z'];
        this.selectedlottypeFirst2 = ['非Z', 'Z'];
        this.msgs = [];
        this.msgs = [{ severity: 'info', summary: '切换', detail: '正在切换到Module界面' }];
        // 2.获取x轴的日期信息
        this.getXaxisLable();
        // 单独获取坐标轴
        this.legendsLabel_first = this.getLegendsFirst('Module');
        //3.1 . 获取数据 ，创建 一级柱状图
        var url_wip_first_mnt = '/module/wipfirst';
        var optionmnt = {
            params: {
                types: ['MNT']
            }
        };
        this.apiService.get(url_wip_first_mnt, optionmnt).subscribe(function (res) {
            _this.getDataFirst(res, 'Module', 'MNT');
            _this.productSizeFirst1 = _this.createDrownArrayFirst(_this.selectedSizesFirst1);
            _this.checkInCodeFirst1 = _this.createDrownArrayFirst(_this.selectedCodeFirst1);
            //4. 两个一级视图
            _this.setWipChart1First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'Module MNT');
            if (_this.msgs[0].severity == 'info') {
                _this.msgs = [];
            }
            _this.msgs.push({ severity: 'success', summary: '切换到 MNT', detail: 'Module MNT 切换成功' });
        }, function (error) { console.log(error); });
        //3.2 . 获取数据 ，创建 一级柱状图
        var url_wip_first__tv = '/module/wipfirst';
        var optiontv = {
            params: {
                types: ['TV']
            }
        };
        this.apiService.get(url_wip_first__tv, optiontv).subscribe(function (res) {
            _this.getDataFirst(res, 'Module', 'TV');
            _this.productSizeFirst2 = _this.createDrownArrayFirst(_this.selectedSizesFirst2);
            _this.checkInCodeFirst2 = _this.createDrownArrayFirst(_this.selectedCodeFirst2);
            //4. 两个一级视图
            _this.setWipChart2First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'Module TV');
            if (_this.msgs[0].severity == 'info') {
                _this.msgs = [];
            }
            _this.msgs.push({ severity: 'success', summary: '切换到 TV', detail: 'Module TV 切换成功' });
        }, function (error) { console.log(error); });
    };
    //切换到 S2 的柱状图  一级界面
    M1m2wipComponent.prototype.changeToS2First = function () {
        var _this = this;
        this.factoryNameFirst = 'S2';
        this.selectedlottypeFirst1 = ['非Z', 'Z'];
        this.selectedlottypeFirst2 = ['非Z', 'Z'];
        this.msgs = [];
        this.msgs = [{ severity: 'info', summary: '切换', detail: '正在切换到S2界面' }];
        //console.log(this.msgs[0].severity);
        // 2.获取x轴的日期信息
        this.getXaxisLable();
        // 单独获取坐标轴
        this.legendsLabel_first = this.getLegendsFirst('S2');
        //3.1 . 获取数据 ，创建 一级柱状图
        var url_wip_first_mnt = '/module/wipfirstS2';
        var optionmnt = {
            params: {
                types: ['COG']
            }
        };
        this.apiService.get(url_wip_first_mnt, optionmnt).subscribe(function (res) {
            _this.getDataFirst(res, 'S2', 'COG');
            _this.productSizeFirst1 = _this.createDrownArrayFirst(_this.selectedSizesFirst1);
            _this.checkInCodeFirst1 = _this.createDrownArrayFirst(_this.selectedCodeFirst1);
            //4. 两个一级视图
            _this.setWipChart1First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'S2 COG');
            try {
                if (_this.msgs.length > 0 && _this.msgs[0].severity == 'info') {
                    console.log(_this.msgs[0].severity + "  s21");
                    _this.msgs = [];
                }
            }
            catch (error) {
                console.log(error);
            }
            finally {
                _this.msgs.push({ severity: 'success', summary: '切换到 COG', detail: 'S2 COG 切换成功' });
            }
            // console.log(this.msgs);
        }, function (error) { console.log(error); });
        //3.2 . 获取数据 ，创建 一级柱状图
        var url_wip_first__tv = '/module/wipfirstS2';
        var optiontv = {
            params: {
                types: ['COF']
            }
        };
        this.apiService.get(url_wip_first__tv, optiontv).subscribe(function (res) {
            _this.getDataFirst(res, 'S2', 'COF');
            _this.productSizeFirst2 = _this.createDrownArrayFirst(_this.selectedSizesFirst2);
            _this.checkInCodeFirst2 = _this.createDrownArrayFirst(_this.selectedCodeFirst2);
            //4. 两个一级视图
            _this.setWipChart2First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'S2 COF');
            try {
                if (_this.msgs.length > 0 && _this.msgs[0].severity == 'info') {
                    //  console.log(this.msgs[0].severity+"s22");
                    _this.msgs = [];
                }
            }
            catch (error) {
                console.log(error);
            }
            finally {
                _this.msgs.push({ severity: 'success', summary: '切换到 COF', detail: 'S2 COF 切换成功' });
            }
            // console.log(this.msgs);
        }, function (error) { console.log(error); });
    };
    //切换到 Module 的界面 二级界面
    M1m2wipComponent.prototype.changeToModule = function () {
        var _this = this;
        this.wip_chart_seconde = null;
        this.selectedCodes = [];
        this.selectedLines = [];
        this.selectedSizes = [];
        this.selectedTypes = [];
        this.isS2 = false;
        this.factoryName = 'MODULE'; // 这个是用来控制search（）方法中的查询的 
        this.factoryNameFirst = 'Module';
        //1.读取checkincode 的列表
        var url_checkincode = '/modulewip/checkincode';
        this.apiService.get(url_checkincode).subscribe(function (res) {
            _this.checkInCode = _this.createDrownArray(res);
            for (var i = 0; i < _this.checkInCode.length; i++) {
                _this.selectedCodes.push(_this.checkInCode[i].value); //初始化赋值为全选中
            }
        });
        //2.读取line的列表
        var url_line = '/modulewip/line';
        this.apiService.get(url_line).subscribe(function (res) {
            _this.Lines = _this.createDrownArray(res);
            for (var i = 0; i < _this.Lines.length; i++) {
                _this.selectedLines.push(_this.Lines[i].value); //初始化赋值为全选中
            }
        });
        //3.读取 productsize 的列表
        var url_productsize = '/modulewip/productsizeM';
        //console.log(this.getTimeStr());
        var timestr = this.getTimeStr();
        var option = {
            params: {
                hourtimekey: timestr
            }
        };
        this.apiService.get(url_productsize, option).subscribe(function (res) {
            if (res.length == 0) {
                alert("当前时段 无 productsie 数据！");
            }
            else {
                _this.productSize = _this.createDrownArray(res);
                for (var i = 0; i < _this.productSize.length; i++) {
                    _this.selectedSizes.push(_this.productSize[i].value); //初始化赋值为第一个数据
                }
            }
        });
        setTimeout(function () {
            _this.search();
        }, 1000);
    };
    //切换到 S2 的界面 二级界面
    M1m2wipComponent.prototype.changeToS2 = function () {
        var _this = this;
        this.wip_chart_seconde = null;
        this.selectedCodes = [];
        this.selectedLines = [];
        this.selectedSizes = [];
        this.selectedTypes = [];
        this.isS2 = true;
        this.factoryName = 'S2';
        this.factoryNameFirst = 'S2';
        this.productType = [
            { label: 'COF', value: 'COF' },
            { label: 'COG', value: 'COG' },
        ];
        this.selectedTypes.push(this.productType[0].value);
        this.selectedTypes.push(this.productType[1].value);
        //1.读取checkincode 的列表
        var url_checkincode = '/modulewip/checkincode';
        this.apiService.get(url_checkincode).subscribe(function (res) {
            _this.checkInCode = _this.createDrownArray(res);
            for (var i = 0; i < _this.checkInCode.length; i++) {
                _this.selectedCodes.push(_this.checkInCode[i].value); //初始化赋值为全选中
            }
        });
        //2.读取line的列表
        var url_line = '/modulewip/line';
        this.apiService.get(url_line).subscribe(function (res) {
            _this.Lines = _this.createDrownArray(res);
            for (var i = 0; i < _this.Lines.length; i++) {
                _this.selectedLines.push(_this.Lines[i].value); //初始化赋值为全选中
            }
        });
        //3.读取 productsize 的列表
        var url_productsize = '/modulewip/productsizeS';
        // console.log(this.getTimeStr());
        var timestr = this.getTimeStr();
        var option = {
            params: {
                hourtimekey: timestr
            }
        };
        this.apiService.get(url_productsize, option).subscribe(function (res) {
            _this.productSize = _this.createDrownArray(res);
            for (var i = 0; i < _this.productSize.length; i++) {
                _this.selectedSizes.push(_this.productSize[i].value); //初始化赋值为第一个数据
            }
        });
        setTimeout(function () {
            _this.search();
        }, 1000);
    };
    // 下面是切换的 方法，，调用的是上面的 四个方法，
    M1m2wipComponent.prototype.handleChangeFirst = function () {
        if (this.checkedNameFirst) {
            this.factoryNameFirst = 'S2';
            this.changeToS2First();
        }
        else {
            this.factoryNameFirst = 'Module';
            this.changeToModuleFirst(); // 当 切换的变量是 false 的时候，就展示 Module 的内容
        }
    };
    //创建柱状图x轴的label 一级柱状图
    M1m2wipComponent.prototype.getXaxisLable = function () {
        this.xAxisLabel_first = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
            '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
            '21', '22', '23', '24', '25', '26', '27', '28'];
        var today = new Date();
        var year = today.getFullYear();
        var month = today.getMonth() + 1;
        //如果月份是 1 3 5 7 8 10 12 则是31天
        //如果月份是 4 6 9 11 则是30天
        //如果月份是 2 则判断闰年从而确定是28 天还是 29 天
        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
            this.xAxisLabel_first.push('29');
            this.xAxisLabel_first.push('30');
            this.xAxisLabel_first.push('31');
        }
        else if (month == 4 || month == 6 || month == 9 || month == 11) {
            this.xAxisLabel_first.push('29');
            this.xAxisLabel_first.push('30');
        }
        else if (month == 2) {
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                this.xAxisLabel_first.push('29');
            }
        }
    };
    // 获取柱状图数据：包括创建坐标系内的柱子的操作都可以了 一级柱状图 
    M1m2wipComponent.prototype.getDataFirst = function (data, factoryName, typename) {
        if (Array.isArray(data) && data.length != 0) {
            //console.log(data);
            //1. 获取 legend 图例的 数组
            var thislegendsLabel_first = ['GlassQty']; // 清空用于保存 柱状图图例 的数组
            var datenames = []; // 创建一个临时的数组，用于保存 日期的信息
            var productsizes = []; // 创建一个数组，用于保存尺寸的信息
            var checkincode = []; // 创建一个数组，用于保存checkincode的信息
            for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                var object = data_3[_i];
                var operationdesc = object['operationdesc'];
                var datename = object['datename'];
                var ps = object['productsize'];
                var wotype = object['wotype'];
                productsizes.push(ps);
                if (!thislegendsLabel_first.includes(operationdesc)) {
                    thislegendsLabel_first.push(operationdesc);
                }
                if (!datenames.includes(datename)) {
                    datenames.push(datename);
                }
                if (wotype != null && !checkincode.includes(wotype)) {
                    checkincode.push(wotype);
                }
            }
            productsizes.sort(); // 数组排序，有用！
            checkincode.sort(); // 数组排序，有用！
            //console.log(this.legendsLabel_first);
            //console.log(datenames);
            // 下面把productsize筛选出来
            if (typename == 'MNT' || typename == 'COG') {
                this.selectedSizesFirst1 = [];
                this.selectedCodeFirst1 = [];
                for (var _a = 0, productsizes_1 = productsizes; _a < productsizes_1.length; _a++) {
                    var ps = productsizes_1[_a];
                    if (!this.selectedSizesFirst1.includes(ps)) {
                        this.selectedSizesFirst1.push(ps);
                    }
                }
                for (var _b = 0, checkincode_1 = checkincode; _b < checkincode_1.length; _b++) {
                    var ck = checkincode_1[_b];
                    if (!this.selectedCodeFirst1.includes(ck)) {
                        this.selectedCodeFirst1.push(ck);
                    }
                }
                // console.log(this.selectedCodeFirst1);
            }
            else if (typename == 'TV' || typename == 'COF') {
                this.selectedSizesFirst2 = [];
                this.selectedCodeFirst2 = [];
                for (var _c = 0, productsizes_2 = productsizes; _c < productsizes_2.length; _c++) {
                    var ps = productsizes_2[_c];
                    if (!this.selectedSizesFirst2.includes(ps)) {
                        this.selectedSizesFirst2.push(ps);
                    }
                }
                for (var _d = 0, checkincode_2 = checkincode; _d < checkincode_2.length; _d++) {
                    var ck = checkincode_2[_d];
                    if (!this.selectedCodeFirst2.includes(ck)) {
                        this.selectedCodeFirst2.push(ck);
                    }
                }
                // console.log(this.selectedCodeFirst2);
            }
            //2. 创建 柱状图的 series 数组 :在所有的最后，需要再添加一个serise：用于显示Panel的总和的
            this.serises_array_first = []; // 清空 保存坐标系 数据的 数组
            //2.1 先把 glassqty 的折线图 画出来
            var serise_line_gls = null; // 这个是glassqty 的折线坐标
            var glsqtys = []; // 记录保存glassqty 的数据
            var xindex = 0; // x轴上面的索引值
            for (var i = 0; i < datenames.length; i++) {
                var datename = datenames[i];
                var xdatename = this.xAxisLabel_first[xindex]; // 这个是x轴上的对应的日期值， 二者比较，相等才能进行下一步的操作
                var glsqty = 0; // 用于计算当前日期的 gls 的数量的
                while (xdatename != datename) {
                    glsqtys.push(0); // 需要放进一个数去填充起来
                    xindex += 1; //
                    xdatename = this.xAxisLabel_first[xindex];
                }
                for (var _e = 0, data_4 = data; _e < data_4.length; _e++) {
                    var object = data_4[_e];
                    var objectdatename = object['datename'];
                    if (objectdatename == datename) {
                        var glassqty = parseInt(object['glassqty'], 10); // 取出该对象的glassqty 属性,
                        glsqty += glassqty; // 进行当天的gls的求和操作
                    }
                }
                glsqtys.push(glsqty); // 当所有对象循环技术之后，把gls的求和的数据放入到数组中去
                xindex += 1; //这里也需要+1
            }
            // 再创建gls_line 的serise
            serise_line_gls = {
                name: 'GlassQty',
                type: 'line',
                lineStyle: {
                    color: 'green'
                },
                itemStyle: {
                    normal: {
                        // borderWidth: 3,
                        // borderColor: 'green',
                        color: 'green'
                    }
                },
                label: {
                    show: false,
                    textStyle: {
                        color: 'white'
                    }
                },
                yAxisIndex: 1,
                data: glsqtys // 当前serise 的值
            };
            this.serises_array_first.push(serise_line_gls); // 把折线放入到数组中去
            //2.2 创建所有的bar 的panel 的操作 ok
            var sumserise = null; // 这个是独立于所有的正常的serise之外的 总和的serise：目的是为了求每一天的总数的panel
            var sumpanelqtys = []; // 保存每一天的panel的总数
            var arraysarray = []; // 保存每一个数组的数组，用来循环且求和的操作
            for (var _f = 0, thislegendsLabel_first_1 = thislegendsLabel_first; _f < thislegendsLabel_first_1.length; _f++) {
                var oper = thislegendsLabel_first_1[_f];
                if (oper != 'GlassQty') {
                    var serise_bar = null; // 当前的 serise
                    var panelqtys = []; // 记录这个serise 的数据 的数组 
                    var xindex_1 = 0;
                    for (var i = 0; i < datenames.length; i++) {
                        var datename = datenames[i];
                        var xdatename = this.xAxisLabel_first[xindex_1];
                        while (datename != xdatename) {
                            panelqtys.push(0);
                            xindex_1 += 1;
                            xdatename = this.xAxisLabel_first[xindex_1];
                        }
                        var pnlqty = 0; // 用于计算当前日期 的pnl 的数量的
                        for (var _g = 0, data_5 = data; _g < data_5.length; _g++) {
                            var object = data_5[_g];
                            var objectdatename = object['datename'];
                            var objcetoperationdesc = object['operationdesc'];
                            if (objectdatename == datename && objcetoperationdesc == oper) {
                                var panelqty = parseInt(object['panelqty'], 10); // 取出该对象的panleqty 属性 
                                pnlqty += panelqty; // 进行求和操作
                            }
                        }
                        panelqtys.push(pnlqty); // 当所有对象循环结束之后，把pnl的求和的数据放入到数组中去  
                        xindex_1 += 1;
                    }
                    arraysarray.push(panelqtys); // 添加的操作 ： 把当前的数组放起来保存，用于后面的求和的操作
                    var barColor = '';
                    if (factoryName == 'Module') {
                        barColor = this.createGridColorFirst('Module', oper);
                    }
                    else if (factoryName == 'S2') {
                        barColor = this.createGridColorFirst('S2', oper);
                    }
                    serise_bar = {
                        name: oper,
                        type: 'bar',
                        barWidth: '25',
                        itemStyle: {
                            normal: {
                                color: barColor
                            }
                        },
                        stack: 'aa',
                        yAxisIndex: 0,
                        data: panelqtys // 当前serise 的值
                    };
                    this.serises_array_first.push(serise_bar); // 最后 把创建的对象放入到数组中保存  
                }
            }
            // 当所有的数组都创建好之后，开始循环
            var arrayLength = arraysarray[0].length; // 数组的长度
            for (var i = 0; i < arrayLength; i++) {
                var sum = 0;
                for (var _h = 0, arraysarray_1 = arraysarray; _h < arraysarray_1.length; _h++) {
                    var a = arraysarray_1[_h];
                    sum += a[i];
                }
                sumpanelqtys.push(sum);
            }
            //console.log(sumpanelqtys);
            sumserise = {
                name: 'sum',
                type: 'bar',
                barWidth: '25',
                stack: 'bb',
                itemStyle: {
                    color: 'rgba(0,0,0,0)'
                },
                label: {
                    normal: {
                        show: true,
                        color: 'white',
                        position: 'top',
                        textStyle: {
                            fontSize: '10'
                        },
                        formatter: function (value) {
                            var cc = value.value;
                            if (cc > 999) {
                                var aa = value.value / 1000 + '';
                                var bb = aa.substring(0, 4) + 'k';
                                return bb;
                            }
                            else {
                                return cc;
                            }
                        }
                    }
                },
                barGap: '-100%',
                yAxisIndex: 0,
                data: sumpanelqtys // 当前serise 的值
            };
            this.serises_array_first.push(sumserise);
        }
        else {
            this.serises_array_first = []; // 把数据存储的数组设置为空，注意写法，否则会系统崩溃掉
        }
    };
    //创建 一级柱状图 的柱子的颜色的设定，上下两个柱状图的相同类别的 颜色一致
    //module 和 s2 分别来操作：
    M1m2wipComponent.prototype.createGridColorFirst = function (factoryname, oper) {
        var colors = ['rgb(64, 139, 95)', 'rgb(80, 172, 118)', 'rgb(43, 190, 105)', 'rgb(14, 197, 91)', 'rgb(88, 233, 148)',
            'rgb(100, 129, 102)', 'rgb(140, 177, 143)', 'rgb(174, 216, 177)', 'rgb(128, 160, 130)', 'rgb(167, 168, 167)',
            'rgb(15, 174, 236)', 'rgb(40, 181, 236)', 'rgb(106, 203, 241)', 'rgb(137, 212, 241)', 'rgb(118, 192, 221)',
            'rgb(224, 193, 13)', 'rgb(190, 165, 19)', 'rgb(150, 129, 15)', 'rgb(104, 90, 11)', 'rgb(77, 66, 8)',
            'rgb(53, 71, 172)', 'rgb(64, 86, 211)', 'rgb(76, 102, 248)', 'rgb(127, 144, 241)', 'rgb(108, 120, 185)',
            'rgb(67, 97, 11)', 'rgb(113, 145, 55)', 'rgb(149, 179, 94)', 'rgb(192, 226, 128)', 'rgb(215, 241, 165)',
            'rgb(24, 76, 219)', 'rgb(50, 95, 219', 'rgb(82, 121, 226)', 'rgb(114, 146, 231)', 'rgb(98, 139, 252)',
            'rgb(151, 38, 216)', 'rgb(171, 92, 216)', 'rgb(185, 129, 218)', 'rgb(116, 62, 148)', 'rgb(98, 26, 139)',
            'rgb(0,0,0)'];
        var colorName = '';
        if (factoryname == 'Module') {
            switch (oper) {
                case 'POL':
                    colorName = colors[0];
                    break;
                case "OLB":
                    colorName = colors[1];
                    break;
                case 'MMT':
                    colorName = colors[2];
                    break;
                case 'Line Out':
                    colorName = colors[3];
                    break;
                case 'MDL外观检':
                    colorName = colors[4];
                    break;
                case 'MDL成BOX':
                    colorName = colors[5];
                    break;
                case 'Packing':
                    colorName = colors[6];
                    break;
                case '手动委托':
                    colorName = colors[7];
                    break;
                case '待抽检':
                    colorName = colors[8];
                    break;
                case 'OQA抽检&LAT':
                    colorName = colors[9];
                    break;
                case '成拍':
                    colorName = colors[10];
                    break;
                case "ASS'Y":
                    colorName = colors[11];
                    break;
                case 'I/T':
                    colorName = colors[12];
                    break;
                case 'Aging':
                    colorName = colors[13];
                    break;
                case 'F/T':
                    colorName = colors[14];
                    break;
                case 'APP':
                    colorName = colors[15];
                    break;
                case 'RT':
                    colorName = colors[16];
                    break;
                case '待Shipping':
                    colorName = colors[17];
                    break;
                case 'M700待IN':
                    colorName = colors[18];
                    break;
                case '待FA分析':
                    colorName = colors[19];
                    break;
                case '待维修':
                    colorName = colors[20];
                    break;
                case '待主线接收':
                    colorName = colors[21];
                    break;
                case 'R/W品Packing':
                    colorName = colors[22];
                    break;
                case 'R/W品检查':
                    colorName = colors[23];
                    break;
                case 'RT 检测':
                    colorName = colors[24];
                    break;
                case 'RT 待成箱':
                    colorName = colors[25];
                    break;
                case 'RT 待OQA抽检':
                    colorName = colors[26];
                    break;
                case 'RT 待成拍':
                    colorName = colors[27];
                    break;
                case 'RMA品BOXING':
                    colorName = colors[28];
                    break;
                case 'Rework待成拍':
                    colorName = colors[29];
                    break;
                case '待FA分析':
                    colorName = colors[30];
                    break;
                case 'P/I':
                    colorName = colors[31];
                    break;
                case '贴POL保护膜':
                    colorName = colors[32];
                    break;
                case 'RMA品APP':
                    colorName = colors[33];
                    break;
                case '二次返修':
                    colorName = colors[34];
                    break;
                case 'RT OQA':
                    colorName = colors[35];
                    break;
                case 'T级亮点维修':
                    colorName = colors[36];
                    break;
                case '':
                    colorName = colors[37];
                    break;
                default:
                    colorName = colors[38];
                    break;
            }
        }
        else if (factoryname == 'S2') {
            switch (oper) {
                case 'POL':
                    colorName = colors[0];
                    break;
                case "OLB":
                    colorName = colors[1];
                    break;
                case 'MMT外观检':
                    colorName = colors[2];
                    break;
                case 'PI':
                    colorName = colors[3];
                    break;
                case 'Assy':
                    colorName = colors[4];
                    break;
                case 'AGING':
                    colorName = colors[5];
                    break;
                case 'FI':
                    colorName = colors[6];
                    break;
                case 'Q-Retest':
                    colorName = colors[7];
                    break;
                case 'APP':
                    colorName = colors[8];
                    break;
                case 'BLU Repair':
                    colorName = colors[9];
                    break;
                case 'BOXING':
                    colorName = colors[10];
                    break;
                case "PALLETIZING":
                    colorName = colors[11];
                    break;
                case 'OQA检查':
                    colorName = colors[12];
                    break;
                case 'NG单片':
                    colorName = colors[13];
                    break;
                case '待返检':
                    colorName = colors[14];
                    break;
                case 'FGMS':
                    colorName = colors[15];
                    break;
                case '待RW In':
                    colorName = colors[16];
                    break;
                case 'FA待分析':
                    colorName = colors[17];
                    break;
                case 'RW待拆解':
                    colorName = colors[18];
                    break;
                case 'RW待维修':
                    colorName = colors[19];
                    break;
                case 'RW待组装':
                    colorName = colors[20];
                    break;
                case 'RW待点灯':
                    colorName = colors[21];
                    break;
                case 'RW待APP':
                    colorName = colors[22];
                    break;
                case 'FA待接收':
                    colorName = colors[23];
                    break;
                case 'RW待OUT':
                    colorName = colors[24];
                    break;
                case '待投主线':
                    colorName = colors[25];
                    break;
                case '尾数组装':
                    colorName = colors[26];
                    break;
                case '尾数点灯':
                    colorName = colors[27];
                    break;
                case 'RW待APP':
                    colorName = colors[28];
                    break;
                case '尾数APP':
                    colorName = colors[29];
                    break;
                case '待P/K BOX':
                    colorName = colors[30];
                    break;
                case '待P/K成拍':
                    colorName = colors[31];
                    break;
                case 'RW待抽检':
                    colorName = colors[32];
                    break;
                case 'RW待接收RMA品':
                    colorName = colors[33];
                    break;
                case 'RW待点灯RMA品':
                    colorName = colors[34];
                    break;
                default:
                    colorName = colors[38];
                    break;
            }
        }
        return colorName;
    };
    // 创建查询的多选下拉框 一级柱状图:
    M1m2wipComponent.prototype.createDrownArrayFirst = function (selecteddatas) {
        var objectArray = [];
        for (var _i = 0, selecteddatas_1 = selecteddatas; _i < selecteddatas_1.length; _i++) {
            var object = selecteddatas_1[_i];
            var newobject = new __WEBPACK_IMPORTED_MODULE_7__model_selectItemModel__["a" /* selectObject */]();
            var valuestr = object;
            newobject.setProperty('label', valuestr.toString().trim()); //为新的对象赋值操作
            newobject.setProperty('value', valuestr.toString().trim());
            objectArray.push(newobject);
        }
        return objectArray;
    };
    //根据尺寸别筛选的方法
    M1m2wipComponent.prototype.searchDataFirst = function (data) {
        var _this = this;
        var sequence = data;
        if (this.factoryNameFirst == 'Module') {
            if (sequence == 1) {
                this.msgs = [];
                this.msgs = [{ severity: 'info', summary: 'Module MNT 查询状态', detail: '正在查询' }];
                var option = {
                    params: {
                        types: ['MNT'],
                        productseizes: this.selectedSizesFirst1,
                        checkincodes: this.selectedCodeFirst1,
                        lottypes: this.selectedlottypeFirst1
                    }
                };
                var url = '/module/wipfirstproduct';
                this.apiService.get(url, option).subscribe(function (res) {
                    _this.getDataFirst(res, 'Module', 'MNT');
                    _this.setWipChart1First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'Module MNT');
                    if (_this.msgs.length > 0 && _this.msgs[0].severity == 'info') {
                        _this.msgs = [];
                    }
                    _this.msgs.push({ severity: 'success', summary: 'Module MNT 查询状态', detail: '查询成功！' });
                });
            }
            else if (sequence == 2) {
                this.msgs = [];
                this.msgs = [{ severity: 'info', summary: 'Module TV 查询状态', detail: '正在查询' }];
                var option = {
                    params: {
                        types: ['TV'],
                        productseizes: this.selectedSizesFirst2,
                        checkincodes: this.selectedCodeFirst2,
                        lottypes: this.selectedlottypeFirst2
                    }
                };
                var url = '/module/wipfirstproduct';
                this.apiService.get(url, option).subscribe(function (res) {
                    _this.getDataFirst(res, 'Module', 'TV');
                    _this.setWipChart2First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'Module TV');
                    if (_this.msgs.length > 0 && _this.msgs[0].severity == 'info') {
                        _this.msgs = [];
                    }
                    _this.msgs.push({ severity: 'success', summary: 'Module TV 查询状态', detail: '查询成功！' });
                });
            }
        }
        else if (this.factoryNameFirst == 'S2') {
            if (sequence == 1) {
                this.msgs = [];
                this.msgs = [{ severity: 'info', summary: 'S2 COG 查询状态', detail: '正在查询' }];
                var option = {
                    params: {
                        types: ['COG'],
                        productseizes: this.selectedSizesFirst1,
                        checkincodes: this.selectedCodeFirst1,
                        lottypes: this.selectedlottypeFirst1
                    }
                };
                var url = '/module/wipfirstproductS2';
                this.apiService.get(url, option).subscribe(function (res) {
                    _this.getDataFirst(res, 'S2', 'COG');
                    _this.setWipChart1First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'S2 COG');
                    if (_this.msgs.length > 0 && _this.msgs[0].severity == 'info') {
                        _this.msgs = [];
                    }
                    _this.msgs.push({ severity: 'success', summary: 'S2 COG 查询状态', detail: '查询成功！' });
                });
            }
            else if (sequence == 2) {
                this.msgs = [];
                this.msgs = [{ severity: 'info', summary: 'S2 COF 查询状态', detail: '正在查询' }];
                var option = {
                    params: {
                        types: ['COF'],
                        productseizes: this.selectedSizesFirst2,
                        checkincodes: this.selectedCodeFirst2,
                        lottypes: this.selectedlottypeFirst2
                    }
                };
                var url = '/module/wipfirstproductS2';
                this.apiService.get(url, option).subscribe(function (res) {
                    _this.getDataFirst(res, 'S2', 'COF');
                    _this.setWipChart2First(_this.xAxisLabel_first, _this.legendsLabel_first, _this.serises_array_first, 'S2 COF');
                    if (_this.msgs.length > 0 && _this.msgs[0].severity == 'info') {
                        _this.msgs = [];
                    }
                    _this.msgs.push({ severity: 'success', summary: 'S2 COF 查询状态', detail: '查询成功！' });
                });
            }
        }
    };
    // 一级界面上面的月份的显示
    M1m2wipComponent.prototype.getCurrentMonthFirst = function () {
        var currentMonth = '';
        var currentdate = new Date();
        var year = currentdate.getFullYear();
        var month = currentdate.getMonth() + 1;
        var monthstr = '';
        if (month < 10) {
            monthstr = '0' + month;
        }
        else {
            monthstr = '' + month;
        }
        currentMonth = year + '年' + monthstr + '月';
        return currentMonth;
    };
    //获取 一级界面的柱状图的legend的方法：单独写的原因是：查询的另一个表
    M1m2wipComponent.prototype.getLegendsFirst = function (factoryname) {
        var legends = ['GlassQty']; // 先放上GlassQty的图例，然后就可以了
        var url = '/module/legend';
        var option = null;
        if (factoryname == 'Module') {
            option = {
                params: {
                    factoryname: 'MODULE'
                }
            };
        }
        else if (factoryname == 'S2') {
            option = {
                params: {
                    factoryname: 'S2MODULE'
                }
            };
        }
        this.apiService.get(url, option).subscribe(function (res) {
            for (var _i = 0, res_1 = res; _i < res_1.length; _i++) {
                var object = res_1[_i];
                var ln = object['legendName'];
                legends.push(ln);
            }
        });
        return legends;
    };
    //下面是 倒入生产计划的 方法  三级界面的操作
    M1m2wipComponent.prototype.changePageFrom2to3 = function () {
        this.isSecond = false;
        this.isUpload = true;
    };
    // 下面是 从3级界面 返回到 2级界面的方法
    M1m2wipComponent.prototype.changePageFrom3to2 = function () {
        this.isUpload = false;
        this.isSecond = true;
        //导入 数据成功之后 ，返回的时候需要从数据库中读取 数据
        this.importExcelInfo();
    };
    //下面这个是上传文件的方法：
    M1m2wipComponent.prototype.onBasicUpload = function (event) {
        var _this = this;
        // console.log(event);
        var response_ = JSON.parse(event.xhr.response);
        var localPath = response_.localPath;
        //console.log(localPath);
        var options = {
            params: {
                localPath: localPath
            }
        };
        this.apiService.get('/ModuleWipspec/excelUpload', options).subscribe(function (res) {
            _this.data = res; // 返回的这个结果集是一条一条数据的数组
            _this.totalRecords = _this.data.length;
            //下面这一行实现的是一个翻页的功能，根据每一页行数显示对应行数表格的是数据信息
            _this.pageData = _this.data.slice(_this.pageInfo.startRow, _this.pageInfo.startRow + _this.pageInfo.pageRow);
            _this.showFlag = true;
        }, function (error) {
            console.log(error);
        });
    };
    //保存数据的方式 ：
    M1m2wipComponent.prototype.saveExcelImportInfo = function () {
        var _this = this;
        var options = {
            "moduleWipPlanVOList": this.data // 传到服务端的参数就是 导入进来的数据
        };
        this.apiService.put('/ModuleWipspec/excelImport', options).subscribe(function (res) {
            _this.showFlag = false;
            _this.addSingle('Data has been inserted into database');
        }, function (error) {
            console.log(error);
        });
    };
    //取消的操作： 数据清空，页面信息清空，保存或取消的按钮隐藏
    M1m2wipComponent.prototype.cancel = function () {
        this.data = [];
        this.pageData = [];
        this.showFlag = false;
    };
    // 显示 保存到数据库中成功的  信息的方法
    M1m2wipComponent.prototype.addSingle = function (msg) {
        this.messageService.add({ severity: 'success', summary: 'save success', detail: msg });
    };
    M1m2wipComponent.prototype.paginate = function (event) {
        this.pageInfo.pageRow = event['rows'];
        this.pageInfo.startRow = event['first'];
        this.search1(event.page + 1);
        this.pageData = this.data.slice(this.pageInfo.startRow, this.pageInfo.startRow + this.pageInfo.pageRow);
    };
    M1m2wipComponent.prototype.search1 = function (page) {
    };
    //从数据库中读取出导入到 数据库中的数据的方法:顺便把数据给处理了
    M1m2wipComponent.prototype.importExcelInfo = function () {
        var _this = this;
        this.plandata = [];
        this.subdata = [];
        var factoryname = this.factoryNameFirst;
        console.log(factoryname);
        var url = '/ModuleWipspec/dataImport';
        var option = {
            params: {
                factory: factoryname
            }
        };
        this.apiService.get(url, option).subscribe(function (res) {
            console.log(_this.xAxisLabel);
            // 循环x轴的标签 ，进行操作,一个标签对应一个数
            for (var _i = 0, _a = _this.xAxisLabel; _i < _a.length; _i++) {
                var label = _a[_i];
                for (var _b = 0, res_2 = res; _b < res_2.length; _b++) {
                    var obj = res_2[_b];
                    if (label == obj['operation']) {
                        _this.plandata.push(parseInt(obj['qty']));
                    }
                }
            }
            //计算 plan的总数
            var plansum = 0;
            for (var i = 0; i < _this.plandata.length; i++) {
                plansum += _this.plandata[i];
            }
            _this.plandata.push(plansum);
            //下面计算差值
            for (var i = 0; i < _this.plandata.length; i++) {
                _this.subdata.push(_this.tableDataSum[i] - _this.plandata[i]);
            }
        }, function (error) { console.log(error); });
    };
    M1m2wipComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-m1m2wip',
            template: __webpack_require__("./src/app/toumingdisplan/m1m2wip/m1m2wip.component.html"),
            styles: [__webpack_require__("./src/app/toumingdisplan/m1m2wip/m1m2wip.component.css")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_3__common_service_api_api_service__["a" /* ApiService */],
            __WEBPACK_IMPORTED_MODULE_4_core_layout_retab_service_tab_service__["a" /* TabService */],
            __WEBPACK_IMPORTED_MODULE_5__boe_ui_boe_list_service_file_upload_service__["a" /* FileUploadService */],
            __WEBPACK_IMPORTED_MODULE_6_primeng_components_common_messageservice__["MessageService"]])
    ], M1m2wipComponent);
    return M1m2wipComponent;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/model/ModuleWipObject.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return moduleWipObject; });
var moduleWipObject = /** @class */ (function () {
    function moduleWipObject() {
    }
    moduleWipObject.prototype.setHourTimekey = function (value) {
        this.hourTimeKey = value;
    };
    moduleWipObject.prototype.setFgCode = function (value) {
        this.fgCode = value;
    };
    moduleWipObject.prototype.setcheckInCode = function (value) {
        this.checkInCode = value;
    };
    moduleWipObject.prototype.setline = function (value) {
        this.line = value;
    };
    moduleWipObject.prototype.setproductSize = function (value) {
        this.productSize = value;
    };
    moduleWipObject.prototype.setproductType = function (value) {
        this.productType = value;
    };
    moduleWipObject.prototype.setoperationDesc = function (value) {
        this.operationDesc = value;
    };
    moduleWipObject.prototype.setglsQty = function (value) {
        this.glsQty = value;
    };
    moduleWipObject.prototype.setpnlQty = function (value) {
        this.pnlQty = value;
    };
    return moduleWipObject;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/model/TableCols.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return col; });
var col = /** @class */ (function () {
    function col() {
    }
    col.prototype.setField = function (value) {
        this.field = value;
    };
    col.prototype.setHeader = function (value) {
        this.header = value;
    };
    return col;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/model/TableData.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return tableData; });
var tableData = /** @class */ (function () {
    function tableData() {
        this.pnlqty = [];
    }
    tableData.prototype.setFgCode = function (value) {
        this.fgCode = value;
    };
    tableData.prototype.setPnlqty = function (value) {
        this.pnlqty.push(value);
    };
    return tableData;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2wip/model/selectItemModel.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return selectObject; });
var selectObject = /** @class */ (function () {
    function selectObject() {
        this['label'] = '';
        this['value'] = '';
    }
    selectObject.prototype.setProperty = function (propertyName, propertyValue) {
        if (propertyName == 'label') {
            this['label'] = propertyValue;
        }
        else if (propertyName == 'value') {
            this['value'] = propertyValue;
        }
    };
    return selectObject;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.css":
/***/ (function(module, exports) {

module.exports = ".test{\r\n    color:rgb(28, 180, 23);\r\n}\r\n\r\n.time {\r\n    background-color: rebeccapurple !important;\r\n}\r\n\r\n.setTableFirst{\r\n    width: 95% !important;\r\n    margin-left: 2.5% !important;\r\n}\r\n\r\n.touming1{\r\n    background-color: rgba(15, 4, 78,0) !important;\r\n}\r\n\r\nth { /* 直接这样写就能够改变th的样式*/\r\n    font-size: 12px !important;\r\n    border: 2px solid #455e9c !important;\r\n    font-weight: initial !important;\r\n    padding: .625em .175em !important;\r\n}\r\n\r\ntd { /* 直接这样写就能够改变th的样式*/\r\n    /* font-size: 16px !important; */\r\n    font-weight: initial !important;\r\n    text-align: center !important;\r\n    border: 2px solid #455e9c !important;\r\n    font-weight: initial !important;\r\n    padding: .625em .175em !important;\r\n}\r\n\r\n.setEchart{\r\n    width: 97% !important;\r\n    margin-left: 1.5% !important;\r\n    margin-top: 0% !important;\r\n    /* background-color: antiquewhite !important; */\r\n}\r\n\r\n.custom .ui-scrollpanel-wrapper {\r\n    border-right: 9px solid rgb(1,41,77); \r\n}\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-g\" *ngIf=\"isFirstPage\">\n\n  <p-growl [(value)]=\"msgs\" sticky=\"true\"></p-growl>\n  \n  <!-- 1. 标题部分-->\n  <div class=\"ui-g-12\" style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n      <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n  \n      <!--1.工厂名称的现实 MODULE S2-->\n      <div class=\"ui-g-2\" style=\"margin-left:6%;font-size: 1.2em;font-weight: bold;margin-top: -1px;color: #F2F6FA\">\n          {{CurrentFactoryName}} 工单WIP\n      </div>\n      <!--2.查询条件：起止时间 :设置 内部的字体颜色的问题 class=\"time\"-->\n      <div class=\"ui-g-4\" style=\"color:#F2F6FA;margin-top:2%;margin-left:6%\">\n          <div class=\"ui-g\">\n              <label style=\"margin-top: 4px; margin-right: 10px\">\n                  <strong>起始</strong>\n              </label>\n              <p-calendar id=\"s2Calendar\" [(ngModel)]=\"startTime\" showTime=\"true\" hourFormat=\"24\"  [showIcon]=\"true\" dateFormat=\"yy-mm-dd\"></p-calendar>\n              <div style=\"margin: 4px 10px 0px\"><strong>-</strong></div>\n              <label style=\"margin-top: 4px; margin-right: 10px\">\n                  <strong>终止</strong>\n              </label>\n              <p-calendar id=\"s2Calendar\" [(ngModel)]=\"endTime\" showTime=\"true\" hourFormat=\"24\"  [showIcon]=\"true\" dateFormat=\"yy-mm-dd\"></p-calendar>\n          </div>\n      </div>\n\n      <!--3.右边的 关闭率展示-->\n      <div class=\"ui-g-2\" style=\"color:#F2F6FA;margin-left:0%;margin-top: 1.5%;text-align: right\">\n          <strong>关闭率 : {{closeRatio}} %</strong>\n          <br />\n          <strong> 关闭周期 : {{closeUniverse}} 天</strong>\n          <!--8. 查询按钮-->\n          <!-- <p-inputSwitch [(ngModel)]=\"isClosedRatioShow\" (onChange)=\"changeToSecondPageBySwitch($event)\"></p-inputSwitch> -->\n      </div>\n\n       <!--4.工厂的切换按钮 -->\n       <div class=\"ui-g-2\" style=\"margin-top:2%;margin-left:3%\">\n              <button pButton label='Mod' (click)=\"changeToModuleFirst()\"></button>\n              <button pButton label='S2&nbsp;&nbsp;' (click)=\"changeToS2First()\"></button>\n              <button pButton label='关闭率' (click)=\"changeToSecondPage()\"></button>\n      </div>\n  </div>\n\n  <!-- 2. 中间主体部分-->\n  <div class=\"ui-g-12\" style=\"height:100%;background-image: url('assets/bg3_02.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n      <!--#1.一级界面查询条件的bar-->\n      <div class=\"ui-g\">\n          <!--2.中间的条件选择框-->\n          <div class=\"ui-g-12\">\n              <!-- 中间的第一行,也就是只有这一行-->\n              <div class=\"ui-g\" style=\"color:#F2F6FA;margin-top:-2%\">\n  \n                  <!--4.BU别  COG COF 的区分 这个使用多选分组-->\n                  <div class=\"ui-g-2\" style=\"margin-left:3%\">\n                      <strong>BU别&nbsp;:&nbsp;</strong>\n                      <p-checkbox name=\"BUGroup\" value=\"COG\" label=\"COG\" [(ngModel)]=\"selectedBUTypes\" inputId=\"G\"></p-checkbox>\n                      &nbsp;&nbsp;\n                      <p-checkbox name=\"BUGroup\" value=\"COF\" label=\"COF\" [(ngModel)]=\"selectedBUTypes\" inputId=\"F\"></p-checkbox>\n                  </div>\n                  <!--3.工单组区分 ： 这应该是一个单选下拉框 [style]=\"{'width':'150px'}\"-->\n                  <div class=\"ui-g-2\" style=\"margin-left:0%\">\n                      <strong>工单组&nbsp;:&nbsp;</strong>\n                      <p-multiSelect [options]=\"WORKTYPE\" [(ngModel)]=\"selectedWORKTYPES\" editable=\"true\" placeholder=\"Select WOTYPE\"></p-multiSelect>\n                  </div>\n  \n                  <!--5. 工单类型多选下拉框-->\n                  <div class=\"ui-g-2\" style=\"margin-left:0%\">\n                      <strong>工单类型&nbsp;:&nbsp;</strong>\n                      <p-multiSelect [options]='LOTTYPE' [(ngModel)]='selectedLotTypes' [panelStyle]=\"{minWidth:'12em'}\"\n                          scrollHeight='300px'></p-multiSelect>\n                  </div>\n                  <!--6.工单状态 多选下拉框 Completed、Created、Released-->\n                  <div class=\"ui-g-3\" style=\"margin-left:0%\">\n                      <strong>工单状态&nbsp;:&nbsp;</strong>\n                      <p-multiSelect [options]='WORKSTATE' [(ngModel)]='selectedState' [panelStyle]=\"{minWidth:'150px'}\"\n                          scrollHeight='300px'></p-multiSelect>\n                  </div>\n  \n                  <!--7. 查询按钮-->\n                  <div class=\"ui-g-1\" style=\"margin-left: 0%\">\n                      <p-button label='查询' icon='fa fa-search' iconPos=\"left\" (click)=\"searchFirst()\"></p-button>\n                  </div>\n                  <!--8. 导出数据表的操作-->\n                  <div class=\"ui-g-1\" style=\"margin-left:0%;margin-top:0%\">\n                          <button type=\"button\" pButton icon=\"fa fa-file-o\" iconPos=\"left\" label=\"DownLoad\" (click)=\"dt.exportCSV()\" ></button>\n                  </div>\n              </div>\n              <!--4.工厂区分 ： MODULE S2MODULE-->\n              <!-- <div class=\"ui-g-2\">\n                      <strong>工厂&nbsp;:&nbsp;</strong>\n                      <p-dropdown [options]=\"FACTORY\" [(ngModel)]=\"selectedFactory\" [style]=\"{'width':'150px'}\" editable=\"true\"\n                          placeholder=\"Select a factory\"></p-dropdown>\n                  </div> -->\n          </div>\n      </div>\n  \n      <!--#2.一级界面的表格展示，动态的表格-->\n      <div class=\"ui-g\" [ngClass]=\"{setTableFirst:true}\">\n          <!-- if you use selection, you must set datakey -->\n          <p-table #dt id=\"currentwip\" [columns]=\"cols\" [value]=\"workInfo\" >\n                 \n              <!-- <ng-template pTemplate=\"header\" let-columns>\n                  <tr style=\"font-size:10px;color: white\">\n                      <th *ngFor=\"let col of columns\" class=\"touming1\">\n                          {{col.header}}\n                      </th>\n                  </tr>\n              </ng-template> -->\n              <ng-template pTemplate=\"header\">\n                  <tr style=\"color:#F2F6FA\">\t\t\t\t\t\t\t\t\t\t \t\t\n                      <th class=\"touming1\" width=\"70px\">Lot Type</th>\n                      <th class=\"touming1\" width=\"200px\">FG Code</th>\n                      <th class=\"touming1\" width=\"120px\">WorkOrder</th>\n                      <th class=\"touming1\" width=\"100px\">WO state</th>\n                      <th class=\"touming1\" width=\"200px\">绑定时间</th>\n                      <th class=\"touming1\" >运行天数</th>\n                      <th class=\"touming1\">Plan</th>\n                      <th class=\"touming1\">Assign To WO</th>\n                      <th class=\"touming1\">NOT Start</th>\n                      <th class=\"touming1\">WIP</th>\n                      <th class=\"touming1\">Shipped</th>\n                      <th class=\"touming1\">FGMS NO RECEIPT</th>\n                      <th class=\"touming1\">Scrap</th>\n                      <th class=\"touming1\">REWORK QTY</th>\n                  </tr>\n              </ng-template>\n              <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n                  <tr class=\"touming1\" style=\"color:white\">\n                      <td *ngFor=\"let col of columns;\" >\n                          {{rowData[col.field]}}\n                      </td>\n                  </tr>\n              </ng-template>\n          </p-table>\n      </div>\n  </div>\n  \n  <!-- 3. 最后的背景图片-->\n  <div class=\"ui-g-12\" style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n  </div>\n</div>\n\n<div class=\"ui-g\" *ngIf=\"isSecondPage\">\n\n  <!-- 1. 标题部分-->\n  <div class=\"ui-g-12\" style=\"height:178px;background-image: url('assets/bg3_01.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n      <h2 style=\"color:#F2F6FA;margin-top: 15px;text-align: center\">BOEDT数据透明化平台</h2>\n  \n      <!--1.工厂的名称显示 MODULE S2-->\n      <div class=\"ui-g-2\" style=\"margin-left:6%;font-size: 1.2em;font-weight: bold;margin-top: -1px;color: #F2F6FA\">\n          <!-- <p-inputSwitch [(ngModel)]=\"witchFactory\" (onChange)=\"changeFactoryFirst($event)\"></p-inputSwitch> -->\n        {{CurrentFactoryName}} 工单WIP\n      </div>\n      <div class=\"ui-g-5\"></div>\n       <!--3.右边的 关闭率展示-->\n       <div class=\"ui-g-2\" style=\"color:#F2F6FA;margin-left:0%;margin-top: 1.8%;text-align: right\">\n              <strong>关闭率 : {{closeRatio}} %</strong>\n              <br />\n              <strong> 关闭周期 : {{closeUniverse}} 天</strong>\n              <!--8. 查询按钮-->\n              <!-- <p-inputSwitch [(ngModel)]=\"isClosedRatioShow\" (onChange)=\"changeToFirstPage()\"></p-inputSwitch> -->\n          </div>\n      <!--2..工厂的切换按钮 -->\n      <div class=\"ui-g-2\" style=\"margin-top:2%;margin-left:0%\">\n          <button pButton label='Mod' (click)=\"changeToModuleSecond()\"></button>\n          <button pButton label='S2&nbsp;&nbsp;' (click)=\"changeToS2Second()\"></button>\n          <button pButton label='返回' (click)=\"changeToFirstPage()\"></button>\n      </div>\n  \n     \n  </div>\n  <!-- 2. 柱状图 和被选中的 lottype-->\n  <div class=\"ui-g-12\" style=\"height:100%;background-image: url('assets/bg3_02.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n     \n     \n          <!-- 1.这个是用来显示 柱状图的-->\n      <div class=\"ui-g-12\" [ngClass]=\"{setEchart:true}\">\n          <div echarts [options]=\"echartClosed\" style=\"height:450px\"></div>\n      </div>\n       <!-- 1.这个是用来显示 前面选中的 lottype的-->\n       <div class=\"ui-g-11\" style=\"margin-left:5%;margin-top:0%;font-size: 1em;font-weight: bold;color: #F2F6FA\">\n              {{selectLotTypesShow}}\n      </div>    \n  </div>\n  <!-- 3. 最后的背景图片-->\n  <div class=\"ui-g-12\" style=\"height:45px;background-image: url('assets/bg3_03.png');background-repeat:no-repeat; background-size:100% 100%;-moz-background-size:100% 100%;\">\n  </div>\n</div>"

/***/ }),

/***/ "./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return M1m2workwipComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_workWip__ = __webpack_require__("./src/app/toumingdisplan/m1m2workwip/model/workWip.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var M1m2workwipComponent = /** @class */ (function () {
    function M1m2workwipComponent(apiService) {
        this.apiService = apiService;
        //#.控制页面显示的标志位
        this.isFirstPage = true;
        this.isSecondPage = false;
        //1.控制 工厂 切换的按钮
        //witchFactory  : boolean = false;
        this.CurrentFactoryName = 'MODULE'; // 显示当前工厂的名字的 MOD / S2
        this.startTimeStr = ''; // 两个字符串 是转换完成之后的字符串
        this.endTimeStr = '';
        //3.工单组多选下拉框 
        this.WORKTYPE = [{ label: 'MRB工单', value: 'MRB工单' },
            { label: 'Rework工单', value: 'Rework工单' },
            { label: 'RMA工单', value: 'RMA工单' },
            { label: 'RT工单', value: 'RT工单' },
            { label: '测试工单', value: '测试工单' },
            { label: '降级报废工单', value: '降级报废工单' },
            { label: '量产工单', value: '量产工单' },
            { label: '研发工单', value: '研发工单' }];
        this.selectedWORKTYPES = [];
        //4. BU别 多选按钮 : 直接写死的，因为就这两个
        // BUTYPE :SelectItem[] =[{'label':'COG','value':'COG'},
        //                        {'label':'COF','value':'COF'},] ;
        this.selectedBUTypes = [];
        //5.工单类型多选下拉框
        this.LOTTYPE = [
            { label: 'B401', value: 'B401' }, { label: 'B402', value: 'B402' }, { label: 'B403', value: 'B403' }, { label: 'B404', value: 'B404' },
            { label: 'B405', value: 'B405' }, { label: 'B406', value: 'B406' }, { label: 'B407', value: 'B407' }, { label: 'B408', value: 'B408' },
            { label: 'B409', value: 'B409' }, { label: 'B410', value: 'B410' }, { label: 'B411', value: 'B411' }, { label: 'B412', value: 'B412' },
            { label: 'B413', value: 'B413' }, { label: 'B414', value: 'B414' }, { label: 'B415', value: 'B415' }, { label: 'B416', value: 'B416' },
            { label: 'B417', value: 'B417' }, { label: 'B418', value: 'B418' }, { label: 'B419', value: 'B419' }, { label: 'B420', value: 'B420' },
            { label: 'B421', value: 'B421' }, { label: 'B422', value: 'B422' }, { label: 'B423', value: 'B423' }, { label: 'B424', value: 'B424' },
            { label: 'B425', value: 'B425' }, { label: 'B426', value: 'B426' }, { label: 'B427', value: 'B427' }, { label: 'B428', value: 'B428' },
            { label: 'B429', value: 'B429' }, { label: 'B430', value: 'B430' }, { label: 'B431', value: 'B431' }, { label: 'B432', value: 'B432' },
            { label: 'B433', value: 'B433' }, { label: 'B434', value: 'B434' }, { label: 'B435', value: 'B435' }, { label: 'B436', value: 'B436' },
            { label: 'B437', value: 'B437' }, { label: 'B438', value: 'B438' }, { label: 'B439', value: 'B439' }, { label: 'B440', value: 'B440' },
            { label: 'B441', value: 'B441' }, { label: 'B442', value: 'B442' }, { label: 'B443', value: 'B443' }, { label: 'B444', value: 'B444' }
        ];
        this.selectedLotTypes = [];
        this.selectLotTypesShow = ''; // 这个用来保存  被选中的lottype的 字符串，主要是用来换行的
        //6.工厂单选框
        // FACTORY :SelectItem[] = [{label:'MODULE',value:'MODULE'},
        //                         {label:'S2MODULE',value:'S2MODULE'}];
        // selectedFactory : string = '';
        //6.工单状态多选下拉框
        this.WORKSTATE = [{ label: 'Completed', value: 'Completed' },
            { label: 'Created', value: 'Created' },
            { label: 'Released', value: 'Released' }];
        this.selectedState = [];
        //8.关闭率 数据
        this.closeRatio = '--';
        this.closeUniverse = '--';
        //isClosedRatioShow : boolean = false; // 根据按钮的切换状态，决定是否显示 二级的页面
        //9.表格 列的属性  												
        this.cols = [
            { field: 'lottype', header: 'Lot Type' },
            { field: 'fgcode', header: 'FG Code' },
            { field: 'workorder', header: 'WorkOrder' },
            { field: 'wostate', header: 'WO state' },
            { field: 'bangding', header: '绑定时间' },
            { field: 'runtime', header: '运行天数' },
            { field: 'planqty', header: 'Plan' },
            { field: 'assigntowo', header: 'Assign To WO' },
            { field: 'notstart', header: 'NOT Start' },
            { field: 'wip', header: 'WIP' },
            { field: 'shipped', header: 'Shipped' },
            { field: 'fgmsnoreceipt', header: 'FGMS NO RECEIPT' },
            { field: 'scrap', header: 'Scrap' },
            { field: 'reworkqty', header: 'REWORK QTY' }
        ];
        this.workInfo = [
            { 'lottype': '--',
                'fgcode': '--',
                'workorder': '--',
                'wostate': '--',
                'bangding': '--',
                'runtime': '--',
                'planqty': '--',
                'assigntowo': '--',
                'notstart': '--',
                'wip': '--',
                'shipped': '--',
                'fgmsnoreceipt': '--',
                'scrap': '--',
                'reworkqty': '--' }
        ]; // 这个是保存表格中的数据的数组
        this.xAxisName = []; // x轴的日期内容
        this.bangdingNumber = [];
        this.closeNumber = [];
        this.closeRatioNumber = [];
        this.destTRatioNumber = [];
        //11.添加一个一级页面的查询提示消息的功能
        this.msgs = [];
        this.msg = { severity: 'info', summary: '查询。。。', detail: '正在查询 MODULE 数据 <br />' + '查询用时 ：' + 0 + ' 秒' };
    }
    M1m2workwipComponent.prototype.ngOnInit = function () {
    };
    /** 一级界面中用到的方法 */
    //1. 查询 表格数据 和  调用查询 关闭率关闭周期子方法   的  方法，一级界面
    M1m2workwipComponent.prototype.searchFirst = function () {
        var _this = this;
        this.selectLotTypesShow = '';
        if (this.startTime == null || this.endTime == null) {
            alert("请选择正确的起止时间！");
        }
        else if (this.selectedBUTypes.length == 0) {
            alert("请选择BU别！");
        }
        else if (this.selectedWORKTYPES.length == 0) {
            alert("请选择工单组！");
        }
        else if (this.selectedLotTypes.length == 0) {
            alert("请选择工单类型！");
        }
        else if (this.selectedState.length == 0) {
            alert("请选择工单状态！");
        }
        else {
            this.msgs.push(this.msg); // 把这个消息的提示放进来,也就是这个时候开始显示的
            var startInterval_1; // 声明这个定时器,这个引用可以用来停止计时器，
            if (this.CurrentFactoryName == 'MODULE') {
                var secondes_1 = 0;
                startInterval_1 = setInterval(function () {
                    secondes_1++;
                    _this.msg.detail = '正在查询 MODULE 数据 <br />' + '查询用时 ：' + secondes_1 + ' 秒';
                }, 1000);
                this.msg.detail = '正在查询 MODULE 数据 <br />' + '查询用时 ：' + 0 + ' 秒';
            }
            else {
                var secondes_2 = 0;
                startInterval_1 = setInterval(function () {
                    secondes_2++;
                    _this.msg.detail = '正在查询 S2MODULE 数据 <br />' + '查询用时 ：' + secondes_2 + ' 秒';
                }, 1000);
                this.msg.detail = '正在查询 S2MODULE 数据 <br />' + '查询用时 ：' + 0 + ' 秒';
            }
            //在这里把 要可能 在二级界面上展示的被选中的lottype的字符串处理一下
            for (var i = 0; i < this.selectedLotTypes.length; i++) {
                if ((i + 1) % 5 != 0) {
                    this.selectLotTypesShow += this.selectedLotTypes[i] + ', ';
                }
                else {
                    this.selectLotTypesShow += this.selectedLotTypes[i] + ', \n';
                }
            }
            //console.log(this.selectLotTypesShow); 这种换行的方式是可以的，有效果的
            this.startTimeStr = this.getTimestr(this.startTime);
            this.endTimeStr = this.getTimestr(this.endTime);
            var url = '/modules2/workwip';
            var option = {
                params: {
                    starttime: this.startTimeStr,
                    endtime: this.endTimeStr,
                    butypes: this.selectedBUTypes,
                    workgroup: this.selectedWORKTYPES,
                    lottypes: this.selectedLotTypes,
                    workstates: this.selectedState,
                    factoryname: this.CurrentFactoryName
                }
            };
            this.apiService.get(url, option).subscribe(function (res) {
                //  console.log(res);
                _this.getDataFirst(res);
                clearInterval(startInterval_1); // 直接停掉这个计时器
                if (_this.CurrentFactoryName == 'MODULE') {
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: '查询成功！', detail: 'MODULE 数据 查询完成' });
                    setTimeout(function () {
                        _this.msgs = [];
                    }, 3000);
                }
                else {
                    _this.msgs = [];
                    _this.msgs.push({ severity: 'success', summary: '查询成功！', detail: 'S2MODULE 数据 查询完成' });
                    setTimeout(function () {
                        _this.msgs = [];
                    }, 3000);
                }
            }, function (error) { console.log(error); });
            //2.查询 关闭率和关闭周期
            this.searchClosed();
        }
    };
    //1.1 查询 关闭周期和关闭率的方法
    M1m2workwipComponent.prototype.searchClosed = function () {
        var _this = this;
        var closedRatio_url = '/modules2/closedRatio';
        var option1 = {
            params: {
                factoryname: this.CurrentFactoryName,
                buttypes: this.selectedBUTypes,
                worktypes: this.selectedWORKTYPES,
                lottypes: this.selectedLotTypes
            }
        };
        this.apiService.get(closedRatio_url, option1).subscribe(function (res) {
            var closedRatioaaa = res['closedRatio'] + '';
            var closedRatiobbb = null;
            var closedRatiostr = parseFloat(closedRatioaaa).toFixed(4) + '';
            // alert(closedRatiostr);
            closedRatiobbb = parseFloat(closedRatiostr) * 100; // 截取两位小数的操作，四舍五入的
            _this.closeRatio = closedRatiobbb + '';
        }, function (error) { console.log(error); });
        //查询关闭周期
        var closeCycle_url = '/modules2/closeCycle';
        var option2 = {
            params: {
                factoryname: this.CurrentFactoryName,
                buttypes: this.selectedBUTypes,
                worktypes: this.selectedWORKTYPES,
                lottypes: this.selectedLotTypes
            }
        };
        this.apiService.get(closeCycle_url, option2).subscribe(function (res) {
            var closedCycleaaa = res['closeCycle'] + '';
            _this.closeUniverse = parseFloat(closedCycleaaa).toFixed(2) + '';
        }, function (error) { console.log(error); });
    };
    //2.日期转换成字符串的方法 ： 目标格式 2019011209 一级界面
    M1m2workwipComponent.prototype.getTimestr = function (searchTime) {
        var timestr = '';
        var year = 0;
        var month = 0;
        var monthstr = '';
        var day = 0;
        var daystr = '';
        var hour = 0;
        var hourstr = '';
        var minute = 0;
        var minutestr = '';
        year = searchTime.getFullYear();
        month = searchTime.getMonth() + 1;
        day = searchTime.getDate();
        hour = searchTime.getHours();
        minute = searchTime.getMinutes();
        if (month < 10) {
            monthstr = '0' + month;
        }
        else {
            monthstr = '' + month;
        }
        if (day < 10) {
            daystr = '0' + day;
        }
        else {
            daystr = '' + day;
        }
        if (hour < 10) {
            hourstr = '0' + hour;
        }
        else {
            hourstr = '' + hour;
        }
        if (minute < 10) {
            minutestr = '0' + minute;
        }
        else {
            minutestr = '' + minute;
        }
        timestr = year + monthstr + daystr + hourstr + minutestr;
        return timestr;
    };
    //3.1切换到 二级界面的方法
    M1m2workwipComponent.prototype.changeToSecondPage = function () {
        var _this = this;
        this.selectLotTypesShow = '';
        this.isFirstPage = false;
        this.isSecondPage = true;
        this.xAxisName = this.getXaxis();
        var url = '/modules2/workclose';
        var option = {
            params: {
                factoryname: this.CurrentFactoryName,
                buttypes: this.selectedBUTypes,
                worktypes: this.selectedWORKTYPES,
                lottypes: this.selectedLotTypes
            }
        };
        if (this.selectedBUTypes.length != 0 && this.selectedWORKTYPES.length != 0 && this.selectedLotTypes.length != 0) {
            //在这里把 要可能 在二级界面上展示的被选中的lottype的字符串处理一下
            for (var i = 0; i < this.selectedLotTypes.length; i++) {
                if ((i + 1) % 5 != 0) {
                    this.selectLotTypesShow += this.selectedLotTypes[i] + ', ';
                }
                else {
                    this.selectLotTypesShow += this.selectedLotTypes[i] + ', \n';
                }
            }
            this.apiService.get(url, option).subscribe(function (res) {
                _this.searchClosed(); // 同时把 关闭率给查出来
                _this.getDataSecond(res); // 调用获取二级界面的方法
                _this.setEchart(_this.xAxisName, _this.bangdingNumber, _this.closeNumber, _this.closeRatioNumber, _this.destTRatioNumber); // 画图
            }, function (error) { console.log(error); });
        }
        else {
            alert("选择 筛选条件！");
            this.isFirstPage = true;
            this.isSecondPage = false;
        }
    };
    //3.2切换到  一级界面的方法 : 直接返回，就是 不用管其他的了
    M1m2workwipComponent.prototype.changeToFirstPage = function () {
        this.isSecondPage = false;
        this.isFirstPage = true;
    };
    // changeToSecondPageBySwitch(event){
    //   if(this.isClosedRatioShow){
    //     this.isFirstPage = false;
    //     this.isSecondPage = true;
    //     this.xAxisName = this.getXaxis();
    //     const url = '/modules2/workclose';
    //     const option = {
    //       params:{
    //         factoryname:this.CurrentFactoryName,
    //         buttypes : this.selectedBUTypes,
    //         worktypes :  this.selectedWORKTYPES,
    //         lottypes : this.selectedLotTypes
    //       }
    //     };
    //     if(this.selectedBUTypes.length != 0 && this.selectedWORKTYPES.length !=0 && this.selectedLotTypes.length != 0){
    //       //在这里把 要可能 在二级界面上展示的被选中的lottype的字符串处理一下
    //       for(let i = 0;i < this.selectedLotTypes.length;i++){
    //         if((i+1) % 5 != 0 ){ // 五个一换行
    //           this.selectLotTypesShow += this.selectedLotTypes[i]+', ';
    //         }else{
    //          this.selectLotTypesShow += this.selectedLotTypes[i]+', \n';
    //        }
    //       }
    //     this.apiService.get(url,option).subscribe(
    //       (res)=>{
    //         this.searchClosed(); // 同时把 关闭率给查出来
    //         this.getDataSecond(res); // 调用获取二级界面的方法
    //         this.setEchart(this.xAxisName,this.bangdingNumber,this.closeNumber,this.closeRatioNumber,this.destTRatioNumber); // 画图
    //       },
    //       (error)=>{console.log(error)}
    //     );
    //     }else{
    //       alert("选择 筛选条件！");
    //       this.isFirstPage = true;
    //       this.isSecondPage = false;
    //       this.isClosedRatioShow = false; // 强行给关闭掉
    //     }
    //   }else{
    //     this.isSecondPage = false;
    //     this.isFirstPage = true;
    //   }
    // }
    //4.切换工厂的方法 ，一级
    // 切换到 Module 
    M1m2workwipComponent.prototype.changeToModuleFirst = function () {
        if (this.CurrentFactoryName != 'MODULE') {
            this.CurrentFactoryName = 'MODULE';
            this.startTime = null;
            this.endTime = null;
            this.selectedBUTypes = [];
            this.selectedLotTypes = [];
            this.selectedWORKTYPES = [];
            this.selectedState = [];
            this.workInfo = [{ 'lottype': '--',
                    'fgcode': '--',
                    'workorder': '--',
                    'wostate': '--',
                    'bangding': '--',
                    'runtime': '--',
                    'planqty': '--',
                    'assigntowo': '--',
                    'notstart': '--',
                    'wip': '--',
                    'shipped': '--',
                    'fgmsnoreceipt': '--',
                    'scrap': '--',
                    'reworkqty': '--' }];
            this.closeRatio = '--';
            this.closeUniverse = '--';
            // 查询 MOD 关闭率
            // const closedRatio_url = '/modules2/closedRatio';
            // const option1 = {
            //   params:{
            //     factoryname:'MODULE'
            //   }
            // };
            // this.apiService.get(closedRatio_url,option1).subscribe(
            //   (res)=>{
            //     this.closeRatio = res['closedRatio'];
            //   },
            //   (error)=>{console.log(error)}
            // );
            //查询MOD 关闭周期
            // const closeCycle_url = '/modules2/closeCycle';
            // const option2 = {
            //   params:{
            //     factoryname:'MODULE'
            //   }
            // };
            // this.apiService.get(closeCycle_url,option2).subscribe(
            //   (res)=>{
            //     this.closeUniverse = res['closeCycle'];
            //   },
            //   (error)=>{console.log(error)}
            // );
        }
    };
    // 切换到 S2
    M1m2workwipComponent.prototype.changeToS2First = function () {
        if (this.CurrentFactoryName != 'S2MODULE') {
            this.CurrentFactoryName = 'S2MODULE';
            this.startTime = null;
            this.endTime = null;
            this.selectedBUTypes = [];
            this.selectedLotTypes = [];
            this.selectedWORKTYPES = [];
            this.selectedState = [];
            this.workInfo = [{ 'lottype': '--',
                    'fgcode': '--',
                    'workorder': '--',
                    'wostate': '--',
                    'bangding': '--',
                    'runtime': '--',
                    'planqty': '--',
                    'assigntowo': '--',
                    'notstart': '--',
                    'wip': '--',
                    'shipped': '--',
                    'fgmsnoreceipt': '--',
                    'scrap': '--',
                    'reworkqty': '--' }];
            this.closeRatio = '--';
            this.closeUniverse = '--';
            // 查询 S2 关闭率
            // const closedRatio_url = '/modules2/closedRatio';
            // const option1 = {
            //   params:{
            //     factoryname:'S2MODULE'
            //   }
            // };
            // this.apiService.get(closedRatio_url,option1).subscribe(
            //   (res)=>{
            //     this.closeRatio = res['closedRatio'];
            //   },
            //   (error)=>{console.log(error)}
            // );
            //查询S2 关闭周期
            // const closeCycle_url = '/modules2/closeCycle';
            // const option2 = {
            //   params:{
            //     factoryname:'S2MODULE'
            //   }
            // };
            // this.apiService.get(closeCycle_url,option2).subscribe(
            //   (res)=>{
            //     this.closeUniverse = res['closeCycle'];
            //   },
            //   (error)=>{console.log(error)}
            // );
        }
    };
    //5.获取数据的方法，一级
    M1m2workwipComponent.prototype.getDataFirst = function (data) {
        this.workInfo = []; // 清空数组
        if (Array.isArray(data)) {
            if (data.length == 0) {
                alert("未查询到数据！");
            }
            else {
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var object = data_1[_i];
                    var aa = new __WEBPACK_IMPORTED_MODULE_2__model_workWip__["a" /* workWip */]; // 创建一个对象
                    for (var prop in object) {
                        var value = object[prop];
                        aa.setProperties(prop, value);
                    }
                    // console.log(aa);
                    this.workInfo.push(aa); // 把创建的对象放入到数组中去
                }
            }
        }
    };
    /**  二级界面中用到的方法  */
    //1.创建 二级柱状图的方法
    M1m2workwipComponent.prototype.setEchart = function (xAxis, bangding, closenumber, closerationumber, destrationumber) {
        this.echartClosed = {
            title: {
                text: this.CurrentFactoryName + ' 工单关闭情况',
                x: 'center',
                textStyle: {
                    color: 'white'
                }
            },
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                },
                formatter: function (params) {
                    var tips = '';
                    for (var i = 0; i < params.length; i++) {
                        var value = params[i].value;
                        if (value < 1.1) {
                            var res = params[i].value * 100 + '';
                            var resshort = res.substring(0, 5);
                            tips = tips + params[i].marker + params[i].seriesName + ' : ' + resshort + '%' + '<br />';
                        }
                        else {
                            tips = tips + params[i].marker + params[i].seriesName + ' : ' + params[i].value + '<br />';
                        }
                    }
                    return tips;
                }
            },
            legend: {
                y: 'bottom',
                textStyle: {
                    color: 'white'
                },
                data: ['绑定数', '关闭数', '关闭率', '目标']
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '10%',
                containLabel: true
            },
            xAxis: [
                {
                    type: 'category',
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    data: xAxis
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    splitLine: {
                        show: false,
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                },
                {
                    type: 'value',
                    min: 0,
                    max: 1,
                    interval: 0.2,
                    splitLine: {
                        show: false,
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'white'
                        }
                    },
                    axisLabel: {
                        formatter: function (value) {
                            return value * 100 + '%';
                        }
                    }
                }
            ],
            series: [
                {
                    name: '绑定数',
                    type: 'bar',
                    itemStyle: {
                        color: 'rgb(30, 197, 197)'
                    },
                    data: this.bangdingNumber
                },
                {
                    name: '关闭数',
                    type: 'bar',
                    itemStyle: {
                        color: 'rgb(28, 180, 23)'
                    },
                    data: closenumber
                },
                {
                    name: '关闭率',
                    type: 'line',
                    itemStyle: {
                        normal: {
                            color: 'rgb(24, 139, 8)',
                        }
                    },
                    label: {
                        show: true,
                        formatter: function (aa) {
                            var res = aa.value * 100 + '';
                            var resshort = res.substring(0, 5);
                            return resshort + '%';
                        },
                        fontWeight: 'bold',
                    },
                    yAxisIndex: 1,
                    data: closerationumber
                },
                {
                    name: '目标',
                    type: 'line',
                    itemStyle: {
                        normal: {
                            color: 'rgb(161, 20, 20)',
                        }
                    },
                    label: {
                        show: true,
                        formatter: function (aa) {
                            var res = aa.value * 100 + '';
                            var resshort = res.substring(0, 5);
                            return resshort + '%';
                        },
                        fontWeight: 'bold'
                    },
                    lineStyle: {
                        type: 'dotted'
                    },
                    yAxisIndex: 1,
                    data: destrationumber
                },
            ]
        };
    };
    //2. 创建 二级柱状图 x轴坐标的 方法
    M1m2workwipComponent.prototype.getXaxis = function () {
        var dates = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
            '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
            '21', '22', '23', '24', '25', '26', '27', '28'];
        var today = new Date();
        var year = today.getFullYear();
        var month = today.getMonth() + 1;
        //如果月份是 1 3 5 7 8 10 12 则是31天
        //如果月份是 4 6 9 11 则是30天
        //如果月份是 2 则判断闰年从而确定是28 天还是 29 天
        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
            dates.push('29');
            dates.push('30');
            dates.push('31');
        }
        else if (month == 4 || month == 6 || month == 9 || month == 11) {
            dates.push('29');
            dates.push('30');
        }
        else if (month == 2) {
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                dates.push('29');
            }
        }
        return dates;
    };
    //3.查询，获取 二级柱状图的 数据的方法
    M1m2workwipComponent.prototype.getDataSecond = function (data) {
        this.bangdingNumber = [];
        this.closeNumber = [];
        this.closeRatioNumber = [];
        this.destTRatioNumber = [];
        console.log(data);
        //在这个方法中需要做一个求和的操作
        if (Array.isArray(data)) {
            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                var object = data_2[_i];
                this.bangdingNumber.push(object['assignqty']);
                this.closeNumber.push(object['closedqty']);
                this.closeRatioNumber.push(object['closedratio']);
                this.destTRatioNumber.push(object['destratio']);
            }
        }
    };
    //4.二级页面中的 切换到 module的方法
    M1m2workwipComponent.prototype.changeToModuleSecond = function () {
        var _this = this;
        if (this.CurrentFactoryName != 'MODULE') {
            this.CurrentFactoryName = 'MODULE';
            //需要重新查询一次关闭率和关闭周期
            this.searchClosed();
            this.xAxisName = this.getXaxis();
            var url = '/modules2/workclose';
            var option = {
                params: {
                    factoryname: this.CurrentFactoryName,
                    buttypes: this.selectedBUTypes,
                    worktypes: this.selectedWORKTYPES,
                    lottypes: this.selectedLotTypes
                }
            };
            if (this.selectedBUTypes.length != 0 && this.selectedWORKTYPES.length != 0 && this.selectedLotTypes.length != 0) {
                this.apiService.get(url, option).subscribe(function (res) {
                    _this.getDataSecond(res); // 调用获取二级界面的方法
                    _this.setEchart(_this.xAxisName, _this.bangdingNumber, _this.closeNumber, _this.closeRatioNumber, _this.destTRatioNumber); // 画图
                }, function (error) { console.log(error); });
            }
            else {
                alert("请返回 一级界面选择 筛选条件！");
                this.isFirstPage = true;
                this.isSecondPage = false;
                //this.isClosedRatioShow = false; // 强行给关闭掉
            }
        }
    };
    //5. 二级界面中切换到 s2Module 的方法
    M1m2workwipComponent.prototype.changeToS2Second = function () {
        var _this = this;
        if (this.CurrentFactoryName != 'S2MODULE') {
            this.CurrentFactoryName = 'S2MODULE';
            //需要重新查询一边关闭率和关闭周期
            this.searchClosed();
            this.xAxisName = this.getXaxis();
            var url = '/modules2/workclose';
            var option = {
                params: {
                    factoryname: this.CurrentFactoryName,
                    buttypes: this.selectedBUTypes,
                    worktypes: this.selectedWORKTYPES,
                    lottypes: this.selectedLotTypes
                }
            };
            if (this.selectedBUTypes.length != 0 && this.selectedWORKTYPES.length != 0 && this.selectedLotTypes.length != 0) {
                this.apiService.get(url, option).subscribe(function (res) {
                    _this.getDataSecond(res); // 调用获取二级界面的方法
                    _this.setEchart(_this.xAxisName, _this.bangdingNumber, _this.closeNumber, _this.closeRatioNumber, _this.destTRatioNumber); // 画图
                }, function (error) { console.log(error); });
            }
            else {
                alert("请返回 一级界面选择 筛选条件！");
                this.isFirstPage = true;
                this.isSecondPage = false;
                // this.isClosedRatioShow = false; // 强行给关闭掉
            }
        }
    };
    M1m2workwipComponent = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-m1m2workwip',
            template: __webpack_require__("./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.html"),
            styles: [__webpack_require__("./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.css")]
        }),
        __metadata("design:paramtypes", [__WEBPACK_IMPORTED_MODULE_1__common_service_api_api_service__["a" /* ApiService */]])
    ], M1m2workwipComponent);
    return M1m2workwipComponent;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/m1m2workwip/model/workWip.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return workWip; });
var workWip = /** @class */ (function () {
    function workWip() {
        this['lottype'] = ' ';
        this['fgcode'] = ' ';
        this['workorder'] = ' ';
        this['wostate'] = ' ';
        this['bangding'] = ' ';
        this['runtime'] = ' ';
        this['planqty'] = ' ';
        this['assigntowo'] = ' ';
        this['notstart'] = ' ';
        this['wip'] = ' ';
        this['shipped'] = ' ';
        this['fgmsnoreceipt'] = ' ';
        this['scrap'] = ' ';
        this['reworkqty'] = ' ';
    }
    workWip.prototype.setProperties = function (name, value) {
        if (name == 'lottype') {
            this['lottype'] = value;
        }
        else if (name == 'fgcode') {
            this['fgcode'] = value;
        }
        else if (name == 'workorder') {
            this['workorder'] = value;
        }
        else if (name == 'wostate') {
            this['wostate'] = value;
        }
        else if (name == 'bangding') {
            if (value == null) {
                value = '';
            }
            this['bangding'] = value;
        }
        else if (name == 'runtime') {
            this['runtime'] = value;
        }
        else if (name == 'planqty') {
            this['planqty'] = value;
        }
        else if (name == 'assigntowo') {
            this['assigntowo'] = value;
        }
        else if (name == 'notstart') {
            this['notstart'] = value;
        }
        else if (name == 'wip') {
            this['wip'] = value;
        }
        else if (name == 'shipped') {
            this['shipped'] = value;
        }
        else if (name == 'fgmsnoreceipt') {
            this['fgmsnoreceipt'] = value;
        }
        else if (name == 'scrap') {
            this['scrap'] = value;
        }
        else if (name == 'reworkqty') {
            this['reworkqty'] = value;
        }
    };
    return workWip;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/toumingdisplan-routing.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ToumingdisplanRoutingModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/esm5/router.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fabwip_fabwip_component__ = __webpack_require__("./src/app/toumingdisplan/fabwip/fabwip.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fabmovement_fabmovement_component__ = __webpack_require__("./src/app/toumingdisplan/fabmovement/fabmovement.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__m1m2wip_m1m2wip_component__ = __webpack_require__("./src/app/toumingdisplan/m1m2wip/m1m2wip.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__m1m2workwip_m1m2workwip_component__ = __webpack_require__("./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__cstgls_cstgls_component__ = __webpack_require__("./src/app/toumingdisplan/cstgls/cstgls.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__cstpnl_cstpnl_component__ = __webpack_require__("./src/app/toumingdisplan/cstpnl/cstpnl.component.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








var routes = [
    {
        path: 'fabwip',
        component: __WEBPACK_IMPORTED_MODULE_2__fabwip_fabwip_component__["a" /* FabwipComponent */],
        data: {
            tabLabel: 'FAB WIP信息',
            destroy: false
        }
    },
    {
        path: 'fabmovement',
        component: __WEBPACK_IMPORTED_MODULE_3__fabmovement_fabmovement_component__["a" /* FabmovementComponent */],
        data: {
            tabLabel: 'FAB Movement信息',
            destroy: false
        }
    },
    {
        path: 'm1m2wip',
        component: __WEBPACK_IMPORTED_MODULE_4__m1m2wip_m1m2wip_component__["a" /* M1m2wipComponent */],
        data: {
            tabLabel: 'M1&M2 WIP 信息',
            destroy: false
        }
    },
    {
        path: 'm1m2workwip',
        component: __WEBPACK_IMPORTED_MODULE_5__m1m2workwip_m1m2workwip_component__["a" /* M1m2workwipComponent */],
        data: {
            tabLabel: 'M1&M2 WORK WIP 信息',
            destroy: false
        }
    },
    {
        path: 'cstgls',
        component: __WEBPACK_IMPORTED_MODULE_6__cstgls_cstgls_component__["a" /* CstglsComponent */],
        data: {
            tabLabel: 'CST GLS 信息',
            destroy: false
        }
    },
    {
        path: 'cstpnl',
        component: __WEBPACK_IMPORTED_MODULE_7__cstpnl_cstpnl_component__["a" /* CstpnlComponent */],
        data: {
            tabLabel: 'CST PNL 信息',
            destroy: false
        }
    },
];
var ToumingdisplanRoutingModule = /** @class */ (function () {
    function ToumingdisplanRoutingModule() {
    }
    ToumingdisplanRoutingModule = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_router__["RouterModule"].forChild(routes)],
            exports: [__WEBPACK_IMPORTED_MODULE_1__angular_router__["RouterModule"]]
        })
    ], ToumingdisplanRoutingModule);
    return ToumingdisplanRoutingModule;
}());



/***/ }),

/***/ "./src/app/toumingdisplan/toumingdisplan.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToumingdisplanModule", function() { return ToumingdisplanModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/esm5/core.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__("./node_modules/@angular/common/esm5/common.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__toumingdisplan_routing_module__ = __webpack_require__("./src/app/toumingdisplan/toumingdisplan-routing.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fabwip_fabwip_component__ = __webpack_require__("./src/app/toumingdisplan/fabwip/fabwip.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__fabmovement_fabmovement_component__ = __webpack_require__("./src/app/toumingdisplan/fabmovement/fabmovement.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__m1m2wip_m1m2wip_component__ = __webpack_require__("./src/app/toumingdisplan/m1m2wip/m1m2wip.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__m1m2workwip_m1m2workwip_component__ = __webpack_require__("./src/app/toumingdisplan/m1m2workwip/m1m2workwip.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__cstgls_cstgls_component__ = __webpack_require__("./src/app/toumingdisplan/cstgls/cstgls.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__cstpnl_cstpnl_component__ = __webpack_require__("./src/app/toumingdisplan/cstpnl/cstpnl.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/esm5/forms.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__ = __webpack_require__("./node_modules/primeng/primeng.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_primeng_primeng___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_primeng_primeng__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_primeng_button__ = __webpack_require__("./node_modules/primeng/button.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_primeng_button___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_primeng_button__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_primeng_panel__ = __webpack_require__("./node_modules/primeng/panel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_primeng_panel___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_primeng_panel__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_primeng_table__ = __webpack_require__("./node_modules/primeng/table.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_primeng_table___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_primeng_table__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_ngx_echarts__ = __webpack_require__("./node_modules/ngx-echarts/ngx-echarts.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__common_service_api_api_service__ = __webpack_require__("./src/app/common/service/api/api.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__report_ui_service_report_ui_common_service__ = __webpack_require__("./src/app/report-ui/service/report-ui-common.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__boe_pages_echarts_panel_service__ = __webpack_require__("./src/app/boe/pages/echarts/panel.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__boe_ui_boe_list_service_file_upload_service__ = __webpack_require__("./src/app/boe-ui/boe-list/service/file-upload.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_primeng_components_common_messageservice__ = __webpack_require__("./node_modules/primeng/components/common/messageservice.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_primeng_components_common_messageservice___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_primeng_components_common_messageservice__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__cstpnl_pipe_zero_convert_pipe__ = __webpack_require__("./src/app/toumingdisplan/cstpnl/pipe/zero-convert.pipe.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





















var ToumingdisplanModule = /** @class */ (function () {
    function ToumingdisplanModule() {
    }
    ToumingdisplanModule = __decorate([
        Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            imports: [
                __WEBPACK_IMPORTED_MODULE_1__angular_common__["CommonModule"],
                __WEBPACK_IMPORTED_MODULE_2__toumingdisplan_routing_module__["a" /* ToumingdisplanRoutingModule */],
                __WEBPACK_IMPORTED_MODULE_9__angular_forms__["FormsModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["DropdownModule"],
                __WEBPACK_IMPORTED_MODULE_11_primeng_button__["ButtonModule"],
                __WEBPACK_IMPORTED_MODULE_12_primeng_panel__["PanelModule"],
                __WEBPACK_IMPORTED_MODULE_13_primeng_table__["TableModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["InputTextModule"],
                __WEBPACK_IMPORTED_MODULE_14_ngx_echarts__["a" /* NgxEchartsModule */],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["MultiSelectModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["MultiSelectModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["CalendarModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["GrowlModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["InputSwitchModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["FileUploadModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["PaginatorModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["TabViewModule"],
                __WEBPACK_IMPORTED_MODULE_10_primeng_primeng__["CheckboxModule"] // 这个是多选按钮组
            ],
            declarations: [__WEBPACK_IMPORTED_MODULE_3__fabwip_fabwip_component__["a" /* FabwipComponent */], __WEBPACK_IMPORTED_MODULE_4__fabmovement_fabmovement_component__["a" /* FabmovementComponent */], __WEBPACK_IMPORTED_MODULE_5__m1m2wip_m1m2wip_component__["a" /* M1m2wipComponent */], __WEBPACK_IMPORTED_MODULE_6__m1m2workwip_m1m2workwip_component__["a" /* M1m2workwipComponent */], __WEBPACK_IMPORTED_MODULE_7__cstgls_cstgls_component__["a" /* CstglsComponent */], __WEBPACK_IMPORTED_MODULE_8__cstpnl_cstpnl_component__["a" /* CstpnlComponent */], __WEBPACK_IMPORTED_MODULE_20__cstpnl_pipe_zero_convert_pipe__["a" /* ZeroConvertPipe */]],
            providers: [__WEBPACK_IMPORTED_MODULE_15__common_service_api_api_service__["a" /* ApiService */], __WEBPACK_IMPORTED_MODULE_16__report_ui_service_report_ui_common_service__["a" /* ReportUiCommonService */], __WEBPACK_IMPORTED_MODULE_17__boe_pages_echarts_panel_service__["a" /* PanelService */], __WEBPACK_IMPORTED_MODULE_18__boe_ui_boe_list_service_file_upload_service__["a" /* FileUploadService */], __WEBPACK_IMPORTED_MODULE_19_primeng_components_common_messageservice__["MessageService"]]
        })
    ], ToumingdisplanModule);
    return ToumingdisplanModule;
}());



/***/ })

});
//# sourceMappingURL=toumingdisplan.module.chunk.js.map