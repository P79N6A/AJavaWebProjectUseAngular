import { Component, OnInit } from '@angular/core';
import { Message } from 'primeng/api';
import { ApiService } from '../../common/service/api/api.service';
import { saveAs } from 'file-saver';

import * as FileSaver from 'file-saver';
import * as XLSX from 'xlsx';

@Component({
  selector: 'app-factoryproduct',
  templateUrl: './factoryproduct.component.html',
  styleUrls: ['./factoryproduct.component.css']
})
export class FactoryproductComponent implements OnInit {
  
  timekey = ['07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17',
    '18', '19', '20', '21', '22', '23', '00', '01', '02', '03', '04', '05', '06', 'TTL'];

  // 保存每一行数据的数组
  // Array
  ArrayInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayMovPecvd = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayMovSputter = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayMovPhoto = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayMovEtch = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayOutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayOutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayOutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  ArrayWip = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  // CF
  CfInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovIto = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovBm = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovR = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovG = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovB = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovOc = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfMovPs = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfOutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfOutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfOutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CfWip = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  // Cell
  CellInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellMov = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellAssyPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellAssyAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellAssyBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellCutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellCutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellCutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellOutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellOutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellOutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cell120KPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cell120KAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cell120KBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellWipAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  CellWipCut = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  // STK
  StkBankTft = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkBankCf = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkBankSort = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkBankSortWait = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkMovCellIn = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkMovSort = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkStkABuff = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkStkCBuff = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkStkT1 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkStkT2 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkStkT3 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  StkStkT4 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1InPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1InAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1InBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1MovMmt = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1MovAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1PackingPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1PackingAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1PackingBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1BankPcs = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1BankPcl = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1WipM01 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1WipM02 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M1WipM06 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  // 2Cut
  Cut2InPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cut2InAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cut2InBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cut2OutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cut2OutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cut2OutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  Cut2Wip = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  // M2 COG
  M2CogInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogMovMmt = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogMovAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogWipM21 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogWipM22 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogWipM26 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CogBank = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  // M2 COF
  M2CofInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofMovMmt = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofMovAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofWipM21 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofWipM22 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofWipM26 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
  M2CofBank = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
    '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

  option;
  nowTime: Date;
  nowDay;
  dateName: Date; // 输入的查询时间

  msgs: Message[] = [];

  // 下面是remark  的 变量
  ArrayInRemark = '';
  ArrayMovRemark = '';
  ArrayOutRemark = '';

  CFInRemark = '';
  CFMovRemark = '';
  CFOutRemark = '';

  CellInMovRemark = '';
  CellAssyRemark = '';
  CellCutRemark = '';
  CellOutRemark = '';
  Cell120kWIPRemark = '';

  STKRemark = '';

  M1InMovRemark = '';
  M1PackingBankRemark = '';
  M1WIPRemark = '';

  TwoCutRemark = '';

  M2COGRemark = '';

  M2COFRemark = '';

  remarks: string[] = [this.ArrayInRemark, this.ArrayMovRemark, this.ArrayOutRemark,
  this.CFInRemark, this.CFMovRemark, this.CFOutRemark,
  this.CellInMovRemark, this.CellAssyRemark, this.CellCutRemark, this.CellOutRemark, this.Cell120kWIPRemark,
  this.STKRemark,
  this.M1InMovRemark, this.M1PackingBankRemark, this.M1WIPRemark,
  this.TwoCutRemark,
  this.M2COGRemark, this.M2COGRemark];



  constructor(private apiService: ApiService) { }

  ngOnInit() {

    this.nowTime = new Date();

    this.msgs.push({ severity: 'info', summary: '查询状态', detail: '正在查询 ! 请稍后...' });

    if (this.nowTime.getHours() < 7) {
      this.nowDay = new Date(this.nowTime.getTime() - 24 * 60 * 60 * 1000).toLocaleDateString();
      this.option = {
        params: {
          dayControl: '-1'
        }
      };
    } else {
      this.nowDay = this.nowTime.toLocaleDateString();
      this.option = {
        params: {
          dayControl: ''
        }
      };
    }

    this.apiService.get('/sc/hourmonitor', this.option).subscribe(
      (res) => {
        console.log(res);
        this.setArrayData(res);
      },
      (err) => {
        console.log(err);
      },
      () => {
        this.msgs = [{ severity: 'success', summary: '查询状态', detail: '查询完成 !' }];
        setTimeout(() => { this.msgs = []; }, 2000);
      }
    );
  }

  query() {
    if (this.dateName != null) {
      this.msgs.push({ severity: 'info', summary: '查询状态', detail: '正在查询 ! 请稍后...' });
      const year = this.dateName.getFullYear().toString();
      let month: string;
      let day: string;
      if (this.dateName.getMonth() < 9) {
        month = '0' + (this.dateName.getMonth() + 1);
      } else {
        month = (this.dateName.getMonth() + 1).toString();
      }
      if (this.dateName.getDate() < 10) {
        day = '0' + this.dateName.getDate();
      } else {
        day = this.dateName.getDate().toString();
      }

      this.option = {
        params: {
          dateValue: year + month + day
        }
      };
      this.apiService.get('/sc/hourmonitorOneday', this.option).subscribe(
        (res) => {
          this.setArrayData(res);
          this.nowDay = this.dateName.toLocaleDateString();
        },
        (err) => {
          console.log(err);
        },
        () => {
          this.msgs = [{ severity: 'success', summary: '查询状态', detail: '查询完成 !' }];
          setTimeout(() => { this.msgs = []; }, 2000);
           //这个位置 很刁钻 啊  ，在数据查询完成之后，在查询这个remark 新添加的查询 remark 的内容的操作
            this.queryRemark();
        }
      );

     
    }
  }

  // 为每一行的数组赋值
  setArrayData(data) {

    this.ArrayInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayMovPecvd = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayMovSputter = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayMovPhoto = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayMovEtch = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayOutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayOutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayOutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.ArrayWip = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    // CF
    this.CfInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovIto = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovBm = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovR = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovG = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovB = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovOc = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfMovPs = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfOutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfOutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfOutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CfWip = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    // Cell
    this.CellInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellMov = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellAssyPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellAssyAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellAssyBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellCutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellCutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellCutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellOutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellOutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellOutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cell120KPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cell120KAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cell120KBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellWipAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.CellWipCut = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    // STK
    this.StkBankTft = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkBankCf = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkBankSort = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkBankSortWait = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkMovCellIn = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkMovSort = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkStkABuff = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkStkCBuff = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkStkT1 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkStkT2 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkStkT3 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.StkStkT4 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1InPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1InAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1InBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1MovMmt = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1MovAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1PackingPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1PackingAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1PackingBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1BankPcs = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1BankPcl = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1WipM01 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1WipM02 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M1WipM06 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    // 2Cut
    this.Cut2InPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cut2InAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cut2InBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cut2OutPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cut2OutAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cut2OutBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.Cut2Wip = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    // M2 COG
    this.M2CogInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogMovMmt = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogMovAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogWipM21 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogWipM22 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogWipM26 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CogBank = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    // M2 COF
    this.M2CofInPlan = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofInAct = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofInBal = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofMovMmt = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofMovAssy = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofWipM21 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofWipM22 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofWipM26 = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];
    this.M2CofBank = ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
      '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'];

    this.setDataPlanBal(data);
    this.setData(data, this.ArrayInAct, 'Array In');
    this.setData(data, this.ArrayMovPecvd, 'Array PECVD');
    this.setData(data, this.ArrayMovSputter, 'Array Sputter');
    this.setData(data, this.ArrayMovPhoto, 'Array Photo');
    this.setData(data, this.ArrayMovEtch, 'Array Etch');
    this.setData(data, this.ArrayOutAct, 'Array Out');
    this.setData(data, this.ArrayWip, 'Array WIP');
    this.setData(data, this.CfInAct, 'CF In');
    this.setData(data, this.CfMovIto, 'CF ITO');
    this.setData(data, this.CfMovBm, 'CF BM');
    this.setData(data, this.CfMovR, 'CF R');
    this.setData(data, this.CfMovG, 'CF G');
    this.setData(data, this.CfMovB, 'CF B');
    this.setData(data, this.CfMovOc, 'CF OC');
    this.setData(data, this.CfMovPs, 'CF PS');
    this.setData(data, this.CfOutAct, 'CF Out');
    this.setData(data, this.CfWip, 'CF WIP');
    this.setData(data, this.CellInAct, 'Cell In');
    this.setData(data, this.CellMov, 'Cell Rub');
    this.setData(data, this.CellAssyAct, 'Cell Assy');
    this.setData(data, this.CellCutAct, 'Cell Cut');
    this.setData(data, this.CellOutAct, 'Cell Out');
    this.setData(data, this.Cell120KAct, 'Cell 120K');
    this.setData(data, this.CellWipAssy, 'Cell Assy WIP');
    this.setData(data, this.CellWipCut, 'Cell Cut WIP');
    this.setData(data, this.StkBankTft, 'STK Bank TFT');
    this.setData(data, this.StkBankCf, 'STK Bank CF');
    this.setData(data, this.StkBankSort, 'STK Bank Sort量');
    this.setData(data, this.StkBankSortWait, 'STK Bank 待Sort');
    this.setData(data, this.StkMovCellIn, 'STK Cell In');
    this.setData(data, this.StkMovSort, 'STK Sort');
    this.setData(data, this.StkStkABuff, 'STK ABuff');
    this.setData(data, this.StkStkCBuff, 'STK CBuff');
    this.setData(data, this.StkStkT1, 'STK T1');
    this.setData(data, this.StkStkT2, 'STK T2');
    this.setData(data, this.StkStkT3, 'STK T3');
    this.setData(data, this.StkStkT4, 'STK T4');
    this.setData(data, this.M1InAct, 'M1 In');
    this.setData(data, this.M1MovMmt, 'M1 MMT');
    this.setData(data, this.M1MovAssy, 'M1 Assy');
    this.setData(data, this.M1PackingAct, 'M1 Packing');
    this.setData(data, this.M1BankPcs, 'M1Bank_PCS');
    this.setData(data, this.M1BankPcl, 'M1Bank_PCL');
    this.setData(data, this.M1WipM01, 'M1WIP_M01');
    this.setData(data, this.M1WipM02, 'M1WIP_M02');
    this.setData(data, this.M1WipM06, 'M1WIP_M06');
    this.setData(data, this.Cut2InAct, '2Cut In');
    this.setData(data, this.Cut2OutAct, '2Cut Out');
    this.setData(data, this.Cut2Wip, '2Cut_WIP');
    this.setData(data, this.M2CogInAct, 'M2 In COG');
    this.setData(data, this.M2CogMovMmt, 'M2 MMT COG');
    this.setData(data, this.M2CogMovAssy, 'M2 Assy COG');
    this.setData(data, this.M2CogWipM21, 'M2WIP M21 COG');
    this.setData(data, this.M2CogWipM22, 'M2WIP M22 COG');
    this.setData(data, this.M2CogWipM26, 'M2WIP M26 COG');
    this.setData(data, this.M2CogBank, 'M2 COG Bank');
    this.setData(data, this.M2CofInAct, 'M2 In COF');
    this.setData(data, this.M2CofMovMmt, 'M2 MMT COF');
    this.setData(data, this.M2CofMovAssy, 'M2 Assy COF');
    this.setData(data, this.M2CofWipM21, 'M2WIP M21 COF');
    this.setData(data, this.M2CofWipM22, 'M2WIP M22 COF');
    this.setData(data, this.M2CofWipM26, 'M2WIP M26 COF');
    this.setData(data, this.M2CofBank, 'M2 COF Bank');

  }

  // 为数组的06到05赋值，如果数据中没有，则不改变默认值,为数组最后一个元素赋值，求前面所有元素的和
  setData(data, array, operation: String) {

    const judgeOperation = (operation !== 'STK ABuff' && operation !== 'STK CBuff' && operation !== 'STK T1' &&
      operation !== 'STK T2' && operation !== 'STK T3' && operation !== 'STK T4');

    for (const obj of data) {
      if (obj.item === operation) {
        switch (obj.hour) {
          case '07':
            if (obj.qty !== null) { array[0] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '08':
            if (obj.qty !== null) { array[1] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '09':
            if (obj.qty !== null) { array[2] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '10':
            if (obj.qty !== null) { array[3] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '11':
            if (obj.qty !== null) { array[4] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '12':
            if (obj.qty !== null) { array[5] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '13':
            if (obj.qty !== null) { array[6] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '14':
            if (obj.qty !== null) { array[7] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '15':
            if (obj.qty !== null) { array[8] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '16':
            if (obj.qty !== null) { array[9] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '17':
            if (obj.qty !== null) { array[10] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '18':
            if (obj.qty !== null) { array[11] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '19':
            if (obj.qty !== null) { array[12] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '20':
            if (obj.qty !== null) { array[13] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '21':
            if (obj.qty !== null) { array[14] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '22':
            if (obj.qty !== null) { array[15] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '23':
            if (obj.qty !== null) { array[16] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '00':
            if (obj.qty !== null) { array[17] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '01':
            if (obj.qty !== null) { array[18] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '02':
            if (obj.qty !== null) { array[19] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '03':
            if (obj.qty !== null) { array[20] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '04':
            if (obj.qty !== null) { array[21] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '05':
            if (obj.qty !== null) { array[22] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
          case '06':
            if (obj.qty !== null) { array[23] = judgeOperation ? obj.qty.toString() : (parseFloat((obj.qty * 100).toFixed(1)) + '%'); }
            break;
        }
      }
    }

    // 如果operation不在如下类型里面，数组的最后一个元素是前面所有数据的和，否则求求平均
    if (operation !== 'Array WIP' && operation !== 'CF WIP' && operation !== 'Cell Assy WIP' && operation !== 'Cell Cut WIP'
      && operation !== 'M1WIP_M01' && operation !== 'M1WIP_M02' && operation !== 'M1WIP_M06'
      && operation !== '2Cut_WIP' && operation !== 'M2WIP M21 COG' && operation !== 'M2WIP M22 COG' && operation !== 'M2WIP M26 COG'
      && operation !== 'M2WIP M21 COF' && operation !== 'M2WIP M22 COF' && operation !== 'M2WIP M26 COF'
      && operation !== 'STK Bank TFT' && operation !== 'STK Bank CF' && operation !== 'STK Bank Sort量'
      && operation !== 'STK Bank 待Sort' && operation !== 'M1Bank_PCS' && operation !== 'M1Bank_PCL'
      && operation !== 'M2 COG Bank' && operation !== 'M2 COF Bank') {
      if (judgeOperation) {
        let sum = 0;
        for (const i of array) {
          if (i !== '-') {
            sum += parseInt(i, 10);
          }
        }
        if (sum !== 0) {
          array[24] = sum.toString();
        } else {
          array[24] = '-';
        }
      } else {
        let sum = 0;
        let count = 0;
        for (const i of array) {
          if (i !== '-') {
            sum += parseFloat(i);
            count++;
          }
        }
        if (sum !== 0) {
          array[24] = parseFloat((sum / count).toFixed(1)) + '%';
        } else {
          array[24] = '-';
        }
      }
    } else {
      let sum = 0;
      let count = 0;
      for (const i of array) {
        if (i !== '-') {
          sum += parseInt(i, 10);
          count++;
        }
      }
      if (sum !== 0) {
        array[24] = (sum / count).toFixed(0);
      } else {
        array[24] = '-';
      }
    }

    for (const key in array) {
      if (array.hasOwnProperty(key)) {
        if (array[key] === '0') {
          array[key] = '-';
        }
      }
    }

  }

  setDataPlanBal(data) {
    let sumArrayIn = 0;
    let sumArrayOut = 0;
    let sumCfIn = 0;
    let sumCfOut = 0;
    let sumCellIn = 0;
    let sumCellAssy = 0;
    let sumCellCut = 0;
    let sumCellOut = 0;
    let sumCell120K = 0;
    let sumM1In = 0;
    let sumM1Packing = 0;
    let sum2CutIn = 0;
    let sum2CutOut = 0;
    let sumCogIn = 0;
    let sumCofIn = 0;
    for (const obj of data) {
      switch (obj.item) {
        case 'Array In':
          this.setPlanBal(obj, this.ArrayInPlan, this.ArrayInBal);
          this.getBalTtl(this.ArrayInBal);
          sumArrayIn += obj.actplan;
          break;
        case 'Array Out':
          this.setPlanBal(obj, this.ArrayOutPlan, this.ArrayOutBal);
          this.getBalTtl(this.ArrayOutBal);
          sumArrayOut += obj.actplan;
          break;
        case 'CF In':
          this.setPlanBal(obj, this.CfInPlan, this.CfInBal);
          this.getBalTtl(this.CfInBal);
          sumCfIn += obj.actplan;
          break;
        case 'CF Out':
          this.setPlanBal(obj, this.CfOutPlan, this.CfOutBal);
          this.getBalTtl(this.CfOutBal);
          sumCfOut += obj.actplan;
          break;
        case 'Cell In':
          this.setPlanBal(obj, this.CellInPlan, this.CellInBal);
          this.getBalTtl(this.CellInBal);
          sumCellIn += obj.actplan;
          break;
        case 'Cell Assy':
          this.setPlanBal(obj, this.CellAssyPlan, this.CellAssyBal);
          this.getBalTtl(this.CellAssyBal);
          sumCellAssy += obj.actplan;
          break;
        case 'Cell Cut':
          this.setPlanBal(obj, this.CellCutPlan, this.CellCutBal);
          this.getBalTtl(this.CellCutBal);
          sumCellCut += obj.actplan;
          break;
        case 'Cell Out':
          this.setPlanBal(obj, this.CellOutPlan, this.CellOutBal);
          this.getBalTtl(this.CellOutBal);
          sumCellOut += obj.actplan;
          break;
        case 'Cell 120K':
          this.setPlanBal(obj, this.Cell120KPlan, this.Cell120KBal);
          this.getBalTtl(this.Cell120KBal);
          sumCell120K += obj.actplan;
          break;
        case 'M1 In':
          this.setPlanBal(obj, this.M1InPlan, this.M1InBal);
          this.getBalTtl(this.M1InBal);
          sumM1In += obj.actplan;
          break;
        case 'M1 Packing':
          this.setPlanBal(obj, this.M1PackingPlan, this.M1PackingBal);
          this.getBalTtl(this.M1PackingBal);
          sumM1Packing += obj.actplan;
          break;
        case '2Cut In':
          this.setPlanBal(obj, this.Cut2InPlan, this.Cut2InBal);
          this.getBalTtl(this.Cut2InBal);
          sum2CutIn += obj.actplan;
          break;
        case '2Cut Out':
          this.setPlanBal(obj, this.Cut2OutPlan, this.Cut2OutBal);
          this.getBalTtl(this.Cut2OutBal);
          sum2CutOut += obj.actplan;
          break;
        case 'M2 In COG':
          this.setPlanBal(obj, this.M2CogInPlan, this.M2CogInBal);
          this.getBalTtl(this.M2CogInBal);
          sumCogIn += obj.actplan;
          break;
        case 'M2 In COF':
          this.setPlanBal(obj, this.M2CofInPlan, this.M2CofInBal);
          this.getBalTtl(this.M2CofInBal);
          sumCofIn += obj.actplan;
          break;
      }
    }

    this.setPlan(sumArrayIn, this.ArrayInPlan);
    this.setPlan(sumArrayOut, this.ArrayOutPlan);
    this.setPlan(sumCfIn, this.CfInPlan);
    this.setPlan(sumCfOut, this.CfOutPlan);
    this.setPlan(sumCellIn, this.CellInPlan);
    this.setPlan(sumCellAssy, this.CellAssyPlan);
    this.setPlan(sumCellCut, this.CellCutPlan);
    this.setPlan(sumCellOut, this.CellOutPlan);
    this.setPlan(sumCell120K, this.Cell120KPlan);
    this.setPlan(sum2CutIn, this.Cut2InPlan);
    this.setPlan(sum2CutOut, this.Cut2OutPlan);
    this.setPlan(sumM1In, this.M1InPlan);
    this.setPlan(sumM1Packing, this.M1PackingPlan);
    this.setPlan(sumCogIn, this.M2CogInPlan);
    this.setPlan(sumCofIn, this.M2CofInPlan);

  }

  setPlan(sum, array) {
    if (sum !== 0) {
      array[24] = sum.toString();
    }
  }

  setPlanBal(obj, plan, bal) {
    switch (obj.hour) {
      case '07':
        if (obj.planqty !== null) {
          plan[0] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[0] = obj.balqty.toString();
        }
        break;
      case '08':
        if (obj.planqty !== null) {
          plan[1] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[1] = obj.balqty.toString();
        }
        break;
      case '09':
        if (obj.planqty !== null) {
          plan[2] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[2] = obj.balqty.toString();
        }
        break;
      case '10':
        if (obj.planqty !== null) {
          plan[3] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[3] = obj.balqty.toString();
        }
        break;
      case '11':
        if (obj.planqty !== null) {
          plan[4] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[4] = obj.balqty.toString();
        }
        break;
      case '12':
        if (obj.planqty !== null) {
          plan[5] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[5] = obj.balqty.toString();
        }
        break;
      case '13':
        if (obj.planqty !== null) {
          plan[6] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[6] = obj.balqty.toString();
        }
        break;
      case '14':
        if (obj.planqty !== null) {
          plan[7] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[7] = obj.balqty.toString();
        }
        break;
      case '15':
        if (obj.planqty !== null) {
          plan[8] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[8] = obj.balqty.toString();
        }
        break;
      case '16':
        if (obj.planqty !== null) {
          plan[9] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[9] = obj.balqty.toString();
        }
        break;
      case '17':
        if (obj.planqty !== null) {
          plan[10] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[10] = obj.balqty.toString();
        }
        break;
      case '18':
        if (obj.planqty !== null) {
          plan[11] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[11] = obj.balqty.toString();
        }
        break;
      case '19':
        if (obj.planqty !== null) {
          plan[12] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[12] = obj.balqty.toString();
        }
        break;
      case '20':
        if (obj.planqty !== null) {
          plan[13] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[13] = obj.balqty.toString();
        }
        break;
      case '21':
        if (obj.planqty !== null) {
          plan[14] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[14] = obj.balqty.toString();
        }
        break;
      case '22':
        if (obj.planqty !== null) {
          plan[15] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[15] = obj.balqty.toString();
        }
        break;
      case '23':
        if (obj.planqty !== null) {
          plan[16] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[16] = obj.balqty.toString();
        }
        break;
      case '00':
        if (obj.planqty !== null) {
          plan[17] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[17] = obj.balqty.toString();
        }
        break;
      case '01':
        if (obj.planqty !== null) {
          plan[18] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[18] = obj.balqty.toString();
        }
        break;
      case '02':
        if (obj.planqty !== null) {
          plan[19] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[19] = obj.balqty.toString();
        }
        break;
      case '03':
        if (obj.planqty !== null) {
          plan[20] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[20] = obj.balqty.toString();
        }
        break;
      case '04':
        if (obj.planqty !== null) {
          plan[21] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[21] = obj.balqty.toString();
        }
        break;
      case '05':
        if (obj.planqty !== null) {
          plan[22] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[22] = obj.balqty.toString();
        }
        break;
      case '06':
        if (obj.planqty !== null) {
          plan[23] = obj.planqty.toString();
        }
        if (obj.balqty !== null) {
          bal[23] = obj.balqty.toString();
        }
        break;
    }
  }

  getBalTtl(array) {
    let sum = 0;
    if (array[0] !== '-') {
      sum += parseInt(array[0], 10);
    }
    if (array[1] !== '-') {
      sum += parseInt(array[1], 10);
    }
    if (array[2] !== '-') {
      sum += parseInt(array[2], 10);
    }
    if (array[3] !== '-') {
      sum += parseInt(array[3], 10);
    }
    if (array[4] !== '-') {
      sum += parseInt(array[4], 10);
    }
    if (array[5] !== '-') {
      sum += parseInt(array[5], 10);
    }
    if (array[6] !== '-') {
      sum += parseInt(array[6], 10);
    }
    if (array[7] !== '-') {
      sum += parseInt(array[7], 10);
    }
    if (array[8] !== '-') {
      sum += parseInt(array[8], 10);
    }
    if (array[9] !== '-') {
      sum += parseInt(array[9], 10);
    }
    if (array[10] !== '-') {
      sum += parseInt(array[10], 10);
    }
    if (array[11] !== '-') {
      sum += parseInt(array[11], 10);
    }
    if (array[12] !== '-') {
      sum += parseInt(array[12], 10);
    }
    if (array[13] !== '-') {
      sum += parseInt(array[13], 10);
    }
    if (array[14] !== '-') {
      sum += parseInt(array[14], 10);
    }
    if (array[15] !== '-') {
      sum += parseInt(array[15], 10);
    }
    if (array[16] !== '-') {
      sum += parseInt(array[16], 10);
    }
    if (array[17] !== '-') {
      sum += parseInt(array[17], 10);
    }
    if (array[18] !== '-') {
      sum += parseInt(array[18], 10);
    }
    if (array[19] !== '-') {
      sum += parseInt(array[19], 10);
    }
    if (array[20] !== '-') {
      sum += parseInt(array[20], 10);
    }
    if (array[21] !== '-') {
      sum += parseInt(array[21], 10);
    }
    if (array[22] !== '-') {
      sum += parseInt(array[22], 10);
    }
    if (array[23] !== '-') {
      sum += parseInt(array[23], 10);
    }
    if (sum !== 0) {
      array[24] = sum.toString();
    }
  }

  getPlanTtl(obj, plan) {
    let sum = 0;
    if (obj.actplan !== null) {
      sum += obj.actplan;
    }

    if (sum !== 0) {
      plan[24] = sum.toString();
    }
  }

  refresh() {
    this.msgs.push({ severity: 'info', summary: '查询状态', detail: '正在刷新 ! 请稍后...' });
    this.dateName = null;
    this.nowTime = new Date();

    if (this.nowTime.getHours() < 6) {
      this.nowDay = new Date(this.nowTime.getTime() - 24 * 60 * 60 * 1000).toLocaleDateString();
      this.option = {
        params: {
          dayControl: '-1'
        }
      };
    } else {
      this.nowDay = this.nowTime.toLocaleDateString();
      this.option = {
        params: {
          dayControl: ''
        }
      };
    }

    this.apiService.get('/sc/hourmonitor', this.option).subscribe(
      (res) => {
        this.setArrayData(res);
      },
      (err) => {
        console.log(err);
      },
      () => {
        this.msgs = [{ severity: 'success', summary: '查询状态', detail: '刷新完成 !' }];
        setTimeout(() => { this.msgs = []; }, 2000);
      }
    );

     //新添加的查询 remark 的内容的操作
     this.queryRemark();
  }

  // exportTable() {
  //   const blob = new Blob([document.getElementById('hourmonitor').innerHTML], {
  //     type: 'application/octet-stream;charset=utf-8'
  //   });
  //   saveAs(blob, '小时段监控' + this.nowDay + '.xls');
  // }

  exportTable(){
    const worksheet: XLSX.WorkSheet = XLSX.utils.table_to_sheet(document.getElementById('hourmonitor')); // 将这个表格转换成一个 sheet
    const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };
    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    //这里类型如果不正确，下载出来的可能是类似xml文件的东西或者是类似二进制的东西等
    this.saveAsExcelFile(excelBuffer, "小时段监控");

  }
 saveAsExcelFile(buffer: any, fileName: string) {
  const data: Blob = new Blob([buffer], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'
  });
  FileSaver.saveAs(data, fileName + this.nowDay+ '.xls');

}


  // 下面是  remark  的内容改变了之后的 往数据库中写入数据的操作

  updateRemark(item, id) {

    this.remarks = [this.ArrayInRemark, this.ArrayMovRemark, this.ArrayOutRemark,
    this.CFInRemark, this.CFMovRemark, this.CFOutRemark,
    this.CellInMovRemark, this.CellAssyRemark, this.CellCutRemark, this.CellOutRemark, this.Cell120kWIPRemark,
    this.STKRemark,
    this.M1InMovRemark, this.M1PackingBankRemark, this.M1WIPRemark,
    this.TwoCutRemark,
    this.M2COGRemark, this.M2COFRemark];

    let remarkstr = this.remarks[id];
    const option = {
      params: {
        datename: this.nowDay,
        report: 'HourMonitor',
        item: item,
        remark: remarkstr
      }
    };
    const url = '/keyinremartk';
    this.apiService.get(url, option).subscribe(
      (res) => {
        //这里面其实什么都不用写
      },
      (error) => { console.log(error) }
    );
  }


  //下面 是 从 数据表中 读取 remark 的操作
  queryRemark(){
    const option={
      params:{
        datename : this.nowDay,
        report : 'HourMonitor',
      }
    };
    const url = '/queryRemark';
    this.apiService.get(url,option).subscribe(
      (res)=>{
        if(Array.isArray(res)){
          for(const object of res){
            let item = object['item'];
            let remark = object['remark'];
           switch(item){
             case 'Array In' : {this.ArrayInRemark = remark;break;}
             case 'Array Mov' : {this.ArrayMovRemark = remark;break;}
             case 'Array Out' : {this.ArrayOutRemark = remark;break;}

             case 'CF In' : {this.CFInRemark = remark;break;}
             case 'CF Mov' : {this.CFMovRemark = remark;break;}
             case 'CF Out' : {this.CFOutRemark = remark;break;}

             case 'Cell In&Mov' : {this.CellInMovRemark = remark;break;}
             case 'Cell Assy' : {this.CellAssyRemark = remark;break;}
             case 'Cell Cut' : {this.CellCutRemark = remark;break;}
             case 'Cell Out' : {this.CellOutRemark = remark;break;}
             case 'Cell 120k&Wip' : {this.Cell120kWIPRemark = remark;break;}

             case 'STK' : {this.STKRemark = remark;break;} 

             case 'M1 In&Mov' : {this.M1InMovRemark = remark;break;}
             case 'M1 Packing&Bank' : {this.M1PackingBankRemark = remark;break;}  
             case 'M1 WIP' : {this.M1WIPRemark = remark;break;}

             case '2Cut' : {this.TwoCutRemark = remark;break;}  

             case 'M2 COG' : {this.M2COGRemark= remark;break;}
             case 'M2 COF' : {this.M2COFRemark = remark;break;}
           }
          }
        }
      },
      (error)=>{console.log(error)}
    );
  }

}
