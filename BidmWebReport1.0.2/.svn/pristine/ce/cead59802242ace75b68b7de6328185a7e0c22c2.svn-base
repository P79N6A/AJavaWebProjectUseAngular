package com.boe.idm.project.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.boe.idm.project.mapper.primaryOracle.dev.CellImportPlanMapper;
import com.boe.idm.project.model.mybatis.CellImportPlanVO;
import com.boe.idm.project.service.CellImportPlanService;


@Service
public class CellImportPlanServiceImple implements CellImportPlanService {
	
	
	
	@Autowired
	private CellImportPlanMapper cellImportPlanMapper;

	//1.读取文件中的数据
	@Override
	public List<CellImportPlanVO> readExcelData(String localpath) throws Exception {
		//1.准备一个list用来保存读取到的数据
		List<CellImportPlanVO> list = new ArrayList<CellImportPlanVO>();
		//2.把参数中的文件路径转换一下，并根据文件路径创建一个新的文件
		File file = new File(localpath.replaceAll("\\\\", "/"));
		//3.如果文件没有什么错误，则继续执行
		if (file != null && file.exists()) {
			//4.获取workbook对象,如果没有什么错误，则继续执行
			Workbook workbook = this.getWorkbok(file);
			if (workbook != null) {
				//5.获取第一个sheet,如果没有什么错误，则继续执行
				Sheet sheet =  workbook.getSheetAt(0);
				if (sheet != null) {
					//6.循环整个sheet,一行一行的读书据，一个单元格一个单元格的毒数据,
					//一行就是一个对象，一个单元格就是一个属性
					for(int i = sheet.getFirstRowNum()+1;i <= sheet.getLastRowNum();i++){
						Row row = sheet.getRow(i);
						// 如果这一行是空的，则接着读取下一跳的数据
						if (row == null) { 
							continue;
						}
						// 如果这一行不是空的，那么就会创建对象，并且正常的赋值
						CellImportPlanVO cellImportPlanVO = new CellImportPlanVO();
						int firstcellnum =  row.getFirstCellNum();
						cellImportPlanVO.setFactory(row.getCell(firstcellnum) != null ? String.valueOf(row.getCell(firstcellnum)) : null);
						cellImportPlanVO.setItem(row.getCell(firstcellnum+1) != null ? String.valueOf(row.getCell(firstcellnum+1)) : null);
						
						String datenamestr = String.valueOf(row.getCell(firstcellnum+2)).trim();
						Double aa = Double.parseDouble(datenamestr);
						BigDecimal bb = new BigDecimal(aa);
						cellImportPlanVO.setDatename(row.getCell(firstcellnum+2) != null ? bb.toString():null);
						
						cellImportPlanVO.setProductspecname(row.getCell(firstcellnum+3) != null ? String.valueOf(row.getCell(firstcellnum+3)).trim():null);
						cellImportPlanVO.setQty(row.getCell(firstcellnum+4) != null ? String.valueOf(row.getCell(firstcellnum+4)).trim() : null);
							
						//属性赋值完毕，把对象放入到list集合中去，ok
						if (cellImportPlanVO != null) {
							list.add(cellImportPlanVO);
						}
					
					}
				}
			}
			
		}
		
		return list;
	}
	
	  /**
     * 判断Excel的版本,获取Workbook
     * @param File
     * @return Workbook
     * @throws IOException
     */
    public Workbook getWorkbok(File file) throws IOException{
    	String fileType = file.getName().substring(file.getName().lastIndexOf("."), file.getName().length());
        Workbook wb = null;
        FileInputStream in = new FileInputStream(file);
        if(fileType.toUpperCase().endsWith("XLS")){     //Excel&nbsp;2003
            wb = new HSSFWorkbook(in);
        }else if(fileType.toUpperCase().endsWith("XLSX")){    // Excel 2007/2010
            wb = new XSSFWorkbook(in);
        }
        return wb;
    }

    //2.向数据库中写入数据 : 因为传参数的问题，需要根据hashmap进行对象的创建与转换
	@Override
	public int insertObjects(List<CellImportPlanVO> list) {
		
		//1.用于保存对象的list
		List<CellImportPlanVO> objects = new ArrayList<>();
		//2.用来保存需要删除的信息对象
		List<CellImportPlanVO> deleteobjects = new ArrayList<>();
		//3.循环所有的list,进行对象的创建
		for(Object object : list){
			HashMap map = (HashMap) object;
			//System.out.println(map);
			CellImportPlanVO aa = new CellImportPlanVO();
			CellImportPlanVO bb = new CellImportPlanVO();
			//创建对象
			aa.setFactory(map.get("factory") != null ? String.valueOf(map.get("factory")).trim() : "");
			aa.setItem(map.get("item") != null ? String.valueOf(map.get("item")).trim() : "");
			aa.setDatename(map.get("datename") != null ? String.valueOf(map.get("datename")).trim() : "");
			aa.setProductspecname(map.get("productspecname") != null ? String.valueOf(map.get("productspecname")).trim() : "");
			aa.setQty(map.get("qty") != null ? String.valueOf(map.get("qty")).trim() : "0");
			aa.setOwner("CL");
			//创建要删除的对象
			bb.setFactory(aa.getFactory());
			bb.setDatename(aa.getDatename());
			if (!deleteobjects.contains(bb)) {
				deleteobjects.add(bb);
			}
			
			if (aa != null) {
				objects.add(aa); // 把对象保存起来，准备后面的写入数据库操作
			}
		}
		//1.先删除
		for(CellImportPlanVO aa : deleteobjects){
			cellImportPlanMapper.delete(aa);
		}
		//2.再插入
		for(CellImportPlanVO aa : objects){
			cellImportPlanMapper.insertObject(aa);
		}
		
		
		return 0;
	}

	//3.读取数据库中的数据
	@Override
	public List<CellImportPlanVO> queryObjects(String startdate, String enddate) {
		return cellImportPlanMapper.queryObjects(startdate, enddate);
	}

}
